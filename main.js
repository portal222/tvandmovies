/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,n={5655:(e,t,n)=>{"use strict";n.d(t,{A:()=>re});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),o=Math.abs,a=String.fromCharCode,i=Object.assign;function l(e){return e.trim()}function u(e,t,n){return e.replace(t,n)}function c(e,t){return e.indexOf(t)}function s(e,t){return 0|e.charCodeAt(t)}function d(e,t,n){return e.slice(t,n)}function p(e){return e.length}function f(e){return e.length}function m(e,t){return t.push(e),e}var h=1,v=1,g=0,y=0,b=0,A="";function x(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:h,column:v,length:i,return:""}}function w(e,t){return i(x("",null,null,"",null,null,0),e,{length:-e.length},t)}function C(){return b=y>0?s(A,--y):0,v--,10===b&&(v=1,h--),b}function S(){return b=y<g?s(A,y++):0,v++,10===b&&(v=1,h++),b}function E(){return s(A,y)}function k(){return y}function B(e,t){return d(A,e,t)}function M(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function O(e){return h=v=1,g=p(A=e),y=0,[]}function N(e){return A="",e}function T(e){return l(B(y-1,P(91===e?e+2:40===e?e+1:e)))}function j(e){for(;(b=E())&&b<33;)S();return M(e)>2||M(b)>3?"":" "}function _(e,t){for(;--t&&S()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return B(e,k()+(t<6&&32==E()&&32==S()))}function P(e){for(;S();)switch(b){case e:return y;case 34:case 39:34!==e&&39!==e&&P(b);break;case 40:41===e&&P(e);break;case 92:S()}return y}function z(e,t){for(;S()&&e+b!==57&&(e+b!==84||47!==E()););return"/*"+B(t,y-1)+"*"+a(47===e?e:S())}function D(e){for(;!M(E());)S();return B(e,y)}var R="-ms-",L="-moz-",I="-webkit-",F="comm",q="rule",U="decl",G="@keyframes";function $(e,t){for(var n="",r=f(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function W(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case U:return e.return=e.return||e.value;case F:return"";case G:return e.return=e.value+"{"+$(e.children,r)+"}";case q:e.value=e.props.join(",")}return p(n=$(e.children,r))?e.return=e.value+"{"+n+"}":""}function Y(e){return N(H("",null,null,null,[""],e=O(e),0,[0],e))}function H(e,t,n,r,o,i,l,d,f){for(var h=0,v=0,g=l,y=0,b=0,A=0,x=1,w=1,B=1,M=0,O="",N=o,P=i,R=r,L=O;w;)switch(A=M,M=S()){case 40:if(108!=A&&58==s(L,g-1)){-1!=c(L+=u(T(M),"&","&\f"),"&\f")&&(B=-1);break}case 34:case 39:case 91:L+=T(M);break;case 9:case 10:case 13:case 32:L+=j(A);break;case 92:L+=_(k()-1,7);continue;case 47:switch(E()){case 42:case 47:m(Q(z(S(),k()),t,n),f);break;default:L+="/"}break;case 123*x:d[h++]=p(L)*B;case 125*x:case 59:case 0:switch(M){case 0:case 125:w=0;case 59+v:-1==B&&(L=u(L,/\f/g,"")),b>0&&p(L)-g&&m(b>32?K(L+";",r,n,g-1):K(u(L," ","")+";",r,n,g-2),f);break;case 59:L+=";";default:if(m(R=V(L,t,n,h,v,o,d,O,N=[],P=[],g),i),123===M)if(0===v)H(L,t,R,R,N,i,g,d,P);else switch(99===y&&110===s(L,3)?100:y){case 100:case 108:case 109:case 115:H(e,R,R,r&&m(V(e,R,R,0,0,o,d,O,o,N=[],g),P),o,P,g,d,r?N:P);break;default:H(L,R,R,R,[""],P,0,d,P)}}h=v=b=0,x=B=1,O=L="",g=l;break;case 58:g=1+p(L),b=A;default:if(x<1)if(123==M)--x;else if(125==M&&0==x++&&125==C())continue;switch(L+=a(M),M*x){case 38:B=v>0?1:(L+="\f",-1);break;case 44:d[h++]=(p(L)-1)*B,B=1;break;case 64:45===E()&&(L+=T(S())),y=E(),v=g=p(O=L+=D(k())),M++;break;case 45:45===A&&2==p(L)&&(x=0)}}return i}function V(e,t,n,r,a,i,c,s,p,m,h){for(var v=a-1,g=0===a?i:[""],y=f(g),b=0,A=0,w=0;b<r;++b)for(var C=0,S=d(e,v+1,v=o(A=c[b])),E=e;C<y;++C)(E=l(A>0?g[C]+" "+S:u(S,/&\f/g,g[C])))&&(p[w++]=E);return x(e,t,n,0===a?q:s,p,m,h)}function Q(e,t,n){return x(e,t,n,F,a(b),d(e,2,-2),0)}function K(e,t,n,r){return x(e,t,n,U,d(e,0,r),d(e,r+1,-1),r)}var Z=function(e,t,n){for(var r=0,o=0;r=o,o=E(),38===r&&12===o&&(t[n]=1),!M(o);)S();return B(e,y)},X=new WeakMap,J=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||X.get(n))&&!r){X.set(e,!0);for(var o=[],i=function(e,t){return N(function(e,t){var n=-1,r=44;do{switch(M(r)){case 0:38===r&&12===E()&&(t[n]=1),e[n]+=Z(y-1,t,n);break;case 2:e[n]+=T(r);break;case 4:if(44===r){e[++n]=58===E()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=a(r)}}while(r=S());return e}(O(e),t))}(t,o),l=n.props,u=0,c=0;u<i.length;u++)for(var s=0;s<l.length;s++,c++)e.props[c]=o[u]?i[u].replace(/&\f/g,l[s]):l[s]+" "+i[u]}}},ee=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function te(e,t){switch(function(e,t){return 45^s(e,0)?(((t<<2^s(e,0))<<2^s(e,1))<<2^s(e,2))<<2^s(e,3):0}(e,t)){case 5103:return I+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return I+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return I+e+L+e+R+e+e;case 6828:case 4268:return I+e+R+e+e;case 6165:return I+e+R+"flex-"+e+e;case 5187:return I+e+u(e,/(\w+).+(:[^]+)/,I+"box-$1$2"+R+"flex-$1$2")+e;case 5443:return I+e+R+"flex-item-"+u(e,/flex-|-self/,"")+e;case 4675:return I+e+R+"flex-line-pack"+u(e,/align-content|flex-|-self/,"")+e;case 5548:return I+e+R+u(e,"shrink","negative")+e;case 5292:return I+e+R+u(e,"basis","preferred-size")+e;case 6060:return I+"box-"+u(e,"-grow","")+I+e+R+u(e,"grow","positive")+e;case 4554:return I+u(e,/([^-])(transform)/g,"$1"+I+"$2")+e;case 6187:return u(u(u(e,/(zoom-|grab)/,I+"$1"),/(image-set)/,I+"$1"),e,"")+e;case 5495:case 3959:return u(e,/(image-set\([^]*)/,I+"$1$`$1");case 4968:return u(u(e,/(.+:)(flex-)?(.*)/,I+"box-pack:$3"+R+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+I+e+e;case 4095:case 3583:case 4068:case 2532:return u(e,/(.+)-inline(.+)/,I+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(p(e)-1-t>6)switch(s(e,t+1)){case 109:if(45!==s(e,t+4))break;case 102:return u(e,/(.+:)(.+)-([^]+)/,"$1"+I+"$2-$3$1"+L+(108==s(e,t+3)?"$3":"$2-$3"))+e;case 115:return~c(e,"stretch")?te(u(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==s(e,t+1))break;case 6444:switch(s(e,p(e)-3-(~c(e,"!important")&&10))){case 107:return u(e,":",":"+I)+e;case 101:return u(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+I+(45===s(e,14)?"inline-":"")+"box$3$1"+I+"$2$3$1"+R+"$2box$3")+e}break;case 5936:switch(s(e,t+11)){case 114:return I+e+R+u(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return I+e+R+u(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return I+e+R+u(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return I+e+R+e+e}return e}var ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case U:e.return=te(e.value,e.length);break;case G:return $([w(e,{value:u(e.value,"@","@"+I)})],r);case q:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return $([w(e,{props:[u(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return $([w(e,{props:[u(t,/:(plac\w+)/,":"+I+"input-$1")]}),w(e,{props:[u(t,/:(plac\w+)/,":-moz-$1")]}),w(e,{props:[u(t,/:(plac\w+)/,R+"input-$1")]})],r)}return""}))}}],re=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,a,i=e.stylisPlugins||ne,l={},u=[];o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)l[t[n]]=!0;u.push(e)}));var c,s,d,p,m=[W,(p=function(e){c.insert(e)},function(e){e.root||(e=e.return)&&p(e)})],h=(s=[J,ee].concat(i,m),d=f(s),function(e,t,n,r){for(var o="",a=0;a<d;a++)o+=s[a](e,t,n,r)||"";return o});a=function(e,t,n,r){c=n,$(Y(e?e+"{"+t.styles+"}":t.styles),h),r&&(v.inserted[t.name]=!0)};var v={key:t,sheet:new r({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:l,registered:{},insert:a};return v.sheet.hydrate(u),v}},6289:(e,t,n)=>{"use strict";function r(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}n.d(t,{A:()=>r})},9214:(e,t,n)=>{"use strict";n.d(t,{C:()=>i,T:()=>u,w:()=>l});var r=n(6540),o=n(5655),a=(n(3174),n(1287),r.createContext("undefined"!=typeof HTMLElement?(0,o.A)({key:"css"}):null)),i=a.Provider,l=function(e){return(0,r.forwardRef)((function(t,n){var o=(0,r.useContext)(a);return e(t,o,n)}))},u=r.createContext({})},7437:(e,t,n)=>{"use strict";n.d(t,{AH:()=>c,i7:()=>s,mL:()=>u});var r=n(9214),o=n(6540),a=n(41),i=n(1287),l=n(3174),u=(n(5655),n(4146),(0,r.w)((function(e,t){var n=e.styles,u=(0,l.J)([n],void 0,o.useContext(r.T)),c=o.useRef();return(0,i.i)((function(){var e=t.key+"-global",n=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),r=!1,o=document.querySelector('style[data-emotion="'+e+" "+u.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),null!==o&&(r=!0,o.setAttribute("data-emotion",e),n.hydrate([o])),c.current=[n,r],function(){n.flush()}}),[t]),(0,i.i)((function(){var e=c.current,n=e[0];if(e[1])e[1]=!1;else{if(void 0!==u.next&&(0,a.sk)(t,u.next,!0),n.tags.length){var r=n.tags[n.tags.length-1].nextElementSibling;n.before=r,n.flush()}t.insert("",u,n,!1)}}),[t,u.name]),null})));function c(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,l.J)(t)}var s=function(){var e=c.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},3174:(e,t,n)=>{"use strict";n.d(t,{J:()=>v});var r={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},o=n(6289),a=!1,i=/[A-Z]|^ms/g,l=/_EMO_([^_]+?)_([^]*?)_EMO_/g,u=function(e){return 45===e.charCodeAt(1)},c=function(e){return null!=e&&"boolean"!=typeof e},s=(0,o.A)((function(e){return u(e)?e:e.replace(i,"-$&").toLowerCase()})),d=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(l,(function(e,t,n){return m={name:t,styles:n,next:m},t}))}return 1===r[e]||u(e)||"number"!=typeof t||0===t?t:t+"px"},p="Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";function f(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var o=n;if(1===o.anim)return m={name:o.name,styles:o.styles,next:m},o.name;var i=n;if(void 0!==i.styles){var l=i.next;if(void 0!==l)for(;void 0!==l;)m={name:l.name,styles:l.styles,next:m},l=l.next;return i.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=f(e,t,n[o])+";";else for(var i in n){var l=n[i];if("object"!=typeof l){var u=l;null!=t&&void 0!==t[u]?r+=i+"{"+t[u]+"}":c(u)&&(r+=s(i)+":"+d(i,u)+";")}else{if("NO_COMPONENT_SELECTOR"===i&&a)throw new Error(p);if(!Array.isArray(l)||"string"!=typeof l[0]||null!=t&&void 0!==t[l[0]]){var m=f(e,t,l);switch(i){case"animation":case"animationName":r+=s(i)+":"+m+";";break;default:r+=i+"{"+m+"}"}}else for(var h=0;h<l.length;h++)c(l[h])&&(r+=s(i)+":"+d(i,l[h])+";")}}return r}(e,t,n);case"function":if(void 0!==e){var u=m,h=n(e);return m=u,f(e,t,h)}}var v=n;if(null==t)return v;var g=t[v];return void 0!==g?g:v}var m,h=/label:\s*([^\s;{]+)\s*(;|$)/g;function v(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";m=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=f(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=f(n,t,e[i]),r&&(o+=a[i]);h.lastIndex=0;for(var l,u="";null!==(l=h.exec(o));)u+="-"+l[1];var c=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+u;return{name:c,styles:o,next:m}}},1287:(e,t,n)=>{"use strict";var r;n.d(t,{i:()=>l,s:()=>i});var o=n(6540),a=!!(r||(r=n.t(o,2))).useInsertionEffect&&(r||(r=n.t(o,2))).useInsertionEffect,i=a||function(e){return e()},l=a||o.useLayoutEffect},41:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):n&&(r+=n+" ")})),r}n.d(t,{Rk:()=>r,SF:()=>o,sk:()=>a});var o=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},a=function(e,t,n){o(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}},9520:(e,t,n)=>{"use strict";var r=n(4994);t.A=void 0;var o=r(n(2032)),a=n(4848);t.A=(0,o.default)((0,a.jsx)("path",{d:"M7 14H5v5h5v-2H7zm-2-4h2V7h3V5H5zm12 7h-3v2h5v-5h-2zM14 5v2h3v3h2V5z"}),"Fullscreen")},9483:(e,t,n)=>{"use strict";var r=n(4994);t.A=void 0;var o=r(n(2032)),a=n(4848);t.A=(0,o.default)((0,a.jsx)("path",{d:"M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6z"}),"KeyboardArrowDown")},9118:(e,t,n)=>{"use strict";var r=n(4994);t.A=void 0;var o=r(n(2032)),a=n(4848);t.A=(0,o.default)((0,a.jsx)("path",{d:"M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"}),"KeyboardArrowUp")},2032:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(4793)},3666:(e,t,n)=>{"use strict";n.d(t,{b:()=>l});var r=n(6540),o=n(8168);function a(e,t){const n=(0,o.A)({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=(0,o.A)({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const i=e[r]||{},l=t[r];n[r]={},l&&Object.keys(l)?i&&Object.keys(i)?(n[r]=(0,o.A)({},l),Object.keys(i).forEach((e=>{n[r][e]=a(i[e],l[e])}))):n[r]=l:n[r]=i}else void 0===n[r]&&(n[r]=e[r])})),n}n(4848);const i=r.createContext(void 0);function l(e){return function({props:e,name:t}){return function(e){const{theme:t,name:n,props:r}=e;if(!t||!t.components||!t.components[n])return r;const o=t.components[n];return o.defaultProps?a(o.defaultProps,r):o.styleOverrides||o.variants?r:a(o,r)}({props:e,name:t,theme:{components:r.useContext(i)}})}(e)}},3542:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},3494:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});const r=e=>e,o=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})()},9854:(e,t,n)=>{"use strict";function r(e,t,n=void 0){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>{if(r){const o=t(r);""!==o&&e.push(o),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}n.d(t,{A:()=>r})},8520:(e,t,n)=>{"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,{A:()=>r})},5048:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{A:()=>r})},9776:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>a});var r=n(3494);const o={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function a(e,t,n="Mui"){const a=o[t];return a?`${n}-${a}`:`${r.A.generate(e)}-${t}`}},7104:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(9776);function o(e,t,n="Mui"){const o={};return t.forEach((t=>{o[t]=(0,r.Ay)(e,t,n)})),o}},9904:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{A:()=>r})},5712:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(9904);function o(e){return(0,r.A)(e).defaultView||window}},6432:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{A:()=>r})},7976:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(6540);function o({controlled:e,default:t,name:n,state:o="value"}){const{current:a}=r.useRef(void 0!==e),[i,l]=r.useState(t);return[a?e:i,r.useCallback((e=>{a||l(e)}),[])]}},8148:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(6540);const o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect},5570:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(6540),o=n(6432);function a(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{(0,o.A)(e,t)}))}),e)}},5487:(e,t,n)=>{"use strict";n.d(t,{E:()=>i,A:()=>l});var r=n(6540);const o={},a=[];class i{constructor(){this.currentId=null,this.clear=()=>{null!==this.currentId&&(clearTimeout(this.currentId),this.currentId=null)},this.disposeEffect=()=>this.clear}static create(){return new i}start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=null,t()}),e)}}function l(){const e=function(e){const t=r.useRef(o);return t.current===o&&(t.current=e(void 0)),t}(i.create).current;var t;return t=e.disposeEffect,r.useEffect(t,a),e}},5314:(e,t,n)=>{"use strict";n.d(t,{A:()=>te});var r=n(8168),o=n(8587),a=n(5048);function i(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function l(e){if(!i(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=l(e[n])})),t}function u(e,t,n={clone:!0}){const o=n.clone?(0,r.A)({},e):e;return i(e)&&i(t)&&Object.keys(t).forEach((r=>{i(t[r])&&Object.prototype.hasOwnProperty.call(e,r)&&i(e[r])?o[r]=u(e[r],t[r],n):n.clone?o[r]=i(t[r])?l(t[r]):t[r]:o[r]=t[r]})),o}var c=n(4188),s=n(3571),d=n(8749),p=n(771);const f={black:"#000",white:"#fff"},m={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},h="#f3e5f5",v="#ce93d8",g="#ba68c8",y="#ab47bc",b="#9c27b0",A="#7b1fa2",x="#e57373",w="#ef5350",C="#f44336",S="#d32f2f",E="#c62828",k="#ffb74d",B="#ffa726",M="#ff9800",O="#f57c00",N="#e65100",T="#e3f2fd",j="#90caf9",_="#42a5f5",P="#1976d2",z="#1565c0",D="#4fc3f7",R="#29b6f6",L="#03a9f4",I="#0288d1",F="#01579b";var q=n(3542);const U=["mode","contrastThreshold","tonalOffset"],G={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:f.white,default:f.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},$={text:{primary:f.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:f.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function W(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,p.a)(e.main,o):"dark"===t&&(e.dark=(0,p.e$)(e.main,a)))}const Y=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],H={textTransform:"uppercase"},V='"Roboto", "Helvetica", "Arial", sans-serif';function Q(e,t){const n="function"==typeof t?t(e):t,{fontFamily:a=V,fontSize:i=14,fontWeightLight:l=300,fontWeightRegular:c=400,fontWeightMedium:s=500,fontWeightBold:d=700,htmlFontSize:p=16,allVariants:f,pxToRem:m}=n,h=(0,o.A)(n,Y),v=i/14,g=m||(e=>e/p*v+"rem"),y=(e,t,n,o,i)=>{return(0,r.A)({fontFamily:a,fontWeight:e,fontSize:g(t),lineHeight:n},a===V?{letterSpacing:(l=o/t,Math.round(1e5*l)/1e5+"em")}:{},i,f);var l},b={h1:y(l,96,1.167,-1.5),h2:y(l,60,1.2,-.5),h3:y(c,48,1.167,0),h4:y(c,34,1.235,.25),h5:y(c,24,1.334,0),h6:y(s,20,1.6,.15),subtitle1:y(c,16,1.75,.15),subtitle2:y(s,14,1.57,.1),body1:y(c,16,1.5,.15),body2:y(c,14,1.43,.15),button:y(s,14,1.75,.4,H),caption:y(c,12,1.66,.4),overline:y(c,12,2.66,1,H),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return u((0,r.A)({htmlFontSize:p,pxToRem:g,fontFamily:a,fontSize:i,fontWeightLight:l,fontWeightRegular:c,fontWeightMedium:s,fontWeightBold:d},b),h,{clone:!1})}function K(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Z=["none",K(0,2,1,-1,0,1,1,0,0,1,3,0),K(0,3,1,-2,0,2,2,0,0,1,5,0),K(0,3,3,-2,0,3,4,0,0,1,8,0),K(0,2,4,-1,0,4,5,0,0,1,10,0),K(0,3,5,-1,0,5,8,0,0,1,14,0),K(0,3,5,-1,0,6,10,0,0,1,18,0),K(0,4,5,-2,0,7,10,1,0,2,16,1),K(0,5,5,-3,0,8,10,1,0,3,14,2),K(0,5,6,-3,0,9,12,1,0,3,16,2),K(0,6,6,-3,0,10,14,1,0,4,18,3),K(0,6,7,-4,0,11,15,1,0,4,20,3),K(0,7,8,-4,0,12,17,2,0,5,22,4),K(0,7,8,-4,0,13,19,2,0,5,24,4),K(0,7,9,-4,0,14,21,2,0,5,26,4),K(0,8,9,-5,0,15,22,2,0,6,28,5),K(0,8,10,-5,0,16,24,2,0,6,30,5),K(0,8,11,-5,0,17,26,2,0,6,32,5),K(0,9,11,-5,0,18,28,2,0,7,34,6),K(0,9,12,-6,0,19,29,2,0,7,36,6),K(0,10,13,-6,0,20,31,3,0,8,38,7),K(0,10,13,-6,0,21,33,3,0,8,40,7),K(0,10,14,-6,0,22,35,3,0,8,42,7),K(0,11,14,-7,0,23,36,3,0,9,44,8),K(0,11,15,-7,0,24,38,3,0,9,46,8)];var X=n(7091);const J={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},ee=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const te=function(e={},...t){const{mixins:n={},palette:i={},transitions:l={},typography:Y={}}=e,H=(0,o.A)(e,ee);if(e.vars)throw new Error((0,a.A)(18));const V=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:i=.2}=e,l=(0,o.A)(e,U),c=e.primary||function(e="light"){return"dark"===e?{main:j,light:T,dark:_}:{main:P,light:_,dark:z}}(t),s=e.secondary||function(e="light"){return"dark"===e?{main:v,light:h,dark:y}:{main:b,light:g,dark:A}}(t),d=e.error||function(e="light"){return"dark"===e?{main:C,light:x,dark:S}:{main:S,light:w,dark:E}}(t),Y=e.info||function(e="light"){return"dark"===e?{main:R,light:D,dark:I}:{main:I,light:L,dark:F}}(t),H=e.success||function(e="light"){return"dark"===e?{main:q.A[400],light:q.A[300],dark:q.A[700]}:{main:q.A[800],light:q.A[500],dark:q.A[900]}}(t),V=e.warning||function(e="light"){return"dark"===e?{main:B,light:k,dark:O}:{main:"#ed6c02",light:M,dark:N}}(t);function Q(e){return(0,p.eM)(e,$.text.primary)>=n?$.text.primary:G.text.primary}const K=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:l=700})=>{if(!(e=(0,r.A)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,a.A)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,a.A)(12,t?` (${t})`:"",JSON.stringify(e.main)));return W(e,"light",o,i),W(e,"dark",l,i),e.contrastText||(e.contrastText=Q(e.main)),e},Z={dark:$,light:G};return u((0,r.A)({common:(0,r.A)({},f),mode:t,primary:K({color:c,name:"primary"}),secondary:K({color:s,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:K({color:d,name:"error"}),warning:K({color:V,name:"warning"}),info:K({color:Y,name:"info"}),success:K({color:H,name:"success"}),grey:m,contrastThreshold:n,getContrastText:Q,augmentColor:K,tonalOffset:i},Z[t]),l)}(i),K=(0,d.A)(e);let te=u(K,{mixins:(ne=K.breakpoints,re=n,(0,r.A)({toolbar:{minHeight:56,[ne.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[ne.up("sm")]:{minHeight:64}}},re)),palette:V,shadows:Z.slice(),typography:Q(V,Y),transitions:(0,X.Ay)(l),zIndex:(0,r.A)({},J)});var ne,re;return te=u(te,H),te=t.reduce(((e,t)=>u(e,t)),te),te.unstable_sxConfig=(0,r.A)({},c.A,null==H?void 0:H.unstable_sxConfig),te.unstable_sx=function(e){return(0,s.A)({sx:e,theme:this})},te}},7091:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>s,p0:()=>l});var r=n(8587),o=n(8168);const a=["duration","easing","delay"],i={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},l={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function u(e){return`${Math.round(e)}ms`}function c(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function s(e){const t=(0,o.A)({},i,e.easing),n=(0,o.A)({},l,e.duration);return(0,o.A)({getAutoHeightDuration:c,create:(e=["all"],o={})=>{const{duration:i=n.standard,easing:l=t.easeInOut,delay:c=0}=o;return(0,r.A)(o,a),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof i?i:u(i)} ${l} ${"string"==typeof c?c:u(c)}`)).join(",")}},e,{easing:t,duration:n})}},2765:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=(0,n(5314).A)()},8312:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r="$$material"},3431:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=e=>function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}(e)&&"classes"!==e},1848:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>l});var r=n(6461),o=n(2765),a=n(8312),i=n(3431);const l=(0,r.Ay)({themeId:a.A,defaultTheme:o.A,rootShouldForwardProp:i.A})},3991:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(5048);const o=function(e){if("string"!=typeof e)throw new Error((0,r.A)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},5003:(e,t,n)=>{"use strict";n.d(t,{A:()=>b});var r=n(8168),o=n(6540),a=n(8587),i=n(4164),l=n(9854),u=n(3991),c=n(3666),s=n(1848),d=n(7104),p=n(9776);function f(e){return(0,p.Ay)("MuiSvgIcon",e)}(0,d.A)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var m=n(4848);const h=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],v=(0,s.Ay)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${(0,u.A)(n.color)}`],t[`fontSize${(0,u.A)(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,o,a,i,l,u,c,s,d,p,f,m;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(o=e.transitions)||null==(o=o.duration)?void 0:o.shorter}),fontSize:{inherit:"inherit",small:(null==(a=e.typography)||null==(i=a.pxToRem)?void 0:i.call(a,20))||"1.25rem",medium:(null==(l=e.typography)||null==(u=l.pxToRem)?void 0:u.call(l,24))||"1.5rem",large:(null==(c=e.typography)||null==(s=c.pxToRem)?void 0:s.call(c,35))||"2.1875rem"}[t.fontSize],color:null!=(d=null==(p=(e.vars||e).palette)||null==(p=p[t.color])?void 0:p.main)?d:{action:null==(f=(e.vars||e).palette)||null==(f=f.action)?void 0:f.active,disabled:null==(m=(e.vars||e).palette)||null==(m=m.action)?void 0:m.disabled,inherit:void 0}[t.color]}})),g=o.forwardRef((function(e,t){const n=(0,c.b)({props:e,name:"MuiSvgIcon"}),{children:s,className:d,color:p="inherit",component:g="svg",fontSize:y="medium",htmlColor:b,inheritViewBox:A=!1,titleAccess:x,viewBox:w="0 0 24 24"}=n,C=(0,a.A)(n,h),S=o.isValidElement(s)&&"svg"===s.type,E=(0,r.A)({},n,{color:p,component:g,fontSize:y,instanceFontSize:e.fontSize,inheritViewBox:A,viewBox:w,hasSvgAsChild:S}),k={};A||(k.viewBox=w);const B=(e=>{const{color:t,fontSize:n,classes:r}=e,o={root:["root","inherit"!==t&&`color${(0,u.A)(t)}`,`fontSize${(0,u.A)(n)}`]};return(0,l.A)(o,f,r)})(E);return(0,m.jsxs)(v,(0,r.A)({as:g,className:(0,i.A)(B.root,d),focusable:"false",color:b,"aria-hidden":!x||void 0,role:x?"img":void 0,ref:t},k,C,S&&s.props,{ownerState:E,children:[S?s.props.children:s,x?(0,m.jsx)("title",{children:x}):null]}))}));g.muiName="SvgIcon";const y=g;function b(e,t){function n(n,o){return(0,m.jsx)(y,(0,r.A)({"data-testid":`${t}Icon`,ref:o},n,{children:e}))}return n.muiName=y.muiName,o.memo(o.forwardRef(n))}},4793:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>o.A,createChainedFunction:()=>a,createSvgIcon:()=>i.A,debounce:()=>l,deprecatedPropType:()=>u,isMuiElement:()=>d,ownerDocument:()=>p,ownerWindow:()=>f,requirePropFactory:()=>m,setRef:()=>h,unstable_ClassNameGenerator:()=>E,unstable_useEnhancedEffect:()=>v.A,unstable_useId:()=>b,unsupportedProp:()=>A,useControlled:()=>x,useEventCallback:()=>w.A,useForkRef:()=>C.A,useIsFocusVisible:()=>S.A});var r=n(3494),o=n(3991);const a=function(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))};var i=n(5003);const l=n(8520).A,u=function(e,t){return()=>null};var c=n(6540),s=n.t(c,2);const d=function(e,t){var n,r;return c.isValidElement(e)&&-1!==t.indexOf(null!=(n=e.type.muiName)?n:null==(r=e.type)||null==(r=r._payload)||null==(r=r.value)?void 0:r.muiName)},p=n(9904).A,f=n(5712).A;n(8168);const m=function(e,t){return()=>null},h=n(6432).A;var v=n(2778);let g=0;const y=s["useId".toString()],b=function(e){if(void 0!==y){const t=y();return null!=e?e:t}return function(e){const[t,n]=c.useState(e),r=e||t;return c.useEffect((()=>{null==t&&(g+=1,n(`mui-${g}`))}),[t]),r}(e)},A=function(e,t,n,r,o){return null},x=n(7976).A;var w=n(6205),C=n(6852),S=n(7992);const E={configure:e=>{r.A.configure(e)}}},2778:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=n(8148).A},6205:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(6540),o=n(8148);const a=function(e){const t=r.useRef(e);return(0,o.A)((()=>{t.current=e})),r.useRef(((...e)=>(0,t.current)(...e))).current}},6852:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=n(5570).A},7992:(e,t,n)=>{"use strict";n.d(t,{A:()=>p});var r=n(6540),o=n(5487);let a=!0,i=!1;const l=new o.E,u={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function c(e){e.metaKey||e.altKey||e.ctrlKey||(a=!0)}function s(){a=!1}function d(){"hidden"===this.visibilityState&&i&&(a=!0)}const p=function(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",c,!0),t.addEventListener("mousedown",s,!0),t.addEventListener("pointerdown",s,!0),t.addEventListener("touchstart",s,!0),t.addEventListener("visibilitychange",d,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return a||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!u[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(i=!0,l.start(100,(()=>{i=!1})),t.current=!1,!0)},ref:e}}},9940:(e,t,n)=>{"use strict";n.d(t,{A:()=>a}),n(6540);var r=n(7437),o=n(4848);function a(e){const{styles:t,defaultTheme:n={}}=e,a="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,o.jsx)(r.mL,{styles:a})}},2532:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GlobalStyles:()=>C.A,StyledEngineProvider:()=>w,ThemeContext:()=>u.T,css:()=>y.AH,default:()=>S,internal_processStyles:()=>E,keyframes:()=>y.i7});var r=n(8168),o=n(6540),a=n(6289),i=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,l=(0,a.A)((function(e){return i.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),u=n(9214),c=n(41),s=n(3174),d=n(1287),p=l,f=function(e){return"theme"!==e},m=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?p:f},h=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},v=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,c.SF)(t,n,r),(0,d.s)((function(){return(0,c.sk)(t,n,r)})),null},g=function e(t,n){var a,i,l=t.__emotion_real===t,d=l&&t.__emotion_base||t;void 0!==n&&(a=n.label,i=n.target);var p=h(t,n,l),f=p||m(d),g=!f("as");return function(){var y=arguments,b=l&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==a&&b.push("label:"+a+";"),null==y[0]||void 0===y[0].raw)b.push.apply(b,y);else{b.push(y[0][0]);for(var A=y.length,x=1;x<A;x++)b.push(y[x],y[0][x])}var w=(0,u.w)((function(e,t,n){var r=g&&e.as||d,a="",l=[],h=e;if(null==e.theme){for(var y in h={},e)h[y]=e[y];h.theme=o.useContext(u.T)}"string"==typeof e.className?a=(0,c.Rk)(t.registered,l,e.className):null!=e.className&&(a=e.className+" ");var A=(0,s.J)(b.concat(l),t.registered,h);a+=t.key+"-"+A.name,void 0!==i&&(a+=" "+i);var x=g&&void 0===p?m(r):f,w={};for(var C in e)g&&"as"===C||x(C)&&(w[C]=e[C]);return w.className=a,n&&(w.ref=n),o.createElement(o.Fragment,null,o.createElement(v,{cache:t,serialized:A,isStringTag:"string"==typeof r}),o.createElement(r,w))}));return w.displayName=void 0!==a?a:"Styled("+("string"==typeof d?d:d.displayName||d.name||"Component")+")",w.defaultProps=t.defaultProps,w.__emotion_real=w,w.__emotion_base=d,w.__emotion_styles=b,w.__emotion_forwardProp=p,Object.defineProperty(w,"toString",{value:function(){return"."+i}}),w.withComponent=function(t,o){return e(t,(0,r.A)({},n,o,{shouldForwardProp:h(w,o,!0)})).apply(void 0,b)},w}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){g[e]=g(e)}));var y=n(7437),b=n(5655),A=n(4848);let x;function w(e){const{injectFirst:t,children:n}=e;return t&&x?(0,A.jsx)(u.C,{value:x,children:n}):n}"object"==typeof document&&(x=(0,b.A)({key:"css",prepend:!0}));var C=n(9940);function S(e,t){return g(e,t)}const E=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},771:(e,t,n)=>{"use strict";var r=n(4994);t.X4=function(e,t){return e=l(e),t=i(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,u(e)},t.e$=s,t.eM=function(e,t){const n=c(e),r=c(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.a=d;var o=r(n(2513)),a=r(n(6408));function i(e,t=0,n=1){return(0,a.default)(e,t,n)}function l(e){if(e.type)return e;if("#"===e.charAt(0))return l(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,o.default)(9,e));let r,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),r=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error((0,o.default)(10,r))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:r}}function u(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function c(e){let t="hsl"===(e=l(e)).type||"hsla"===e.type?l(function(e){e=l(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let c="rgb";const s=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(c+="a",s.push(t[3])),u({type:c,values:s})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function s(e,t){if(e=l(e),t=i(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return u(e)}function d(e,t){if(e=l(e),t=i(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return u(e)}},6461:(e,t,n)=>{"use strict";var r=n(4994);t.Ay=function(e={}){const{themeId:t,defaultTheme:n=h,rootShouldForwardProp:r=m,slotShouldForwardProp:u=m}=e,s=e=>(0,c.default)((0,o.default)({},e,{theme:g((0,o.default)({},e,{defaultTheme:n,themeId:t}))}));return s.__mui_systemSx=!0,(e,c={})=>{(0,i.internal_processStyles)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:d,slot:f,skipVariantsResolver:h,skipSx:A,overridesResolver:x=y(v(f))}=c,w=(0,a.default)(c,p),C=void 0!==h?h:f&&"Root"!==f&&"root"!==f||!1,S=A||!1;let E=m;"Root"===f||"root"===f?E=r:f?E=u:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(E=void 0);const k=(0,i.default)(e,(0,o.default)({shouldForwardProp:E,label:void 0},w)),B=e=>"function"==typeof e&&e.__emotion_real!==e||(0,l.isPlainObject)(e)?r=>b(e,(0,o.default)({},r,{theme:g({theme:r.theme,defaultTheme:n,themeId:t})})):e,M=(r,...a)=>{let i=B(r);const l=a?a.map(B):[];d&&x&&l.push((e=>{const r=g((0,o.default)({},e,{defaultTheme:n,themeId:t}));if(!r.components||!r.components[d]||!r.components[d].styleOverrides)return null;const a=r.components[d].styleOverrides,i={};return Object.entries(a).forEach((([t,n])=>{i[t]=b(n,(0,o.default)({},e,{theme:r}))})),x(e,i)})),d&&!C&&l.push((e=>{var r;const a=g((0,o.default)({},e,{defaultTheme:n,themeId:t}));return b({variants:null==a||null==(r=a.components)||null==(r=r[d])?void 0:r.variants},(0,o.default)({},e,{theme:a}))})),S||l.push(s);const u=l.length-a.length;if(Array.isArray(r)&&u>0){const e=new Array(u).fill("");i=[...r,...e],i.raw=[...r.raw,...e]}const c=k(i,...l);return e.muiName&&(c.muiName=e.muiName),c};return k.withConfig&&(M.withConfig=k.withConfig),M}};var o=r(n(4634)),a=r(n(4893)),i=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=f(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if("default"!==a&&Object.prototype.hasOwnProperty.call(e,a)){var i=o?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=e[a]}return r.default=e,n&&n.set(e,r),r}(n(2532)),l=n(1650),u=(r(n(2566)),r(n(2097)),r(n(3142))),c=r(n(3857));const s=["ownerState"],d=["variants"],p=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function f(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(f=function(e){return e?n:t})(e)}function m(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const h=(0,u.default)(),v=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function g({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function y(e){return e?(t,n)=>n[e]:null}function b(e,t){let{ownerState:n}=t,r=(0,a.default)(t,s);const i="function"==typeof e?e((0,o.default)({ownerState:n},r)):e;if(Array.isArray(i))return i.flatMap((e=>b(e,(0,o.default)({ownerState:n},r))));if(i&&"object"==typeof i&&Array.isArray(i.variants)){const{variants:e=[]}=i;let t=(0,a.default)(i,d);return e.forEach((e=>{let a=!0;"function"==typeof e.props?a=e.props((0,o.default)({ownerState:n},r,n)):Object.keys(e.props).forEach((t=>{(null==n?void 0:n[t])!==e.props[t]&&r[t]!==e.props[t]&&(a=!1)})),a&&(Array.isArray(t)||(t=[t]),t.push("function"==typeof e.style?e.style((0,o.default)({ownerState:n},r,n)):e.style))})),t}return i}},9452:(e,t,n)=>{"use strict";n.d(t,{EU:()=>i,NI:()=>a,vf:()=>l,zu:()=>r});const r={xs:0,sm:600,md:900,lg:1200,xl:1536},o={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${r[e]}px)`};function a(e,t,n){const a=e.theme||{};if(Array.isArray(t)){const e=a.breakpoints||o;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=a.breakpoints||o;return Object.keys(t).reduce(((o,a)=>{if(-1!==Object.keys(e.values||r).indexOf(a))o[e.up(a)]=n(t[a],a);else{const e=a;o[e]=t[e]}return o}),{})}return n(t)}function i(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function l(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}},8336:(e,t,n)=>{"use strict";function r(e,t){const n=this;if(n.vars&&"function"==typeof n.getColorSchemeSelector){const r=n.getColorSchemeSelector(e).replace(/(\[[^\]]+\])/,"*:where($1)");return{[r]:t}}return n.palette.mode===e?t:{}}n.d(t,{A:()=>r})},8094:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(8587),o=n(8168);const a=["values","unit","step"],i=e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,o.A)({},e,{[t.key]:t.val})),{})};function l(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:l=5}=e,u=(0,r.A)(e,a),c=i(t),s=Object.keys(c);function d(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function p(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-l/100}${n})`}function f(e,r){const o=s.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[s[o]]?t[s[o]]:r)-l/100}${n})`}return(0,o.A)({keys:s,values:c,up:d,down:p,between:f,only:function(e){return s.indexOf(e)+1<s.length?f(e,s[s.indexOf(e)+1]):d(e)},not:function(e){const t=s.indexOf(e);return 0===t?d(s[1]):t===s.length-1?p(s[t]):f(e,s[s.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},u)}},8749:(e,t,n)=>{"use strict";n.d(t,{A:()=>f});var r=n(8168),o=n(8587),a=n(7900),i=n(8094);const l={borderRadius:4};var u=n(8248),c=n(3571),s=n(4188),d=n(8336);const p=["breakpoints","palette","spacing","shape"],f=function(e={},...t){const{breakpoints:n={},palette:f={},spacing:m,shape:h={}}=e,v=(0,o.A)(e,p),g=(0,i.A)(n),y=function(e=8){if(e.mui)return e;const t=(0,u.LX)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(m);let b=(0,a.A)({breakpoints:g,direction:"ltr",components:{},palette:(0,r.A)({mode:"light"},f),spacing:y,shape:(0,r.A)({},l,h)},v);return b.applyStyles=d.A,b=t.reduce(((e,t)=>(0,a.A)(e,t)),b),b.unstable_sxConfig=(0,r.A)({},s.A,null==v?void 0:v.unstable_sxConfig),b.unstable_sx=function(e){return(0,c.A)({sx:e,theme:this})},b}},3142:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A,private_createBreakpoints:()=>o.A,unstable_applyStyles:()=>a.A});var r=n(8749),o=n(8094),a=n(8336)},4620:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(7900);const o=function(e,t){return t?(0,r.A)(e,t,{clone:!1}):e}},8248:(e,t,n)=>{"use strict";n.d(t,{LX:()=>m,MA:()=>f,_W:()=>h,Lc:()=>g,Ms:()=>y});var r=n(9452),o=n(6481),a=n(4620);const i={m:"margin",p:"padding"},l={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},u={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},c=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!u[e])return[e];e=u[e]}const[t,n]=e.split(""),r=i[t],o=l[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(t)),e[t])}(),s=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],d=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],p=[...s,...d];function f(e,t,n,r){var a;const i=null!=(a=(0,o.Yn)(e,t,!1))?a:n;return"number"==typeof i?e=>"string"==typeof e?e:i*e:Array.isArray(i)?e=>"string"==typeof e?e:i[e]:"function"==typeof i?i:()=>{}}function m(e){return f(e,"spacing",8)}function h(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function v(e,t){const n=m(e.theme);return Object.keys(e).map((o=>function(e,t,n,o){if(-1===t.indexOf(n))return null;const a=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=h(t,n),e)),{})}(c(n),o),i=e[n];return(0,r.NI)(e,i,a)}(e,t,o,n))).reduce(a.A,{})}function g(e){return v(e,s)}function y(e){return v(e,d)}function b(e){return v(e,p)}g.propTypes={},g.filterProps=s,y.propTypes={},y.filterProps=d,b.propTypes={},b.filterProps=p},6481:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>l,BO:()=>i,Yn:()=>a});var r=n(3366),o=n(9452);function a(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function i(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:a(e,n)||r,t&&(o=t(o,r,e)),o}const l=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:l,transform:u}=e,c=e=>{if(null==e[t])return null;const c=e[t],s=a(e.theme,l)||{};return(0,o.NI)(e,c,(e=>{let o=i(s,u,e);return e===o&&"string"==typeof e&&(o=i(s,u,`${t}${"default"===e?"":(0,r.A)(e)}`,e)),!1===n?o:{[n]:o}}))};return c.propTypes={},c.filterProps=[t],c}},4188:(e,t,n)=>{"use strict";n.d(t,{A:()=>P});var r=n(8248),o=n(6481),a=n(4620);const i=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,a.A)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var l=n(9452);function u(e){return"number"!=typeof e?e:`${e}px solid`}function c(e,t){return(0,o.Ay)({prop:e,themeKey:"borders",transform:t})}const s=c("border",u),d=c("borderTop",u),p=c("borderRight",u),f=c("borderBottom",u),m=c("borderLeft",u),h=c("borderColor"),v=c("borderTopColor"),g=c("borderRightColor"),y=c("borderBottomColor"),b=c("borderLeftColor"),A=c("outline",u),x=c("outlineColor"),w=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.MA)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r._W)(t,e)});return(0,l.NI)(e,e.borderRadius,n)}return null};w.propTypes={},w.filterProps=["borderRadius"],i(s,d,p,f,m,h,v,g,y,b,w,A,x);const C=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.MA)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r._W)(t,e)});return(0,l.NI)(e,e.gap,n)}return null};C.propTypes={},C.filterProps=["gap"];const S=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.MA)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r._W)(t,e)});return(0,l.NI)(e,e.columnGap,n)}return null};S.propTypes={},S.filterProps=["columnGap"];const E=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.MA)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r._W)(t,e)});return(0,l.NI)(e,e.rowGap,n)}return null};function k(e,t){return"grey"===t?t:e}function B(e){return e<=1&&0!==e?100*e+"%":e}E.propTypes={},E.filterProps=["rowGap"],i(C,S,E,(0,o.Ay)({prop:"gridColumn"}),(0,o.Ay)({prop:"gridRow"}),(0,o.Ay)({prop:"gridAutoFlow"}),(0,o.Ay)({prop:"gridAutoColumns"}),(0,o.Ay)({prop:"gridAutoRows"}),(0,o.Ay)({prop:"gridTemplateColumns"}),(0,o.Ay)({prop:"gridTemplateRows"}),(0,o.Ay)({prop:"gridTemplateAreas"}),(0,o.Ay)({prop:"gridArea"})),i((0,o.Ay)({prop:"color",themeKey:"palette",transform:k}),(0,o.Ay)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:k}),(0,o.Ay)({prop:"backgroundColor",themeKey:"palette",transform:k}));const M=(0,o.Ay)({prop:"width",transform:B}),O=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const o=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||l.zu[t];return o?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${o}${e.theme.breakpoints.unit}`}:{maxWidth:o}:{maxWidth:B(t)}};return(0,l.NI)(e,e.maxWidth,t)}return null};O.filterProps=["maxWidth"];const N=(0,o.Ay)({prop:"minWidth",transform:B}),T=(0,o.Ay)({prop:"height",transform:B}),j=(0,o.Ay)({prop:"maxHeight",transform:B}),_=(0,o.Ay)({prop:"minHeight",transform:B}),P=((0,o.Ay)({prop:"size",cssProperty:"width",transform:B}),(0,o.Ay)({prop:"size",cssProperty:"height",transform:B}),i(M,O,N,T,j,_,(0,o.Ay)({prop:"boxSizing"})),{border:{themeKey:"borders",transform:u},borderTop:{themeKey:"borders",transform:u},borderRight:{themeKey:"borders",transform:u},borderBottom:{themeKey:"borders",transform:u},borderLeft:{themeKey:"borders",transform:u},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:u},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:w},color:{themeKey:"palette",transform:k},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:k},backgroundColor:{themeKey:"palette",transform:k},p:{style:r.Ms},pt:{style:r.Ms},pr:{style:r.Ms},pb:{style:r.Ms},pl:{style:r.Ms},px:{style:r.Ms},py:{style:r.Ms},padding:{style:r.Ms},paddingTop:{style:r.Ms},paddingRight:{style:r.Ms},paddingBottom:{style:r.Ms},paddingLeft:{style:r.Ms},paddingX:{style:r.Ms},paddingY:{style:r.Ms},paddingInline:{style:r.Ms},paddingInlineStart:{style:r.Ms},paddingInlineEnd:{style:r.Ms},paddingBlock:{style:r.Ms},paddingBlockStart:{style:r.Ms},paddingBlockEnd:{style:r.Ms},m:{style:r.Lc},mt:{style:r.Lc},mr:{style:r.Lc},mb:{style:r.Lc},ml:{style:r.Lc},mx:{style:r.Lc},my:{style:r.Lc},margin:{style:r.Lc},marginTop:{style:r.Lc},marginRight:{style:r.Lc},marginBottom:{style:r.Lc},marginLeft:{style:r.Lc},marginX:{style:r.Lc},marginY:{style:r.Lc},marginInline:{style:r.Lc},marginInlineStart:{style:r.Lc},marginInlineEnd:{style:r.Lc},marginBlock:{style:r.Lc},marginBlockStart:{style:r.Lc},marginBlockEnd:{style:r.Lc},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:C},rowGap:{style:E},columnGap:{style:S},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:B},maxWidth:{style:O},minWidth:{transform:B},height:{transform:B},maxHeight:{transform:B},minHeight:{transform:B},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}})},9599:(e,t,n)=>{"use strict";n.d(t,{A:()=>c});var r=n(8168),o=n(8587),a=n(7900),i=n(4188);const l=["sx"],u=e=>{var t,n;const r={systemProps:{},otherProps:{}},o=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:i.A;return Object.keys(e).forEach((t=>{o[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r};function c(e){const{sx:t}=e,n=(0,o.A)(e,l),{systemProps:i,otherProps:c}=u(n);let s;return s=Array.isArray(t)?[i,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,a.Q)(n)?(0,r.A)({},i,n):i}:(0,r.A)({},i,t),(0,r.A)({},c,{sx:s})}},3857:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A,extendSxProp:()=>o.A,unstable_createStyleFunctionSx:()=>r.k,unstable_defaultSxConfig:()=>a.A});var r=n(3571),o=n(9599),a=n(4188)},3571:(e,t,n)=>{"use strict";n.d(t,{A:()=>s,k:()=>u});var r=n(3366),o=n(4620),a=n(6481),i=n(9452),l=n(4188);function u(){function e(e,t,n,o){const l={[e]:t,theme:n},u=o[e];if(!u)return{[e]:t};const{cssProperty:c=e,themeKey:s,transform:d,style:p}=u;if(null==t)return null;if("typography"===s&&"inherit"===t)return{[e]:t};const f=(0,a.Yn)(n,s)||{};return p?p(l):(0,i.NI)(l,t,(t=>{let n=(0,a.BO)(f,d,t);return t===n&&"string"==typeof t&&(n=(0,a.BO)(f,d,`${e}${"default"===t?"":(0,r.A)(t)}`,t)),!1===c?n:{[c]:n}}))}return function t(n){var r;const{sx:a,theme:u={}}=n||{};if(!a)return null;const c=null!=(r=u.unstable_sxConfig)?r:l.A;function s(n){let r=n;if("function"==typeof n)r=n(u);else if("object"!=typeof n)return n;if(!r)return null;const a=(0,i.EU)(u.breakpoints),l=Object.keys(a);let s=a;return Object.keys(r).forEach((n=>{const a="function"==typeof(l=r[n])?l(u):l;var l;if(null!=a)if("object"==typeof a)if(c[n])s=(0,o.A)(s,e(n,a,u,c));else{const e=(0,i.NI)({theme:u},a,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,a)?s=(0,o.A)(s,e):s[n]=t({sx:a,theme:u})}else s=(0,o.A)(s,e(n,a,u,c))})),(0,i.vf)(l,s)}return Array.isArray(a)?a.map(s):s(a)}}const c=u();c.filterProps=["sx"];const s=c},3366:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(644);function o(e){if("string"!=typeof e)throw new Error((0,r.A)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},2566:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A});var r=n(3366)},6408:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r=function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}},7900:(e,t,n)=>{"use strict";n.d(t,{A:()=>i,Q:()=>o});var r=n(8168);function o(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function a(e){if(!o(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=a(e[n])})),t}function i(e,t,n={clone:!0}){const l=n.clone?(0,r.A)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach((r=>{o(t[r])&&Object.prototype.hasOwnProperty.call(e,r)&&o(e[r])?l[r]=i(e[r],t[r],n):n.clone?l[r]=o(t[r])?a(t[r]):t[r]:l[r]=t[r]})),l}},1650:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A,isPlainObject:()=>r.Q});var r=n(7900)},644:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{A:()=>r})},2513:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A});var r=n(644)},2097:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u,getFunctionName:()=>a});var r=n(4363);const o=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function a(e){const t=`${e}`.match(o);return t&&t[1]||""}function i(e,t=""){return e.displayName||e.name||a(e)||t}function l(e,t,n){const r=i(t);return e.displayName||(""!==r?`${n}(${r})`:n)}function u(e){if(null!=e){if("string"==typeof e)return e;if("function"==typeof e)return i(e,"Component");if("object"==typeof e)switch(e.$$typeof){case r.ForwardRef:return l(e,e.render,"ForwardRef");case r.Memo:return l(e,e.type,"memo");default:return}}}},386:(e,t,n)=>{"use strict";n.d(t,{A:()=>p});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a),l=n(4417),u=n.n(l),c=new URL(n(3003),n.b),s=i()(o()),d=u()(c);s.push([e.id,`.hrGenre{padding-top:10px;width:1300px;margin:auto;border-bottom:1px solid #f6b17a}.average{color:transparent;display:none}.detailMain,.movieMain,.movieMain2{margin:auto;width:1300px;padding:30px 30px 5px 30px;background-color:#323769}.detailMain .detailMov,.movieMain .detailMov,.movieMain2 .detailMov{display:flex}.detailMain .detailMov .cover,.movieMain .detailMov .cover,.movieMain2 .detailMov .cover{position:relative;cursor:pointer}.detailMain .detailMov .cover .dropImg,.movieMain .detailMov .cover .dropImg,.movieMain2 .detailMov .cover .dropImg{display:none;position:absolute;top:0px;min-width:500px;z-index:1}.detailMain .detailMov .cover:hover .dropImg,.movieMain .detailMov .cover:hover .dropImg,.movieMain2 .detailMov .cover:hover .dropImg{display:block}.detailMain .detailMov .movieTitle,.movieMain .detailMov .movieTitle,.movieMain2 .detailMov .movieTitle{text-align:center;font-size:28px;font-weight:600;padding:20px;color:#dee2ff}.detailMain .detailMov .divGenre,.movieMain .detailMov .divGenre,.movieMain2 .detailMov .divGenre{display:block}.detailMain .detailMov .divGenre .genres,.movieMain .detailMov .divGenre .genres,.movieMain2 .detailMov .divGenre .genres{display:flex;padding:10px 30px;width:760px;overflow:hidden}.detailMain .detailMov .divGenre .genres p,.movieMain .detailMov .divGenre .genres p,.movieMain2 .detailMov .divGenre .genres p{margin:0px;color:#f5f5f5;font-size:20px;padding:5px}.detailMain .detailMov .divGenre .genres span,.movieMain .detailMov .divGenre .genres span,.movieMain2 .detailMov .divGenre .genres span{margin:0px;padding:5px 5px 5px 120px;font-size:20px;color:#f5f5f5;width:300px;vertical-align:bottom}.detailMain .detailMov .description,.detailMain .detailMov .review,.movieMain .detailMov .description,.movieMain .detailMov .review,.movieMain2 .detailMov .description,.movieMain2 .detailMov .review{font-size:22px;padding:30px;color:#f5f5f5;width:760px;text-align:justify}.detailMain .detailMov .review,.movieMain .detailMov .review,.movieMain2 .detailMov .review{padding:10px 30px;margin:0px}.detailMain .detailMov .review .moreLink,.movieMain .detailMov .review .moreLink,.movieMain2 .detailMov .review .moreLink{color:#f6b17a;cursor:pointer}.detailMain .detailMov .review .moreLink:hover,.movieMain .detailMov .review .moreLink:hover,.movieMain2 .detailMov .review .moreLink:hover{color:#ffd2ae}.detailMain .detailMov .review a,.movieMain .detailMov .review a,.movieMain2 .detailMov .review a{color:#42d3e7}.detailMain .detailMov .writer,.detailMain .detailMov .writer2,.detailMain .detailMov .goofs,.movieMain .detailMov .writer,.movieMain .detailMov .writer2,.movieMain .detailMov .goofs,.movieMain2 .detailMov .writer,.movieMain2 .detailMov .writer2,.movieMain2 .detailMov .goofs{padding:5px 30px 5px 30px;width:760px;font-size:20px;margin:0px}.detailMain .detailMov .writer2,.movieMain .detailMov .writer2,.movieMain2 .detailMov .writer2{text-align:right;font-size:16px}.detailMain .detailMov .office,.movieMain .detailMov .office,.movieMain2 .detailMov .office{padding:5px 10px 5px 30px;background-color:#2D3250;font-size:21px;border-radius:5px;width:230px;color:#ffd2ae}.detailMain .detailMov .goofs,.movieMain .detailMov .goofs,.movieMain2 .detailMov .goofs{font-size:17px;text-align:justify}.detailMain .detailMov .goofs a,.movieMain .detailMov .goofs a,.movieMain2 .detailMov .goofs a{color:#42d3e7}.detailMain .detailMov .casting,.movieMain .detailMov .casting,.movieMain2 .detailMov .casting{display:flex;flex-direction:row;padding-left:30px;width:760px;font-size:20px}.detailMain .detailMov .casting img,.movieMain .detailMov .casting img,.movieMain2 .detailMov .casting img{margin:10px;border-radius:7px;box-shadow:0px 0px 6px 3px #7077A1}.detailMain .detailMov .casting p,.movieMain .detailMov .casting p,.movieMain2 .detailMov .casting p{margin:0px;padding:20px;color:#f5f5f5}.detailMain .detailMov .casting .actorName,.movieMain .detailMov .casting .actorName,.movieMain2 .detailMov .casting .actorName{color:#f6b17a;cursor:pointer;font-weight:500;font-size:20px}.detailMain .detailMov .casting .actorName:hover,.movieMain .detailMov .casting .actorName:hover,.movieMain2 .detailMov .casting .actorName:hover{color:#ffd2ae}.detailMain .detailMov .sugestion,.movieMain .detailMov .sugestion,.movieMain2 .detailMov .sugestion{display:flex;flex-direction:row}.detailMain .detailMov .sugestion .screen,.movieMain .detailMov .sugestion .screen,.movieMain2 .detailMov .sugestion .screen{padding:10px 20px}.detailMain .detailMov .sugestion .screen .morePic,.movieMain .detailMov .sugestion .screen .morePic,.movieMain2 .detailMov .sugestion .screen .morePic{font-weight:500;color:#f6b17a;font-size:18px;cursor:pointer}.detailMain .detailMov .sugestion .screen .morePic:hover,.movieMain .detailMov .sugestion .screen .morePic:hover,.movieMain2 .detailMov .sugestion .screen .morePic:hover{color:#ffd2ae}.detailMain .detailMov .sugestion .screen p,.movieMain .detailMov .sugestion .screen p,.movieMain2 .detailMov .sugestion .screen p{color:#f5f5f5}.detailMain .detailMov .sugestion .screen .image,.movieMain .detailMov .sugestion .screen .image,.movieMain2 .detailMov .sugestion .screen .image{border-radius:8px}.detailMain .detailMov .sugestion .screen .imgMedium,.movieMain .detailMov .sugestion .screen .imgMedium,.movieMain2 .detailMov .sugestion .screen .imgMedium{width:310px}.detailMain .detailMov .sugestion .screen .screenImg,.movieMain .detailMov .sugestion .screen .screenImg,.movieMain2 .detailMov .sugestion .screen .screenImg{margin-top:10px;position:relative;cursor:pointer}.detailMain .detailMov .sugestion .screen .screenImg .fullScreen,.movieMain .detailMov .sugestion .screen .screenImg .fullScreen,.movieMain2 .detailMov .sugestion .screen .screenImg .fullScreen{position:absolute;left:280px;top:-43px;background-color:rgba(129,161,225,0.455);border-radius:3px}.detailMain .detailMov .sugestion .screen .screenImg .dropScreen,.movieMain .detailMov .sugestion .screen .screenImg .dropScreen,.movieMain2 .detailMov .sugestion .screen .screenImg .dropScreen{display:none;position:absolute;min-width:1280px;top:-10px;left:-540px;border:1px solid #f6b17a;border-radius:10px;z-index:1}.detailMain .detailMov .sugestion .screen .screenImg:hover .dropScreen,.movieMain .detailMov .sugestion .screen .screenImg:hover .dropScreen,.movieMain2 .detailMov .sugestion .screen .screenImg:hover .dropScreen{display:block}.detailMain .detailMov .sugestion .torrent,.movieMain .detailMov .sugestion .torrent,.movieMain2 .detailMov .sugestion .torrent{margin:10px 20px;font-size:15px;width:350px;background-color:#2D3250;color:#f5f5f5;border-collapse:collapse;border-radius:8px}.detailMain .detailMov .sugestion .torrent td,.movieMain .detailMov .sugestion .torrent td,.movieMain2 .detailMov .sugestion .torrent td{text-align:center;padding:5px 10px}.detailMain .detailMov .sugestion .torrent a,.detailMain .detailMov .sugestion .torrent .pictureButt,.movieMain .detailMov .sugestion .torrent a,.movieMain .detailMov .sugestion .torrent .pictureButt,.movieMain2 .detailMov .sugestion .torrent a,.movieMain2 .detailMov .sugestion .torrent .pictureButt{text-decoration:none;cursor:pointer;padding:10px 20px;color:#f5f5f5;background-color:#009966;border-radius:8px;text-align:center}.detailMain .detailMov .sugestion .torrent a:hover,.detailMain .detailMov .sugestion .torrent .pictureButt:hover,.movieMain .detailMov .sugestion .torrent a:hover,.movieMain .detailMov .sugestion .torrent .pictureButt:hover,.movieMain2 .detailMov .sugestion .torrent a:hover,.movieMain2 .detailMov .sugestion .torrent .pictureButt:hover{background-color:#46CB18}.detailMain .detailMov .freeMovie,.movieMain .detailMov .freeMovie,.movieMain2 .detailMov .freeMovie{display:flex;width:500px !important;padding:3px 10px}.detailMain .detailMov .freeMovie p,.movieMain .detailMov .freeMovie p,.movieMain2 .detailMov .freeMovie p{margin:0px;padding:5px 10px 5px 20px;vertical-align:bottom;font-size:20px}.detailMain .detailMov .freeMovie .actorName,.movieMain .detailMov .freeMovie .actorName,.movieMain2 .detailMov .freeMovie .actorName{padding:5px 10px 5px 20px;color:#f6b17a;cursor:pointer;font-size:20px;font-weight:500}.detailMain .detailMov .freeMovie .actorName:hover,.movieMain .detailMov .freeMovie .actorName:hover,.movieMain2 .detailMov .freeMovie .actorName:hover{color:#ffd2ae}.detailMain .detailMov .freeMovie .freeImg,.movieMain .detailMov .freeMovie .freeImg,.movieMain2 .detailMov .freeMovie .freeImg{border-radius:50%;max-width:unset;height:100px !important;width:100px !important;display:block;aspect-ratio:1 / 1;object-fit:cover;object-position:center top;padding:5px;cursor:pointer;opacity:0;filter:blur(4px);animation:fadeBlurIn 1.2s ease-out forwards}@keyframes fadeBlurIn{0%{opacity:0;filter:blur(8px)}100%{opacity:1;filter:blur(0)}}.detailMain .detailMov .freeMovie .largeImg,.movieMain .detailMov .freeMovie .largeImg,.movieMain2 .detailMov .freeMovie .largeImg{display:none;cursor:pointer}.detailMain .detailMov .freeMovie .largeImgOpen,.movieMain .detailMov .freeMovie .largeImgOpen,.movieMain2 .detailMov .freeMovie .largeImgOpen{display:flex;position:fixed;justify-content:center;z-index:1;right:420px;top:220px;cursor:pointer}.detailMain .detailMov .freeMovie .largeImgOpen .image,.movieMain .detailMov .freeMovie .largeImgOpen .image,.movieMain2 .detailMov .freeMovie .largeImgOpen .image{width:550px}.detailMain .detailMov .character-grid,.movieMain .detailMov .character-grid,.movieMain2 .detailMov .character-grid{width:500px !important;padding:3px 10px}.detailMain .detailMov .character-grid .character-item,.movieMain .detailMov .character-grid .character-item,.movieMain2 .detailMov .character-grid .character-item{display:flex}.detailMain .detailMov .character-grid .character-item .actorName,.movieMain .detailMov .character-grid .character-item .actorName,.movieMain2 .detailMov .character-grid .character-item .actorName{padding:30px 10px 2px 20px;color:#f6b17a;cursor:pointer;font-weight:500;font-size:22px;text-align:left;max-width:300px;word-wrap:break-word}.detailMain .detailMov .character-grid .character-item .actorName:hover,.movieMain .detailMov .character-grid .character-item .actorName:hover,.movieMain2 .detailMov .character-grid .character-item .actorName:hover{color:#ffd2ae}.detailMain .detailMov .character-grid .character-item .actorNoPic,.movieMain .detailMov .character-grid .character-item .actorNoPic,.movieMain2 .detailMov .character-grid .character-item .actorNoPic{padding:30px 10px 2px 20px;font-size:22px;text-align:left;font-weight:500}.detailMain .detailMov .character-grid .character-item p,.movieMain .detailMov .character-grid .character-item p,.movieMain2 .detailMov .character-grid .character-item p{margin:0px;padding:2px 10px 2px 20px;text-align:left;font-size:20px}.detailMain .detailMov .character-grid .character-item .avatar-img,.movieMain .detailMov .character-grid .character-item .avatar-img,.movieMain2 .detailMov .character-grid .character-item .avatar-img{margin:10px;width:100px;height:100px;border-radius:50%;aspect-ratio:1 / 1;object-fit:cover;object-position:top;cursor:pointer;padding:1px;opacity:0;filter:blur(4px);animation:fadeInAvatar 1.2s ease-out forwards}.detailMain .detailMov .character-grid .character-item .avatar-img:hover,.movieMain .detailMov .character-grid .character-item .avatar-img:hover,.movieMain2 .detailMov .character-grid .character-item .avatar-img:hover{background-color:#f6b17a}@keyframes fadeInAvatar{0%{opacity:0;filter:blur(8px)}100%{opacity:1;filter:blur(0)}}.detailMain .detailMov .lightbox,.movieMain .detailMov .lightbox,.movieMain2 .detailMov .lightbox{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(10,10,10,0.85);display:flex;justify-content:center;align-items:center;z-index:999;animation:fadeInBg 0.4s ease-in}.detailMain .detailMov .lightbox-img,.movieMain .detailMov .lightbox-img,.movieMain2 .detailMov .lightbox-img{max-width:80%;max-height:80%;border-radius:8px;box-shadow:0 10px 40px rgba(0,0,0,0.5);animation:zoomIn 0.4s ease-in}@keyframes fadeInBg{from{background-color:rgba(10,10,10,0)}to{background-color:rgba(10,10,10,0.85)}}@keyframes zoomIn{from{transform:scale(0.7);opacity:0}to{transform:scale(1);opacity:1}}.detailMain .iframe,.movieMain .iframe,.movieMain2 .iframe{margin-top:20px;width:500px;height:310px;border:0px}.detailMain .sugestionMain,.movieMain .sugestionMain,.movieMain2 .sugestionMain{margin-top:20px;display:flex;color:#f5f5f5}.detailMain .sugestionMain .image,.movieMain .sugestionMain .image,.movieMain2 .sugestionMain .image{width:370px;padding:5px 30px}.detailMain .sugestionMain .image img,.movieMain .sugestionMain .image img,.movieMain2 .sugestionMain .image img{border-radius:8px}.detailMain .holder,.movieMain .holder,.movieMain2 .holder{width:230px}.detailMain .holder .dropdownM,.movieMain .holder .dropdownM,.movieMain2 .holder .dropdownM{position:relative;display:inline-block;cursor:pointer}.detailMain .holder .dropdownM .dropImg,.movieMain .holder .dropdownM .dropImg,.movieMain2 .holder .dropdownM .dropImg{width:230px;height:345px}.detailMain .holder .dropdownM .dropdown-contentM,.movieMain .holder .dropdownM .dropdown-contentM,.movieMain2 .holder .dropdownM .dropdown-contentM{display:none;text-align:center;position:absolute;width:230px;height:335px;top:0px;vertical-align:bottom;cursor:pointer;color:#f5f5f5;justify-content:end;flex-direction:column;text-align:center;padding-bottom:10px;background-image:linear-gradient(rgba(18,16,62,0.635), #12113a)}.detailMain .holder .dropdownM .dropdown-contentM p,.movieMain .holder .dropdownM .dropdown-contentM p,.movieMain2 .holder .dropdownM .dropdown-contentM p{font-size:18px;margin:0px;padding:2px}.detailMain .holder .dropdownM:hover .dropdown-contentM,.movieMain .holder .dropdownM:hover .dropdown-contentM,.movieMain2 .holder .dropdownM:hover .dropdown-contentM{display:flex}.detailMain .holder .titleLong,.movieMain .holder .titleLong,.movieMain2 .holder .titleLong{text-align:center;color:#f6b17a;font-size:20px;padding:10px 5px;font-weight:500;cursor:pointer}.detailMain .holder .titleLong:hover,.movieMain .holder .titleLong:hover,.movieMain2 .holder .titleLong:hover{color:#ffd2ae}.detailMain .similar,.movieMain .similar,.movieMain2 .similar{font-size:20px;padding-top:30px;padding-left:0px}.movieMain{padding:10px 25px;display:grid;gap:25px;grid-template-columns:auto auto auto auto auto}.movieMain p{font-size:22px}.movieMain .actorName{padding-top:20px;color:#f6b17a;cursor:pointer;font-size:22px;font-weight:500}.movieMain .actorName:hover{color:#ffd2ae}.movieMain2{padding:10px 25px;display:grid;gap:30px;grid-template-columns:auto auto}.movieNum{margin:auto;display:flex;width:1300px;overflow-x:auto}.movieNum .numb{padding:8px 10px;text-align:center;font-size:20px;color:#f6b17a;cursor:pointer}.movieNum .numb:hover{color:#ffd2ae}.movieNum .numb:active{color:#7077A1}.movieNum .numbAct{text-align:center;padding:8px 10px;font-size:20px;background-color:#7077A1;border-radius:5px;color:#f5f5f5}.movieGenre{padding:5px;margin:auto;display:grid;grid-template-columns:auto auto auto auto auto auto auto auto auto;width:1300px}.movieGenre .genreName,.movieGenre .timeGenre{padding:2px 10px;text-align:center;font-weight:500;font-size:22px;cursor:pointer;color:#f6b17a}.movieGenre .genreName:hover,.movieGenre .timeGenre:hover{color:#ffd2ae}.movieGenre .timeGenre{color:#f5f5f5}@media screen and (max-width: 500px){.hrGenre{width:355px}.detailMain,.movieMain,.movieMain2{width:355px;padding:0px}.detailMain .detailMov,.movieMain .detailMov,.movieMain2 .detailMov{display:block}.detailMain .detailMov .cover .dropImg,.movieMain .detailMov .cover .dropImg,.movieMain2 .detailMov .cover .dropImg{min-width:355px;top:0px}.detailMain .detailMov .movieTitle,.movieMain .detailMov .movieTitle,.movieMain2 .detailMov .movieTitle{text-align:center;font-size:20px;padding:15px}.detailMain .detailMov .divGenre,.movieMain .detailMov .divGenre,.movieMain2 .detailMov .divGenre{display:flex}.detailMain .detailMov .divGenre .genres,.movieMain .detailMov .divGenre .genres,.movieMain2 .detailMov .divGenre .genres{display:block;padding:5px 10px;width:355px}.detailMain .detailMov .divGenre .genres p,.movieMain .detailMov .divGenre .genres p,.movieMain2 .detailMov .divGenre .genres p{margin:0px;color:#f5f5f5;font-size:15px;padding:3px}.detailMain .detailMov .divGenre .genres span,.movieMain .detailMov .divGenre .genres span,.movieMain2 .detailMov .divGenre .genres span{margin:0px;padding:3px 3px 3px 3px;width:230px;font-size:15px;color:#f5f5f5}.detailMain .detailMov .description,.detailMain .detailMov .review,.movieMain .detailMov .description,.movieMain .detailMov .review,.movieMain2 .detailMov .description,.movieMain2 .detailMov .review{font-size:18px;padding:10px;color:#f5f5f5;width:355px}.detailMain .detailMov .review,.movieMain .detailMov .review,.movieMain2 .detailMov .review{padding:5px 10px}.detailMain .detailMov .writer,.detailMain .detailMov .goofs,.movieMain .detailMov .writer,.movieMain .detailMov .goofs,.movieMain2 .detailMov .writer,.movieMain2 .detailMov .goofs{padding:5px 10px 5px 10px;width:355px;font-size:16px}.detailMain .detailMov .office,.movieMain .detailMov .office,.movieMain2 .detailMov .office{padding:5px 5px 5px 10px;font-size:17px}.detailMain .detailMov .goofs,.movieMain .detailMov .goofs,.movieMain2 .detailMov .goofs{font-size:14px}.detailMain .detailMov .casting,.movieMain .detailMov .casting,.movieMain2 .detailMov .casting{display:flex;flex-direction:row;padding-left:20px;width:355px;font-size:16px}.detailMain .detailMov .casting p,.movieMain .detailMov .casting p,.movieMain2 .detailMov .casting p{margin:2px;padding:10px}.detailMain .detailMov .casting .actorName,.movieMain .detailMov .casting .actorName,.movieMain2 .detailMov .casting .actorName{color:#f6b17a;cursor:pointer;font-size:14px}.detailMain .detailMov .sugestion,.movieMain .detailMov .sugestion,.movieMain2 .detailMov .sugestion{display:block;flex-direction:row}.detailMain .detailMov .sugestion .screen,.movieMain .detailMov .sugestion .screen,.movieMain2 .detailMov .sugestion .screen{padding:10px 30px}.detailMain .detailMov .sugestion .screen p,.movieMain .detailMov .sugestion .screen p,.movieMain2 .detailMov .sugestion .screen p{color:#f5f5f5}.detailMain .detailMov .sugestion .screen .image,.movieMain .detailMov .sugestion .screen .image,.movieMain2 .detailMov .sugestion .screen .image{border-radius:8px}.detailMain .detailMov .sugestion .screen .screenImg,.movieMain .detailMov .sugestion .screen .screenImg,.movieMain2 .detailMov .sugestion .screen .screenImg{margin-top:10px;position:relative;cursor:pointer}.detailMain .detailMov .sugestion .screen .screenImg .fullScreen,.movieMain .detailMov .sugestion .screen .screenImg .fullScreen,.movieMain2 .detailMov .sugestion .screen .screenImg .fullScreen{left:270px}.detailMain .detailMov .sugestion .screen .screenImg .dropScreen,.movieMain .detailMov .sugestion .screen .screenImg .dropScreen,.movieMain2 .detailMov .sugestion .screen .screenImg .dropScreen{display:none;position:absolute;min-width:355px;top:-5px;left:-30px;border-radius:3px;z-index:1}.detailMain .detailMov .sugestion .screen .screenImg:hover .dropScreen,.movieMain .detailMov .sugestion .screen .screenImg:hover .dropScreen,.movieMain2 .detailMov .sugestion .screen .screenImg:hover .dropScreen{display:block}.detailMain .detailMov .sugestion .torrent,.movieMain .detailMov .sugestion .torrent,.movieMain2 .detailMov .sugestion .torrent{margin:10px 30px;font-size:12px;width:295px}.detailMain .detailMov .sugestion .torrent td,.movieMain .detailMov .sugestion .torrent td,.movieMain2 .detailMov .sugestion .torrent td{text-align:center;padding:2px 5px}.detailMain .detailMov .sugestion .torrent a,.detailMain .detailMov .sugestion .torrent .pictureButt,.movieMain .detailMov .sugestion .torrent a,.movieMain .detailMov .sugestion .torrent .pictureButt,.movieMain2 .detailMov .sugestion .torrent a,.movieMain2 .detailMov .sugestion .torrent .pictureButt{padding:5px 15px;border-radius:8px}.detailMain .detailMov .freeMovie,.movieMain .detailMov .freeMovie,.movieMain2 .detailMov .freeMovie{display:flex;width:355px !important;padding:5px 10px}.detailMain .detailMov .freeMovie p,.movieMain .detailMov .freeMovie p,.movieMain2 .detailMov .freeMovie p{padding:2px 10px 2px 10px;vertical-align:bottom;font-size:18px}.detailMain .detailMov .freeMovie .actorName,.movieMain .detailMov .freeMovie .actorName,.movieMain2 .detailMov .freeMovie .actorName{padding:5px 10px 5px 10px;color:#f6b17a;cursor:pointer;font-size:18px}.detailMain .detailMov .freeMovie .actorName:hover,.movieMain .detailMov .freeMovie .actorName:hover,.movieMain2 .detailMov .freeMovie .actorName:hover{color:#ffd2ae}.detailMain .detailMov .freeMovie .freeImg,.movieMain .detailMov .freeMovie .freeImg,.movieMain2 .detailMov .freeMovie .freeImg{width:120px}.detailMain .detailMov .character-grid,.movieMain .detailMov .character-grid,.movieMain2 .detailMov .character-grid{width:355px !important;padding:3px 10px}.detailMain .detailMov .character-grid .character-item,.movieMain .detailMov .character-grid .character-item,.movieMain2 .detailMov .character-grid .character-item{display:flex}.detailMain .detailMov .character-grid .character-item .actorName,.movieMain .detailMov .character-grid .character-item .actorName,.movieMain2 .detailMov .character-grid .character-item .actorName{padding:22px 10px 2px 20px;font-size:18px}.detailMain .detailMov .character-grid .character-item .actorNoPic,.movieMain .detailMov .character-grid .character-item .actorNoPic,.movieMain2 .detailMov .character-grid .character-item .actorNoPic{padding:22px 10px 2px 20px;font-size:18px;text-align:left}.detailMain .detailMov .character-grid .character-item p,.movieMain .detailMov .character-grid .character-item p,.movieMain2 .detailMov .character-grid .character-item p{font-size:16px}.detailMain .detailMov .character-grid .character-item .avatar-img,.movieMain .detailMov .character-grid .character-item .avatar-img,.movieMain2 .detailMov .character-grid .character-item .avatar-img{width:75px;height:75px}.detailMain .detailMov .iframe,.movieMain .detailMov .iframe,.movieMain2 .detailMov .iframe{margin-top:15px;width:355px;height:209px}.detailMain .holder,.movieMain .holder,.movieMain2 .holder{width:160px}.detailMain .holder .dropdownM .dropImg,.movieMain .holder .dropdownM .dropImg,.movieMain2 .holder .dropdownM .dropImg{width:160px;height:240px}.detailMain .holder .dropdownM .dropdown-contentM,.movieMain .holder .dropdownM .dropdown-contentM,.movieMain2 .holder .dropdownM .dropdown-contentM{width:160px;height:233px;overflow:hidden}.detailMain .holder .dropdownM .dropdown-contentM p,.movieMain .holder .dropdownM .dropdown-contentM p,.movieMain2 .holder .dropdownM .dropdown-contentM p{font-size:12px}.detailMain .holder .titleLong,.movieMain .holder .titleLong,.movieMain2 .holder .titleLong{font-size:16px;padding:5px 3px}.detailMain .similar,.movieMain .similar,.movieMain2 .similar{font-size:16px;padding-top:10px;padding-left:10px}.movieMain{padding:10px 10px;gap:15px;grid-template-columns:auto auto}.movieNum{margin:auto;display:flex;width:355px;overflow-x:auto}.movieNum .numb{padding:6px 10px;font-size:15px}.movieNum .numbAct{padding:6px 10px;font-size:15px}.movieGenre{margin:auto;display:grid;grid-template-columns:auto auto auto auto auto;width:355px;height:130px}.movieGenre .genreName,.movieGenre .timeGenre{padding:2px;text-align:center;font-size:14px}.movieGenre .timeGenre{color:#f5f5f5}}@font-face{font-family:mainFont;src:url(${d})}body{background-color:#2D3250;font-family:mainFont;font-weight:lighter;color:#f5f5f5}.average{color:transparent;display:none}.provider{margin:auto;width:1300px}.provider .fixed{position:fixed;width:1300px;height:50px;background-color:#7077A1;z-index:2}.navigation{margin:auto;display:flex;width:1300px}.navigation .search{display:flex}.home{width:1300px;margin:auto}.place{margin:auto;width:1300px;height:600px;padding:80px 10px 10px 10px;justify-content:center;background-color:#323769}.place .placeBut{display:flex;justify-content:space-around}.place .placeBut .paper{width:240px;height:42px;margin:4px}.place .placeBut .paper .base{padding-left:8px;width:140px}.guestCast{margin:auto;width:1300px;text-align:left;padding:7px 10px;background-color:#7077A1;font-size:20px}.gridTv{margin:auto;display:grid;grid-template-columns:auto auto auto auto auto auto;width:1300px;gap:20px;background-color:#323769;font-size:18px;padding:20px 18px}.gridTv .time{margin:0;font-size:22px;padding:3px 25px;color:#f5f5f5}.gridTv .gridItem{max-width:194px;text-align:center;position:relative}.gridTv .gridItem img{min-width:194px;min-height:272px;cursor:pointer}.gridTv .gridItem .genresTv{position:absolute;width:194px;height:273px;font-size:18px;color:#f5f5f5;top:0px;display:none;text-align:center;flex-direction:column;padding:0px;justify-content:end;padding-bottom:10px;background-image:linear-gradient(rgba(18,16,62,0.635), #12113a);cursor:pointer}.gridTv .gridItem .genresTv .episode{font-weight:400;font-size:20px;padding:5px}.gridTv .gridItem .genresTv p{margin:0px;padding:2px}.gridTv .gridItem:hover .genresTv{display:flex}.gridTv .gridItem .showName{max-width:194px;font-size:20px;font-weight:500;cursor:pointer;margin:0;padding:10px 5px;color:#f6b17a}.gridTv .gridItem .showName:hover{color:#ffd2ae}.searchMain{margin:auto;padding-top:10px;width:1300px;height:1400px;font-size:26px;color:#f5f5f5;text-shadow:2px 2px 5px gray;text-align:center;background-color:#323769}.searchMain p{margin:0}.showMain,.showActor{padding-top:2px;margin:auto;width:1300px;background-color:#323769;font-size:18px;padding:50px 10px 10px 10px}.showMain .borderBotom,.showActor .borderBotom{border-bottom:1px solid #2D3250}.showMain .borderBotom p,.showActor .borderBotom p{margin:2px}.showMain .wrap,.showActor .wrap{color:#f6b17a;font-size:18px;cursor:pointer}.showMain .wrap:hover,.showActor .wrap:hover{color:#ffd2ae}.showMain .sezone,.showActor .sezone{padding-left:6px;font-size:18px;width:400px;max-width:400px;max-height:80px;overflow-x:auto}.showMain .sezone p,.showActor .sezone p{margin:3px 0px}.showMain .bigImg,.showActor .bigImg{width:1280px;text-align:center}.showMain .bigImg p,.showActor .bigImg p{font-size:20px}.showMain .clickShow,.showActor .clickShow{font-weight:500;font-size:26px;cursor:pointer;width:300px;color:#f6b17a}.showMain .clickShow:hover,.showActor .clickShow:hover{color:#ffd2ae}.showMain .showCast,.showActor .showCast{font-size:20px;border-bottom:2px solid #2D3250;background-color:#cccccc}.showMain .holdImg,.showActor .holdImg{padding-right:10PX;vertical-align:top}.showMain .holdImg .imgShow,.showActor .holdImg .imgShow{margin-top:2px;min-width:500px;max-width:500px;border-radius:10px;cursor:pointer}.showMain .holdImg .imgActor,.showActor .holdImg .imgActor{min-width:350px;max-width:350px}.showMain .imgEpisode,.showActor .imgEpisode{min-width:400px;max-width:400px;border-radius:8px}.showMain .number,.showActor .number{padding-left:30px;font-size:22px;font-weight:400;width:100px}.showMain .showName,.showActor .showName{padding:2px 10px;font-weight:500;font-size:28px;text-align:center}.showMain .airDate,.showActor .airDate{width:70px;padding:3px 10px}.showMain .showNameActor,.showActor .showNameActor{padding:2px 30px;font-weight:400;font-size:28px;cursor:pointer;color:#f6b17a}.showMain .showNameActor:hover,.showActor .showNameActor:hover{color:#ffd2ae}.showMain .forSummary,.showActor .forSummary{display:flex;flex-direction:row}.showMain .summary,.showActor .summary{margin-left:25px;max-width:395px;min-width:395px;padding:10px 15px;font-size:24px;border:1px solid #2D3250;border-radius:19px;color:#f5f5f5;background-color:#7077A1}.showMain .summaryRes,.showActor .summaryRes{margin-left:5px;max-width:650px;min-width:650px;padding:10px 15px;font-size:24px;border:1px solid #2D3250;background-color:#7077A1;border-radius:19px}.showMain .language,.showActor .language{padding:2px 10px;min-width:335px;max-width:335px}.showMain a,.showActor a{padding-left:8px}.showMain .genres,.showActor .genres{display:flex;font-size:20px;margin:0;color:#f5f5f5;list-style:none;padding:0px 5px 0px 2px}.showMain .genres li,.showActor .genres li{padding-right:5px}.showMain a,.showActor a{font-weight:400;font-size:20px;text-decoration:none;color:#f6b17a;cursor:pointer}.showMain a:hover,.showActor a:hover{color:#ffd2ae}.showMain .nameComm,.showActor .nameComm{font-size:24px;width:800px}.showMain .nameComm ul,.showActor .nameComm ul{padding:0}.showMain .nameComm li,.showActor .nameComm li{list-style:none;padding:0}.showMain .collapseTv,.showActor .collapseTv{display:flex;flex-direction:row;background-color:#DFFF00}.showMain .tvName,.showActor .tvName{width:300px;font-weight:400}.showMain th,.showActor th{text-align:left}.showMain .imgTv,.showActor .imgTv{width:60px;padding:5px}.showActor{padding-top:10px}.details{display:flex;margin:auto;width:1300px;background-color:#323769;font-size:18px;padding:60px 10px 10px 10px}.details p{padding:5px;margin:0}.details .more{border-radius:5px;background-color:green;color:#f5f5f5;font-size:16px;cursor:pointer;text-align:center;vertical-align:middle;width:160px;padding:10px 15px}.details .more:hover{background-color:#05af05}.details .holdImg{padding-right:25px;vertical-align:top;position:relative;cursor:pointer}.details .holdImg .imgShow{margin-top:2px;min-width:500px;max-width:500px;border-radius:10px}.details .holdImg .imgOmdb{display:none;position:absolute;top:0px;width:500px;border-radius:10px;z-index:1}.details .holdImg:hover .imgOmdb{display:block}.details .sezone{padding-left:6px;font-size:18px;width:750px;max-width:750px;max-height:75px;overflow-x:auto}.details .sezone div{display:flex}.details .sezone div p{margin:3px 0px;padding-right:15px}.details .clickShow{font-weight:500;font-size:26px;cursor:pointer;width:300px;color:#f6b17a}.details .clickShow:hover{color:#ffd2ae}.details .showName{padding:2px 10px;font-weight:500;font-size:28px;text-align:center}.details .showCast{background-color:#7077A1;font-size:19px;padding-left:15px;height:30px}.details .showCast td{padding-left:10px}.details .summary{max-width:750px;min-width:750px;padding:10px 15px;font-size:24px;color:#f5f5f5;background-color:#7077A1;border-radius:10px;vertical-align:top}.details .runtime{display:flex;vertical-align:top}.details .runtime .rating{margin:0px}.details .runtime .rating2{margin:0px;padding-left:10px}.details .rating3{padding:6px}.details .language{padding:2px 10px;min-width:335px;max-width:335px;vertical-align:top}.details .genres{display:flex;font-size:20px;margin:0;list-style:none;padding:0px 5px 0px 2px}.details .genres li{padding-right:5px}.details a{font-weight:300;font-size:20px;text-decoration:none;color:#f6b17a;cursor:pointer}.details a:hover{color:#ffd2ae}.sezoneList{display:flex;margin:auto;width:1300px;background-color:#323769}.sezoneList .epNumber{margin:0;font-size:20px;font-weight:400;padding:3px 10px;width:440px}.sezoneList .epName{margin:0;text-align:center;font-size:22px;font-weight:400;width:440px;padding:10px 10px}.sezoneList .epTitle{padding:15px 10px;margin:0;text-align:center;font-size:24px;color:#f6b17a;font-weight:500;width:440px;cursor:pointer}.sezoneList .epTitle:hover{color:#ffd2ae}.sezoneList .airdate{margin:0;width:200px;padding:3px 10px}.sezoneList .episName{width:200px}.sezoneList .summaryEpis{width:540px}.sezoneList .imgSezons{width:400px;padding:5px 5px}.sezoneList .sezonNum{font-size:25px;font-weight:400;width:50px}.sezoneList .sezonDate{width:250px;padding-left:15px;font-weight:400}.sezoneList .summEpis{margin-top:5px;width:450px;padding:10px 15px;font-size:22px;border-radius:19px;vertical-align:top}.collapse{margin:auto;width:1300px;border-bottom:solid 1px #7077A1}.footer{text-align:center;font-size:18px;padding-top:500px;padding-bottom:10px;background-color:#2D3250;color:#7077A1}.footer hr{color:#7077A1;background-color:#7077A1}.back-to-top{position:fixed;bottom:20px;right:300px;cursor:pointer;border-radius:5px}.back-to-top .arrowup{align-items:center;width:30px;height:25px;color:#7077A1;background-color:rgba(18,16,62,0.635);border-radius:5px;border:solid 3px #7077A1}.loader{display:flex;width:1300px;background-color:#2D3250;color:#f6b17a;height:1000px;margin:auto;justify-content:center;align-items:center}.sliderDiv{width:740px;min-height:30px;margin:auto}.sliderDiv .imageActor{max-width:170px;min-height:239px;cursor:pointer;border:1px solid transparent}.sliderDiv .imageActor:hover{border:1px solid #f6b17a}.sliderDiv .imageCaracter{max-width:170px;min-height:239px}.sliderDiv .vertical{width:3px;height:239px}.sliderDiv .clickActor{max-width:170px;margin:0;padding:5px;color:#f6b17a;cursor:pointer;font-size:18px;overflow:hidden}.sliderDiv .clickActor:hover{color:#ffd2ae}.sliderDiv p{width:170px;margin:0;padding:5px;overflow:hidden}@media screen and (max-width: 500px){.provider{width:355px}.provider .fixed{width:355px}.searchMain{width:355px;font-size:20px}.guestCast{width:345px;font-size:16px}.showActor{display:block;width:355px;font-size:14px;padding:20px 5px 5px 5px}.showActor .holdImg{padding:2px}.showActor .holdImg .imgShow{max-width:345px;min-width:345px}.showActor .forSummary{flex-direction:column}.showActor .summary{font-size:18px}.showActor a{font-size:16px}.showActor .language{padding:1px 4px;max-width:150px;min-width:150px}.showActor .showCast{max-width:350px;font-size:16px}.showActor .clickShow{font-size:18px;max-width:150px}.showActor .clickShow .genres{font-size:16px}.showActor .showName{padding:1px 5px;font-size:22px;max-width:350px}.showActor .genres{font-size:14px}.showActor .sezone{padding-left:4px;font-size:16px;width:335px;max-width:335px;max-height:55px}.details{display:block;width:355px;font-size:14px;padding:60px 5px 5px 5px}.details .more{font-size:10px;padding:4px 6px;width:100px}.details .holdImg{padding:2px}.details .holdImg .imgShow{max-width:345px;min-width:345px;border-radius:7px}.details .forSummary{flex-direction:column}.details .summary{font-size:18px;max-width:330px;min-width:330px}.details a{font-size:14px}.details .language{padding:1px 4px;max-width:150px;min-width:150px}.details .showCast{max-width:350px;font-size:16px}.details .clickShow{font-size:20px;max-width:150px}.details .clickShow .genres{font-size:16px}.details .showName{padding:5px 5px;font-size:22px;max-width:350px}.details .genres{font-size:14px}.details .sezone{padding-left:4px;font-size:14px;width:335px;max-width:335px;max-height:62px}.place{width:355px;padding:50px 5px 5px 5px}.place .placeBut{padding:2px;display:block}.gridTv{grid-template-columns:auto auto auto;width:355px;font-size:16px;gap:8px;padding:10px 4px}.gridTv .time{font-size:16px;padding:5px 10px}.gridTv .gridItem{padding:2px;max-width:107x}.gridTv .gridItem img{min-width:107px;min-height:156px}.gridTv .gridItem .genresTv{position:absolute;width:107px;height:157px;font-size:12px;top:1px;padding-bottom:8px}.gridTv .gridItem .genresTv .episode{font-size:14px;padding:5px}.gridTv .gridItem .genresTv p{margin:0px;padding:2px}.gridTv .gridItem:hover .genresTv{display:flex}.gridTv .gridItem .showName{max-width:95px;font-size:14px;font-weight:400;padding:6px 3px}.showActor{width:355px}.showActor .imgCastMain{max-width:345px}.showActor .imgCastMain .guest{display:flex;width:200px}.showActor .imgCastMain .guest .guestImgClick,.showActor .imgCastMain .guest .guestImg{width:100px}.showActor .imgCastMain .guestName{display:flex;justify-content:space-between;height:50px}.showActor .imgCastMain .guestName p{width:100px;font-size:12px;padding-left:3px}.showActor .imgCastMain .guestName .click{font-size:12px;cursor:pointer;text-align:right;padding-right:5px;width:100px}.showActor .imgCastMain .imgCast{min-width:100px}.showActor .wrap{font-size:16px}.showActor .bigImg{width:345px}.showActor .imgEpisode{min-width:345px;max-width:345px}.showActor .number{padding-left:15px;font-size:18px}.showActor .summary{margin-left:0px;max-width:345px;min-width:345px}.sezoneList{display:block;margin:auto;width:355px}.sezoneList .episName{width:200px}.sezoneList .epNumber{font-size:16px;width:350px}.sezoneList .epName{font-size:20px;width:350px;padding:4px 5px}.sezoneList .epTitle{padding:7px 5px;margin:0px;width:355px;font-size:20px}.sezoneList .summaryEpis{width:345px}.sezoneList .imgSezons{width:355px;padding:5px 0px}.sezoneList .sezonNum{font-size:18px}.sezoneList .sezonDate{width:250px}.sezoneList .summEpis{width:350px;padding:5px 5px;font-size:18px;border-radius:5px}.showMain{padding-top:50px;width:355px}.showMain .bigImg{width:340px}.showMain .bigImg p{font-size:12px}.showMain .holdImg{padding-right:2px}.showMain .holdImg .imgShow{padding-right:3px;min-width:115px;max-width:115px}.showMain .holdImg .imgActor{min-width:110px;max-width:110px}.showMain .showNameActor{font-size:22px}.showMain a,.showMain .language{min-width:95px;max-width:95px;font-size:14px}.showMain .clickShow{font-size:22px}.showMain .summary{max-width:100px;font-size:14px;border-radius:5px}.showMain .summaryRes{margin-left:3px;padding:8px 6px;max-width:100px;min-width:100px;font-size:14px;border-radius:5px}.showMain td,.showMain .genres{font-size:14px}.collapse{width:345px}.footer{padding-top:100px;font-size:12px}.back-to-top{right:25px}.loader{width:355px;height:700px}.sliderDiv{width:300px;min-height:15px}.sliderDiv .imageActor{max-width:60px;min-height:84.4px}.sliderDiv .imageCaracter{max-width:60px;min-height:84.4px}.sliderDiv .vertical{width:3px;height:84.4px}.sliderDiv .clickActor{max-width:60px;margin:0;padding:3px;font-size:12px}.sliderDiv p{font-size:12px;width:60px;padding:3px}}\n`,"",{version:3,sources:["webpack://./src/scss/_movie.scss","webpack://./src/scss/main.scss"],names:[],mappings:"AAUA,SACI,gBAAiB,CACjB,YAAa,CACb,WAAY,CACZ,+BAVa,CAWhB,SAGG,iBAAkB,CAClB,YAAa,CAChB,mCAKG,WAAY,CACZ,YAAa,CACb,0BAA2B,CAC3B,wBA5Ba,CAsBjB,oEASQ,YAAa,CATrB,yFAYY,iBAAkB,CAClB,cAAe,CAb3B,oHAgBgB,YAAa,CACb,iBAAkB,CAClB,OAAQ,CACR,eAAgB,CAChB,SAAU,CApB1B,sIAwBgB,aAAc,CAxB9B,wGA6BY,iBAAkB,CAClB,cAAe,CACf,eAAgB,CAChB,YAAa,CACb,aAjDgB,CAgB5B,kGAqCY,aAAc,CArC1B,0HAwCgB,YAAa,CACb,iBAAkB,CAClB,WAAY,CACZ,eAAgB,CA3ChC,gIA8CoB,UAAW,CACX,aAlEA,CAmEA,cAAe,CACf,WAAY,CAjDhC,yIAqDoB,UAAW,CACX,yBAA0B,CAC1B,cAAe,CACf,aA3EA,CA4EA,WAAY,CACZ,qBAAsB,CA1D1C,uMAiEY,cAAe,CACf,YAAa,CACb,aAtFQ,CAuFR,WAAY,CACZ,kBAAmB,CArE/B,4FAyEY,iBAAkB,CAClB,UAAW,CA1EvB,0HA8EgB,aAhGC,CAiGD,cAAe,CA/E/B,4IAmFoB,aApGH,CAiBjB,kGAwFgB,aAAc,CAxF9B,oRA+FY,yBAA0B,CAC1B,WAAY,CACZ,cAAe,CACf,UAAW,CAlGvB,+FAsGY,gBAAiB,CACjB,cAAe,CAvG3B,4FA2GY,yBAA0B,CAC1B,wBAjIK,CAkIL,cAAe,CACf,iBAAkB,CAClB,WAAY,CACZ,aAjIK,CAiBjB,yFAoHY,cAAe,CACf,kBAAmB,CArH/B,+FAwHgB,aAAc,CAxH9B,+FA6HY,YAAa,CACb,kBAAmB,CACnB,iBAAkB,CAClB,WAAY,CACZ,cAAe,CAjI3B,2GAoIgB,WAAY,CACZ,iBAAkB,CAClB,kCA1JC,CAoBjB,qGA0IgB,UAAW,CACX,YAAa,CACb,aA/JI,CAmBpB,gIAgJgB,aAlKC,CAmKD,cAAe,CACf,eAAgB,CAChB,cAAe,CAnJ/B,kJAsJoB,aAvKH,CAiBjB,qGA4JY,YAAa,CACb,kBAAmB,CA7J/B,6HAgKgB,iBAAkB,CAhKlC,wJAmKoB,eAAgB,CAChB,aAtLH,CAuLG,cAAe,CACf,cAAe,CAtKnC,0KAyKwB,aA1LP,CAiBjB,mIA8KoB,aAjMA,CAmBpB,kJAkLoB,iBAAkB,CAlLtC,8JAsLoB,WAAY,CAtLhC,8JA0LoB,eAAgB,CAChB,iBAAkB,CAClB,cAAe,CA5LnC,kMA+LwB,iBAAkB,CAClB,UAAW,CACX,SAAU,CACV,wCAA4C,CAC5C,iBAAkB,CAnM1C,kMAuMwB,YAAa,CACb,iBAAkB,CAClB,gBAAiB,CACjB,SAAU,CACV,WAAY,CACZ,wBA9NP,CA+NO,kBAAmB,CACnB,SAAU,CA9MlC,oNAkNwB,aAAc,CAlNtC,gIAwNgB,gBAAiB,CACjB,cAAe,CACf,WAAY,CACZ,wBAhPC,CAiPD,aA/OI,CAgPJ,wBAAyB,CACzB,iBAAkB,CA9NlC,yIAiOoB,iBAAkB,CAClB,gBAAiB,CAlOrC,6SAuOoB,oBAAqB,CACrB,cAAe,CACf,iBAAkB,CAClB,aA7PA,CA8PA,wBAAyB,CACzB,iBAAkB,CAClB,iBAAkB,CA7OtC,iVAgPwB,wBAAyB,CAhPjD,qGAuPY,YAAa,CACb,sBAAuB,CACvB,gBAAiB,CAzP7B,2GA4PgB,UAAW,CACX,yBAA0B,CAC1B,qBAAsB,CACtB,cAAe,CA/P/B,sIAmQgB,yBAA0B,CAC1B,aAtRC,CAuRD,cAAe,CACf,cAAe,CACf,eAAgB,CAvQhC,wJA2QoB,aA5RH,CAiBjB,gIAgRgB,iBAAkB,CAClB,eAAgB,CAChB,uBAAwB,CACxB,sBAAuB,CACvB,aAAc,CACd,kBAAmB,CACnB,gBAAiB,CACjB,0BAA2B,CAC3B,WAAY,CACZ,cAAe,CACf,SAAU,CACV,gBAAiB,CACjB,2CAA4C,CAE/C,sBAGG,GACI,SAAU,CACV,gBAAiB,CAGrB,KACI,SAAU,CACV,cAAe,CAAA,CAxSnC,mIA6SgB,YAAa,CACb,cAAe,CA9S/B,+IAmTgB,YAAa,CACb,cAAe,CACf,sBAAuB,CACvB,SAAU,CACV,WAAY,CACZ,SAAU,CACV,cAAe,CAzT/B,oKA4ToB,WAAY,CA5ThC,oHAuUY,sBAAuB,CACvB,gBAAiB,CAxU7B,oKA4UgB,YAAa,CA5U7B,qMAiVoB,0BAA2B,CAC3B,aApWH,CAqWG,cAAe,CAEf,eAAgB,CAEhB,cAAe,CAEf,eAAgB,CAChB,eAAgB,CAChB,oBAAqB,CA3VzC,uNA+VwB,aAhXP,CAiBjB,wMAoWoB,0BAA2B,CAC3B,cAAe,CACf,eAAgB,CAChB,eAAgB,CAvWpC,0KA2WoB,UAAW,CACX,yBAA0B,CAC1B,eAAgB,CAEhB,cAAe,CA/WnC,wMAoXoB,WAAY,CACZ,WAAY,CACZ,YAAa,CACb,iBAAkB,CAClB,kBAAmB,CACnB,gBAAiB,CACjB,mBAAoB,CACpB,cAAe,CACf,WAAY,CACZ,SAAU,CACV,gBAAiB,CACjB,6CAA8C,CA/XlE,0NAkYwB,wBApZP,CAqZI,wBAID,GACI,SAAU,CACV,gBAAiB,CAGrB,KACI,SAAU,CACV,cAAe,CAAA,CA9YvC,kGAuZY,cAAe,CACf,KAAM,CACN,MAAO,CACP,UAAW,CACX,WAAY,CACZ,oCAAwC,CACxC,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,WAAY,CACZ,+BAAgC,CAja5C,8GAqaY,aAAc,CACd,cAAe,CACf,iBAAkB,CAClB,sCAA0C,CAC1C,6BAA8B,CACjC,oBAGG,KACI,iCAAqC,CAGzC,GACI,oCAAwC,CAAA,CAIhD,kBACI,KACI,oBAAqB,CACrB,SAAU,CAGd,GACI,kBAAmB,CACnB,SAAU,CAAA,CA9b1B,2DAqcQ,eAAgB,CAChB,WAAY,CACZ,YAAa,CACb,UAAW,CAxcnB,gFA4cQ,eAAgB,CAChB,YAAa,CACb,aAjeY,CAmBpB,qGAidY,WAAY,CACZ,gBAAiB,CAld7B,iHAqdgB,iBAAkB,CArdlC,2DA2dQ,WAAY,CA3dpB,4FA8dY,iBAAkB,CAClB,oBAAqB,CACrB,cAAe,CAhe3B,uHAmegB,WAAY,CACZ,YAAa,CApe7B,qJAwegB,YAAa,CACb,iBAAkB,CAClB,iBAAkB,CAClB,WAAY,CACZ,YAAa,CACb,OAAQ,CACR,qBAAsB,CACtB,cAAe,CACf,aAngBI,CAogBJ,mBAAoB,CACpB,qBAAsB,CACtB,iBAAkB,CAClB,mBAAoB,CACpB,+DAAmD,CArfnE,2JAwfoB,cAAe,CACf,UAAW,CACX,WAAY,CA1fhC,uKA+fgB,YAAa,CA/f7B,4FAogBY,iBAAkB,CAClB,aAvhBK,CAwhBL,cAAe,CACf,gBAAiB,CACjB,eAAgB,CAChB,cAAe,CAzgB3B,8GA4gBgB,aA7hBC,CAiBjB,8DAkhBQ,cAAe,CACf,gBAAiB,CACjB,gBAAiB,CACpB,WAID,iBAAkB,CAClB,YAAa,CACb,QAAS,CACT,8CAA+C,CAJnD,aAOQ,cAAe,CAPvB,sBAWQ,gBAAiB,CACjB,aAtjBS,CAujBT,cAAe,CACf,cAAe,CACf,eAAgB,CAfxB,4BAmBY,aA5jBK,CA6jBR,YAKL,iBAAkB,CAClB,YAAa,CACb,QAAS,CACT,+BAAgC,CACnC,UAGG,WAAY,CACZ,YAAa,CACb,YAAa,CACb,eAAgB,CAJpB,gBAOQ,gBAAiB,CACjB,iBAAkB,CAClB,cAAe,CACf,aAnlBS,CAolBT,cAAe,CAXvB,sBAcY,aAtlBK,CAwkBjB,uBAkBY,aA7lBK,CA2kBjB,mBAuBQ,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CACf,wBArmBS,CAsmBT,iBAAkB,CAClB,aAtmBY,CAumBf,YAID,WAAY,CACZ,WAAY,CACZ,YAAa,CACb,kEAAmE,CACnE,YAAa,CALjB,8CASQ,gBAAiB,CACjB,iBAAkB,CAClB,eAAgB,CAChB,cAAe,CACf,cAAe,CACf,aAvnBS,CAymBjB,0DAiBY,aAznBK,CAwmBjB,uBAsBQ,aAhoBY,CAioBf,qCAKD,SACI,WAAY,CACf,mCAKG,WAAY,CACZ,WAAY,CAJhB,oEAOQ,aAAc,CAPtB,oHAYgB,eAAgB,CAChB,OAAQ,CAbxB,wGAkBY,iBAAkB,CAClB,cAAe,CACf,YAAa,CApBzB,kGAwBY,YAAa,CAxBzB,0HA2BgB,aAAc,CACd,gBAAiB,CACjB,WAAY,CA7B5B,gIAgCoB,UAAW,CACX,aA3qBJ,CA4qBI,cAAe,CACf,WAAY,CAnChC,yIAuCoB,UAAW,CACX,uBAAwB,CACxB,WAAY,CACZ,cAAe,CACf,aArrBJ,CA0oBhB,uMAkDY,cAAe,CACf,YAAa,CACb,aA9rBI,CA+rBJ,WAAY,CArDxB,4FAyDY,gBAAiB,CAzD7B,qLA8DY,yBAA0B,CAC1B,WAAY,CACZ,cAAe,CAhE3B,4FAoEY,wBAAyB,CACzB,cAAe,CArE3B,yFAyEY,cAAe,CAzE3B,+FA6EY,YAAa,CACb,kBAAmB,CACnB,iBAAkB,CAClB,WAAY,CACZ,cAAe,CAjF3B,qGAoFgB,UAAW,CACX,YAAa,CArF7B,gIAyFgB,aAluBH,CAmuBG,cAAe,CACf,cAAe,CA3F/B,qGAkGY,aAAc,CACd,kBAAmB,CAnG/B,6HAsGgB,iBAAkB,CAtGlC,mIAyGoB,aAnvBJ,CA0oBhB,kJA6GoB,iBAAkB,CA7GtC,8JAiHoB,eAAgB,CAChB,iBAAkB,CAClB,cAAe,CAnHnC,kMAsHwB,UAAW,CAtHnC,kMA0HwB,YAAa,CACb,iBAAkB,CAClB,eAAgB,CAChB,QAAS,CACT,UAAW,CACX,iBAAkB,CAClB,SAAU,CAhIlC,oNAoIwB,aAAc,CApItC,gIA0IgB,gBAAiB,CACjB,cAAe,CACf,WAAY,CA5I5B,yIA+IoB,iBAAkB,CAClB,eAAgB,CAhJpC,6SAqJoB,gBAAiB,CACjB,iBAAkB,CAtJtC,qGA4JY,YAAa,CACb,sBAAuB,CACvB,gBAAiB,CA9J7B,2GAiKgB,yBAA0B,CAC1B,qBAAsB,CACtB,cAAe,CAnK/B,sIAuKgB,yBAA0B,CAC1B,aAjzBH,CAkzBG,cAAe,CACf,cAAe,CA1K/B,wJA6KoB,aArzBP,CAwoBb,gIAkLgB,WAAY,CAlL5B,oHAuLY,sBAAuB,CACvB,gBAAiB,CAxL7B,oKA2LgB,YAAa,CA3L7B,qMA8LoB,0BAA2B,CAC3B,cAAe,CA/LnC,wMAmMoB,0BAA2B,CAC3B,cAAe,CACf,eAAgB,CArMpC,0KA0MoB,cAAe,CA1MnC,wMA8MoB,UAAW,CACX,WAAY,CA/MhC,4FAqNY,eAAgB,CAChB,WAAY,CACZ,YAAa,CAvNzB,2DA4NQ,WAAY,CA5NpB,uHAiOgB,WAAY,CACZ,YAAa,CAlO7B,qJAsOgB,WAAY,CACZ,YAAa,CACb,eAAgB,CAxOhC,2JA2OoB,cAAe,CA3OnC,4FAkPY,cAAe,CACf,eAAgB,CAnP5B,8DAwPQ,cAAe,CACf,gBAAiB,CACjB,iBAAkB,CACrB,WAKD,iBAAkB,CAClB,QAAS,CACT,+BAAgC,CACnC,UAGG,WAAY,CACZ,YAAa,CACb,WAAY,CACZ,eAAgB,CAJpB,gBAOQ,gBAAiB,CACjB,cAAe,CARvB,mBAYQ,gBAAiB,CACjB,cAAe,CAClB,YAID,WAAY,CACZ,YAAa,CACb,8CAA+C,CAC/C,WAAY,CACZ,YAAa,CALjB,8CASQ,WAAY,CACZ,iBAAkB,CAClB,cAAe,CAXvB,uBAeQ,aA/6BQ,CAg7BX,CCt6BT,WACI,oBAAqB,CACrB,2CAAiD,CAGrD,KACI,wBAhBY,CAiBZ,oBAAqB,CACrB,mBAAoB,CACpB,aAjBe,CAkBlB,SAGG,iBAAkB,CAClB,YAAa,CAChB,UAGG,WAAY,CACZ,YAAa,CAFjB,iBAKQ,cAAe,CACf,YAAa,CACb,WAAY,CACZ,wBAlCQ,CAmCR,SAAU,CACb,YAID,WAAY,CACZ,YAAa,CACb,YAAa,CAHjB,oBAMQ,YAAa,CAChB,MAID,YAAa,CACb,WAAY,CACf,OAGG,WAAY,CACZ,YAAa,CACb,YAAa,CACb,2BAA4B,CAC5B,sBAAuB,CACvB,wBA9DY,CAwDhB,iBASQ,YAAa,CACb,4BAA6B,CAVrC,wBAaY,WAAY,CACZ,WAAY,CACZ,UAAW,CAfvB,8BAkBgB,gBAAiB,CACjB,WAAY,CACf,WAMT,WAAY,CACZ,YAAa,CACb,eAAgB,CAChB,gBAAiB,CACjB,wBAAyB,CACzB,cAAe,CAClB,QAGG,WAAY,CACZ,YAAa,CACb,mDAAoD,CACpD,YAAa,CACb,QAAS,CACT,wBAhGY,CAiGZ,cAAe,CACf,iBAAkB,CARtB,cAWQ,QAAS,CACT,cAAe,CACf,gBAAiB,CACjB,aArGW,CAuFnB,kBAkBQ,eAAgB,CAChB,iBAAkB,CAClB,iBAAkB,CApB1B,sBAuBY,eAAgB,CAChB,gBAAiB,CACjB,cAAe,CAzB3B,4BA6BY,iBAAkB,CAClB,WAAY,CACZ,YAAa,CACb,cAAe,CACf,aAxHO,CAyHP,OAAQ,CACR,YAAa,CACb,iBAAkB,CAClB,qBAAsB,CACtB,WAAY,CACZ,mBAAoB,CACpB,mBAAoB,CACpB,+DAAmD,CACnD,cAAe,CA1C3B,qCA6CgB,eAAgB,CAChB,cAAe,CACf,WAAY,CA/C5B,8BAoDgB,UAAW,CACX,WAAY,CArD5B,kCA0DY,YAAa,CA1DzB,4BA8DY,eAAgB,CAChB,cAAe,CACf,eAAgB,CAChB,cAAe,CACf,QAAS,CACT,gBAAiB,CACjB,aA1JI,CAsFhB,kCAuEgB,aA5JA,CA6JH,YAMT,WAAY,CACZ,gBAAiB,CACjB,YAAa,CACb,aAAc,CACd,cAAe,CACf,aA1Ke,CA2Kf,4BAA6B,CAC7B,iBAAkB,CAClB,wBAhLY,CAuKhB,cAYQ,QAAS,CACZ,qBAKD,eAAgB,CAChB,WAAY,CACZ,YAAa,CACb,wBA5LY,CA6LZ,cAAe,CACf,2BAA4B,CAPhC,+CAUQ,+BAhMQ,CAsLhB,mDAaY,UAAW,CAbvB,iCAkBQ,aArMQ,CAsMR,cAAe,CACf,cAAe,CApBvB,6CAuBY,aAzMI,CAkLhB,qCA4BQ,gBAAiB,CACjB,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CAjCxB,yCAoCY,cAAe,CApC3B,qCAyCQ,YAAa,CACb,iBAAkB,CA1C1B,yCA6CY,cAAe,CA7C3B,2CAkDQ,eAAgB,CAChB,cAAe,CACf,cAAe,CACf,WAAY,CACZ,aAzOQ,CAmLhB,uDAyDY,aA3OI,CAkLhB,yCA8DQ,cAAe,CACf,+BArPQ,CAsPR,wBAAyB,CAhEjC,uCAoEQ,kBAAmB,CACnB,kBAAmB,CArE3B,yDAwEY,cAAe,CACf,eAAgB,CAChB,eAAgB,CAChB,kBAAmB,CACnB,cAAe,CA5E3B,2DAgFY,eAAgB,CAChB,eAAgB,CAjF5B,6CAsFQ,eAAgB,CAChB,eAAgB,CAChB,iBAAkB,CAxF1B,qCA4FQ,iBAAkB,CAClB,cAAe,CACf,eAAgB,CAChB,WAAY,CA/FpB,yCAmGQ,gBAAiB,CACjB,eAAgB,CAChB,cAAe,CACf,iBAAkB,CAtG1B,uCA0GQ,UAAW,CACX,gBAAiB,CA3GzB,mDA+GQ,gBAAiB,CACjB,eAAgB,CAChB,cAAe,CACf,cAAe,CACf,aAtSQ,CAmLhB,+DAsHY,aAxSI,CAkLhB,6CA2HQ,YAAa,CACb,kBAAmB,CA5H3B,uCAgIQ,gBAAiB,CACjB,eAAgB,CAChB,eAAgB,CAChB,iBAAkB,CAClB,cAAe,CACf,wBA3TQ,CA4TR,kBAAmB,CACnB,aA3TW,CA4TX,wBA7TQ,CAqLhB,6CA4IQ,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CAChB,iBAAkB,CAClB,cAAe,CACf,wBAvUQ,CAwUR,wBAvUQ,CAwUR,kBAAmB,CAnJ3B,yCAuJQ,gBAAiB,CACjB,eAAgB,CAChB,eAAgB,CAzJxB,yBA6JQ,gBAAiB,CA7JzB,qCAiKQ,YAAa,CACb,cAAe,CACf,QAAS,CACT,aAxVW,CAyVX,eAAgB,CAChB,uBAAwB,CAtKhC,2CAyKY,iBAAkB,CAzK9B,yBA8KQ,eAAgB,CAChB,cAAe,CACf,oBAAqB,CACrB,aApWQ,CAqWR,cAAe,CAlLvB,qCAqLY,aAvWI,CAkLhB,yCA2LQ,cAAe,CACf,WAAY,CA5LpB,+CA+LY,SAAU,CA/LtB,+CAmMY,eAAgB,CAChB,SAAU,CApMtB,6CAyMQ,YAAa,CACb,kBAAmB,CACnB,wBAAyB,CA3MjC,qCA+MQ,WAAY,CACZ,eAAgB,CAhNxB,2BAoNQ,eAAgB,CApNxB,mCAwNQ,UAAW,CACX,WAAY,CACf,WAID,gBAAiB,CACpB,SAGG,YAAa,CACb,WAAY,CACZ,YAAa,CACb,wBA5ZY,CA6ZZ,cAAe,CACf,2BAA4B,CANhC,WASQ,WAAY,CACZ,QAAS,CAVjB,eAcQ,iBAAkB,CAClB,sBA/ZM,CAgaN,aAraW,CAsaX,cAAe,CACf,cAAe,CACf,iBAAkB,CAClB,qBAAsB,CACtB,WAAY,CACZ,iBAAkB,CAtB1B,qBA0BY,wBAzaY,CA+YxB,kBA+BQ,kBAAmB,CACnB,kBAAmB,CACnB,iBAAkB,CAClB,cAAe,CAlCvB,2BAsCY,cAAe,CACf,eAAgB,CAChB,eAAgB,CAChB,kBAAmB,CAzC/B,2BA6CY,YAAa,CACb,iBAAkB,CAClB,OAAQ,CACR,WAAY,CACZ,kBAAmB,CAEnB,SAAU,CAnDtB,iCAuDY,aAAc,CAvD1B,iBA6DQ,gBAAiB,CACjB,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CAlExB,qBAqEY,YAAa,CArEzB,uBAwEgB,cAAe,CACf,kBAAmB,CAzEnC,oBAiFQ,eAAgB,CAChB,cAAe,CACf,cAAe,CACf,WAAY,CACZ,aAzeQ,CAoZhB,0BAwFY,aA3eI,CAmZhB,mBA6FQ,gBAAiB,CACjB,eAAgB,CAChB,cAAe,CACf,iBAAkB,CAhG1B,mBAoGQ,wBA1fQ,CA2fR,cAAe,CACf,iBAAkB,CAClB,WAAY,CAvGpB,sBA0GY,iBAAkB,CA1G9B,kBAgHQ,eAAgB,CAChB,eAAgB,CAChB,iBAAkB,CAClB,cAAe,CACf,aAzgBW,CA0gBX,wBA3gBQ,CA4gBR,kBAAmB,CACnB,kBAAmB,CAvH3B,kBA2HQ,YAAa,CACb,kBAAmB,CA5H3B,0BA+HY,UAAW,CA/HvB,2BAmIY,UAAW,CACX,iBAAkB,CApI9B,kBA2IQ,WAAY,CA3IpB,mBA+IQ,gBAAiB,CACjB,eAAgB,CAChB,eAAgB,CAChB,kBAAmB,CAlJ3B,iBAsJQ,YAAa,CACb,cAAe,CACf,QAAS,CACT,eAAgB,CAChB,uBAAwB,CA1JhC,oBA6JY,iBAAkB,CA7J9B,WAkKQ,eAAgB,CAChB,cAAe,CACf,oBAAqB,CACrB,aAzjBQ,CA0jBR,cAAe,CAtKvB,iBAyKY,aA5jBI,CA6jBP,YAKL,YAAa,CACb,WAAY,CACZ,YAAa,CACb,wBA1kBY,CAskBhB,sBAOQ,QAAS,CACT,cAAe,CACf,eAAgB,CAChB,gBAAiB,CACjB,WAAY,CAXpB,oBAeQ,QAAS,CACT,iBAAkB,CAClB,cAAe,CACf,eAAgB,CAChB,WAAY,CACZ,iBAAkB,CApB1B,qBAwBQ,iBAAkB,CAClB,QAAS,CACT,iBAAkB,CAClB,cAAe,CACf,aA9lBQ,CA+lBR,eAAgB,CAChB,WAAY,CACZ,cAAe,CA/BvB,2BAkCY,aAnmBI,CAikBhB,qBAuCQ,QAAS,CACT,WAAY,CACZ,gBAAiB,CAzCzB,sBA6CQ,WAAY,CA7CpB,yBAiDQ,WAAY,CAjDpB,uBAqDQ,WAAY,CACZ,eAAgB,CAtDxB,sBA0DQ,cAAe,CACf,eAAgB,CAChB,UAAW,CA5DnB,uBAkEQ,WAAY,CACZ,iBAAkB,CAClB,eAAgB,CApExB,sBAwEQ,cAAe,CACf,WAAY,CACZ,iBAAkB,CAClB,cAAe,CACf,kBAAmB,CACnB,kBAAmB,CACtB,UAID,WAAY,CACZ,YAAa,CACb,+BAxpBY,CAypBf,QAGG,iBAAkB,CAClB,cAAe,CACf,iBAAkB,CAClB,mBAAoB,CACpB,wBAjqBY,CAkqBZ,aAjqBY,CA2pBhB,WASQ,aApqBQ,CAqqBR,wBArqBQ,CAuqBX,aAID,cAAe,CACf,WAAY,CACZ,WAAY,CACZ,cAAe,CACf,iBAAkB,CALtB,sBAQQ,kBAAmB,CACnB,UAAW,CACX,WAAY,CACZ,aArrBQ,CAsrBR,qCAlrBwB,CAmrBxB,iBAAkB,CAClB,wBAxrBQ,CAyrBX,QAID,YAAa,CACb,YAAa,CACb,wBAhsBY,CAisBZ,aA9rBY,CA+rBZ,aAAc,CACd,WAAY,CACZ,sBAAuB,CACvB,kBAAmB,CACtB,WAGG,WAAY,CACZ,eAAgB,CAChB,WAAY,CAHhB,uBAMQ,eAAgB,CAChB,gBAAiB,CACjB,cAAe,CACf,4BAA6B,CATrC,6BAYY,wBAjtBI,CAqsBhB,0BAkBQ,eAAgB,CAChB,gBAAiB,CAnBzB,qBAuBQ,SAAU,CACV,YAAa,CAxBrB,uBA4BQ,eAAgB,CAChB,QAAS,CACT,WAAY,CACZ,aApuBQ,CAquBR,cAAe,CACf,cAAe,CACf,eAAgB,CAlCxB,6BAqCY,aAzuBI,CAosBhB,aA0CQ,WAAY,CACZ,QAAS,CACT,WAAY,CACZ,eAAgB,CACnB,qCASD,UACI,WAAY,CADhB,iBAIQ,WAAY,CACf,YAID,WAAY,CACZ,cAAe,CAClB,WAGG,WAAY,CACZ,cAAe,CAClB,WAGG,aAAc,CACd,WAAY,CACZ,cAAe,CACf,wBAAyB,CAJ7B,oBAOQ,WAAY,CAPpB,6BAUY,eAAgB,CAChB,eAAgB,CAX5B,uBAgBQ,qBAAsB,CAhB9B,oBAoBQ,cAAe,CApBvB,aAwBQ,cAAe,CAxBvB,qBA4BQ,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CA9BxB,qBAkCQ,eAAgB,CAChB,cAAe,CAnCvB,sBAuCQ,cAAe,CACf,eAAgB,CAxCxB,8BA2CY,cAAe,CA3C3B,qBAgDQ,eAAgB,CAChB,cAAe,CACf,eAAgB,CAlDxB,mBAsDQ,cAAe,CAtDvB,mBA0DQ,gBAAiB,CACjB,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,eAAgB,CACnB,SAID,aAAc,CACd,WAAY,CACZ,cAAe,CACf,wBAAyB,CAJ7B,eAOQ,cAAe,CACf,eAAgB,CAChB,WAAY,CATpB,kBAaQ,WAAY,CAbpB,2BAgBY,eAAgB,CAChB,eAAgB,CAChB,iBAAkB,CAlB9B,qBAuBQ,qBAAsB,CAvB9B,kBA2BQ,cAAe,CACf,eAAgB,CAChB,eAAgB,CA7BxB,WAiCQ,cAAe,CAjCvB,mBAqCQ,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CAvCxB,mBA2CQ,eAAgB,CAChB,cAAe,CA5CvB,oBAgDQ,cAAe,CACf,eAAgB,CAjDxB,4BAoDY,cAAe,CApD3B,mBAyDQ,eAAgB,CAChB,cAAe,CACf,eAAgB,CA3DxB,iBA+DQ,cAAe,CA/DvB,iBAmEQ,gBAAiB,CACjB,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,eAAgB,CACnB,OAID,WAAY,CACZ,wBAAyB,CAF7B,iBAKQ,WAAY,CACZ,aAAc,CACjB,QAID,oCAAqC,CACrC,WAAY,CACZ,cAAe,CACf,OAAQ,CACR,gBAAiB,CALrB,cAQQ,cAAe,CACf,gBAAiB,CATzB,kBAaQ,WAAY,CACZ,cAAe,CAdvB,sBAiBY,eAAgB,CAChB,gBAAiB,CAlB7B,4BAsBY,iBAAkB,CAClB,WAAY,CACZ,YAAa,CACb,cAAe,CAEf,OAAQ,CACR,kBAAmB,CA5B/B,qCAgCgB,cAAe,CACf,WAAY,CAjC5B,8BAqCgB,UAAW,CACX,WAAY,CAtC5B,kCA2CY,YAAa,CA3CzB,4BA+CY,cAAe,CACf,cAAe,CACf,eAAgB,CAChB,eAAgB,CACnB,WAKL,WAAY,CADhB,wBAIQ,eAAgB,CAJxB,+BAOY,YAAa,CACb,WAAY,CARxB,uFAYgB,WAAY,CAZ5B,mCAiBY,YAAa,CACb,6BAA8B,CAC9B,WAAY,CAnBxB,qCAsBgB,WAAY,CACZ,cAAe,CACf,gBAAiB,CAxBjC,0CA4BgB,cAAe,CACf,cAAe,CACf,gBAAiB,CACjB,iBAAkB,CAClB,WAAY,CAhC5B,iCAqCY,eAAgB,CArC5B,iBA0CQ,cAAe,CA1CvB,mBA8CQ,WAAY,CA9CpB,uBAkDQ,eAAgB,CAChB,eAAgB,CAnDxB,mBAuDQ,iBAAkB,CAClB,cAAe,CAxDvB,oBA4DQ,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CACnB,YAID,aAAc,CACd,WAAY,CACZ,WAAY,CAHhB,sBAMQ,WAAY,CANpB,sBAUQ,cAAe,CACf,WAAY,CAXpB,oBAeQ,cAAe,CACf,WAAY,CACZ,eAAgB,CAjBxB,qBAqBQ,eAAgB,CAChB,UAAW,CACX,WAAY,CACZ,cAAe,CAxBvB,yBA4BQ,WAAY,CA5BpB,uBAgCQ,WAAY,CACZ,eAAgB,CAjCxB,sBAqCQ,cAAe,CArCvB,uBAyCQ,WAAY,CAzCpB,sBA6CQ,WAAY,CACZ,eAAgB,CAChB,cAAe,CACf,iBAAkB,CACrB,UAID,gBAAiB,CACjB,WAAY,CAFhB,kBAKQ,WAAY,CALpB,oBAQY,cAAe,CAR3B,mBAaQ,iBAAkB,CAb1B,4BAgBY,iBAAkB,CAClB,eAAgB,CAChB,eAAgB,CAlB5B,6BAsBY,eAAgB,CAChB,eAAgB,CAvB5B,yBA4BQ,cAAe,CA5BvB,gCAiCQ,cAAe,CACf,cAAe,CACf,cAAe,CAnCvB,qBAuCQ,cAAe,CAvCvB,mBA2CQ,eAAgB,CAChB,cAAe,CACf,iBAAkB,CA7C1B,sBAiDQ,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CAChB,cAAe,CACf,iBAAkB,CAtD1B,+BA2DQ,cAAe,CAClB,UAID,WAAY,CACf,QAGG,iBAAkB,CAClB,cAAe,CAClB,aAGG,UAAW,CACd,QAGG,WAAY,CACZ,YAAa,CAChB,WAGG,WAAY,CACZ,eAAgB,CAFpB,uBAKQ,cAAe,CACf,iBAAkB,CAN1B,0BAUQ,cAAe,CACf,iBAAkB,CAX1B,qBAeQ,SAAU,CACV,aAAc,CAhBtB,uBAoBQ,cAAe,CACf,QAAS,CACT,WAAY,CACZ,cAAe,CAvBvB,aA2BQ,cAAe,CACf,UAAW,CACX,WAAY,CACf",sourcesContent:["$color10: #323769;\r\n$color11: #2D3250;\r\n$color13: #7077A1;\r\n$color14: whitesmoke;\r\n$color15: #f6b17a;\r\n$color16: #ffd2ae;\r\n$color17: rgb(222, 226, 255);\r\n$color7: rgba(18, 16, 62, 0.635);\r\n$color8: rgb(18, 17, 58);\r\n\r\n.hrGenre {\r\n    padding-top: 10px;\r\n    width: 1300px;\r\n    margin: auto;\r\n    border-bottom: 1px solid $color15;\r\n}\r\n\r\n.average {\r\n    color: transparent;\r\n    display: none;\r\n}\r\n\r\n.detailMain,\r\n.movieMain,\r\n.movieMain2 {\r\n    margin: auto;\r\n    width: 1300px;\r\n    padding: 30px 30px 5px 30px;\r\n    background-color: $color10;\r\n\r\n    .detailMov {\r\n        display: flex;\r\n\r\n        .cover {\r\n            position: relative;\r\n            cursor: pointer;\r\n\r\n            .dropImg {\r\n                display: none;\r\n                position: absolute;\r\n                top: 0px;\r\n                min-width: 500px;\r\n                z-index: 1;\r\n            }\r\n\r\n            &:hover .dropImg {\r\n                display: block;\r\n            }\r\n        }\r\n\r\n        .movieTitle {\r\n            text-align: center;\r\n            font-size: 28px;\r\n            font-weight: 600;\r\n            padding: 20px;\r\n            color: $color17;\r\n        }\r\n\r\n        .divGenre {\r\n            display: block;\r\n\r\n            .genres {\r\n                display: flex;\r\n                padding: 10px 30px;\r\n                width: 760px;\r\n                overflow: hidden;\r\n\r\n                p {\r\n                    margin: 0px;\r\n                    color: $color14;\r\n                    font-size: 20px;\r\n                    padding: 5px;\r\n                }\r\n\r\n                span {\r\n                    margin: 0px;\r\n                    padding: 5px 5px 5px 120px;\r\n                    font-size: 20px;\r\n                    color: $color14;\r\n                    width: 300px;\r\n                    vertical-align: bottom;\r\n                }\r\n            }\r\n        }\r\n\r\n        .description,\r\n        .review {\r\n            font-size: 22px;\r\n            padding: 30px;\r\n            color: $color14;\r\n            width: 760px;\r\n            text-align: justify;\r\n        }\r\n\r\n        .review {\r\n            padding: 10px 30px;\r\n            margin: 0px;\r\n\r\n\r\n            .moreLink {\r\n                color: $color15;\r\n                cursor: pointer;\r\n\r\n\r\n                &:hover {\r\n                    color: $color16;\r\n                }\r\n            }\r\n\r\n            a {\r\n                color: #42d3e7;\r\n            }\r\n        }\r\n\r\n        .writer,\r\n        .writer2,\r\n        .goofs {\r\n            padding: 5px 30px 5px 30px;\r\n            width: 760px;\r\n            font-size: 20px;\r\n            margin: 0px;\r\n        }\r\n\r\n        .writer2 {\r\n            text-align: right;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .office {\r\n            padding: 5px 10px 5px 30px;\r\n            background-color: $color11;\r\n            font-size: 21px;\r\n            border-radius: 5px;\r\n            width: 230px;\r\n            color: $color16;\r\n        }\r\n\r\n        .goofs {\r\n            font-size: 17px;\r\n            text-align: justify;\r\n\r\n            a {\r\n                color: #42d3e7;\r\n            }\r\n        }\r\n\r\n        .casting {\r\n            display: flex;\r\n            flex-direction: row;\r\n            padding-left: 30px;\r\n            width: 760px;\r\n            font-size: 20px;\r\n\r\n            img {\r\n                margin: 10px;\r\n                border-radius: 7px;\r\n                box-shadow: 0px 0px 6px 3px $color13;\r\n            }\r\n\r\n            p {\r\n                margin: 0px;\r\n                padding: 20px;\r\n                color: $color14;\r\n            }\r\n\r\n            .actorName {\r\n                color: $color15;\r\n                cursor: pointer;\r\n                font-weight: 500;\r\n                font-size: 20px;\r\n\r\n                &:hover {\r\n                    color: $color16;\r\n                }\r\n            }\r\n        }\r\n\r\n        .sugestion {\r\n            display: flex;\r\n            flex-direction: row;\r\n\r\n            .screen {\r\n                padding: 10px 20px;\r\n\r\n                .morePic {\r\n                    font-weight: 500;\r\n                    color: $color15;\r\n                    font-size: 18px;\r\n                    cursor: pointer;\r\n\r\n                    &:hover {\r\n                        color: $color16;\r\n                    }\r\n                }\r\n\r\n                p {\r\n                    color: $color14;\r\n                }\r\n\r\n                .image {\r\n                    border-radius: 8px;\r\n                }\r\n\r\n                .imgMedium {\r\n                    width: 310px;\r\n                }\r\n\r\n                .screenImg {\r\n                    margin-top: 10px;\r\n                    position: relative;\r\n                    cursor: pointer;\r\n\r\n                    .fullScreen {\r\n                        position: absolute;\r\n                        left: 280px;\r\n                        top: -43px;\r\n                        background-color: rgba(129, 161, 225, 0.455);\r\n                        border-radius: 3px;\r\n                    }\r\n\r\n                    .dropScreen {\r\n                        display: none;\r\n                        position: absolute;\r\n                        min-width: 1280px;\r\n                        top: -10px;\r\n                        left: -540px;\r\n                        border: 1px solid $color15;\r\n                        border-radius: 10px;\r\n                        z-index: 1;\r\n                    }\r\n\r\n                    &:hover .dropScreen {\r\n                        display: block;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .torrent {\r\n                margin: 10px 20px;\r\n                font-size: 15px;\r\n                width: 350px;\r\n                background-color: $color11;\r\n                color: $color14;\r\n                border-collapse: collapse;\r\n                border-radius: 8px;\r\n\r\n                td {\r\n                    text-align: center;\r\n                    padding: 5px 10px;\r\n                }\r\n\r\n                a,\r\n                .pictureButt {\r\n                    text-decoration: none;\r\n                    cursor: pointer;\r\n                    padding: 10px 20px;\r\n                    color: $color14;\r\n                    background-color: #009966;\r\n                    border-radius: 8px;\r\n                    text-align: center;\r\n\r\n                    &:hover {\r\n                        background-color: #46CB18;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .freeMovie {\r\n            display: flex;\r\n            width: 500px !important;\r\n            padding: 3px 10px;\r\n\r\n            p {\r\n                margin: 0px;\r\n                padding: 5px 10px 5px 20px;\r\n                vertical-align: bottom;\r\n                font-size: 20px;\r\n            }\r\n\r\n            .actorName {\r\n                padding: 5px 10px 5px 20px;\r\n                color: $color15;\r\n                cursor: pointer;\r\n                font-size: 20px;\r\n                font-weight: 500;\r\n\r\n\r\n                &:hover {\r\n                    color: $color16;\r\n                }\r\n            }\r\n\r\n            .freeImg {\r\n                border-radius: 50%;\r\n                max-width: unset;\r\n                height: 100px !important;\r\n                width: 100px !important;\r\n                display: block;\r\n                aspect-ratio: 1 / 1;\r\n                object-fit: cover;\r\n                object-position: center top;\r\n                padding: 5px;\r\n                cursor: pointer;\r\n                opacity: 0;\r\n                filter: blur(4px);\r\n                animation: fadeBlurIn 1.2s ease-out forwards;\r\n\r\n            }\r\n\r\n            @keyframes fadeBlurIn {\r\n                0% {\r\n                    opacity: 0;\r\n                    filter: blur(8px);\r\n                }\r\n\r\n                100% {\r\n                    opacity: 1;\r\n                    filter: blur(0);\r\n                }\r\n            }\r\n\r\n            .largeImg {\r\n                display: none;\r\n                cursor: pointer;\r\n            }\r\n\r\n            .largeImgOpen {\r\n\r\n                display: flex;\r\n                position: fixed;\r\n                justify-content: center;\r\n                z-index: 1;\r\n                right: 420px;\r\n                top: 220px;\r\n                cursor: pointer;\r\n\r\n                .image {\r\n                    width: 550px;\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n        .character-grid {\r\n            width: 500px !important;\r\n            padding: 3px 10px;\r\n\r\n\r\n            .character-item {\r\n                display: flex;\r\n\r\n\r\n\r\n                .actorName {\r\n                    padding: 30px 10px 2px 20px;\r\n                    color: $color15;\r\n                    cursor: pointer;\r\n\r\n                    font-weight: 500;\r\n\r\n                    font-size: 22px;\r\n\r\n                    text-align: left;\r\n                    max-width: 300px;\r\n                    word-wrap: break-word;\r\n\r\n\r\n                    &:hover {\r\n                        color: $color16;\r\n                    }\r\n                }\r\n\r\n                .actorNoPic {\r\n                    padding: 30px 10px 2px 20px;\r\n                    font-size: 22px;\r\n                    text-align: left;\r\n                    font-weight: 500;\r\n                }\r\n\r\n                p {\r\n                    margin: 0px;\r\n                    padding: 2px 10px 2px 20px;\r\n                    text-align: left;\r\n\r\n                    font-size: 20px;\r\n                }\r\n\r\n\r\n                .avatar-img {\r\n                    margin: 10px;\r\n                    width: 100px;\r\n                    height: 100px;\r\n                    border-radius: 50%;\r\n                    aspect-ratio: 1 / 1;\r\n                    object-fit: cover;\r\n                    object-position: top;\r\n                    cursor: pointer;\r\n                    padding: 1px;\r\n                    opacity: 0;\r\n                    filter: blur(4px);\r\n                    animation: fadeInAvatar 1.2s ease-out forwards;\r\n\r\n                    &:hover {\r\n                        background-color: $color15;\r\n                    }\r\n                }\r\n\r\n                @keyframes fadeInAvatar {\r\n                    0% {\r\n                        opacity: 0;\r\n                        filter: blur(8px);\r\n                    }\r\n\r\n                    100% {\r\n                        opacity: 1;\r\n                        filter: blur(0);\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        .lightbox {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(10, 10, 10, 0.85);\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            z-index: 999;\r\n            animation: fadeInBg 0.4s ease-in;\r\n        }\r\n\r\n        .lightbox-img {\r\n            max-width: 80%;\r\n            max-height: 80%;\r\n            border-radius: 8px;\r\n            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);\r\n            animation: zoomIn 0.4s ease-in;\r\n        }\r\n\r\n        @keyframes fadeInBg {\r\n            from {\r\n                background-color: rgba(10, 10, 10, 0);\r\n            }\r\n\r\n            to {\r\n                background-color: rgba(10, 10, 10, 0.85);\r\n            }\r\n        }\r\n\r\n        @keyframes zoomIn {\r\n            from {\r\n                transform: scale(0.7);\r\n                opacity: 0;\r\n            }\r\n\r\n            to {\r\n                transform: scale(1);\r\n                opacity: 1;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    .iframe {\r\n        margin-top: 20px;\r\n        width: 500px;\r\n        height: 310px;\r\n        border: 0px;\r\n    }\r\n\r\n    .sugestionMain {\r\n        margin-top: 20px;\r\n        display: flex;\r\n        color: $color14;\r\n\r\n        .image {\r\n            width: 370px;\r\n            padding: 5px 30px;\r\n\r\n            img {\r\n                border-radius: 8px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .holder {\r\n        width: 230px;\r\n\r\n        .dropdownM {\r\n            position: relative;\r\n            display: inline-block;\r\n            cursor: pointer;\r\n\r\n            .dropImg {\r\n                width: 230px;\r\n                height: 345px;\r\n            }\r\n\r\n            .dropdown-contentM {\r\n                display: none;\r\n                text-align: center;\r\n                position: absolute;\r\n                width: 230px;\r\n                height: 335px;\r\n                top: 0px;\r\n                vertical-align: bottom;\r\n                cursor: pointer;\r\n                color: $color14;\r\n                justify-content: end;\r\n                flex-direction: column;\r\n                text-align: center;\r\n                padding-bottom: 10px;\r\n                background-image: linear-gradient($color7, $color8);\r\n\r\n                p {\r\n                    font-size: 18px;\r\n                    margin: 0px;\r\n                    padding: 2px;\r\n                }\r\n            }\r\n\r\n            &:hover .dropdown-contentM {\r\n                display: flex;\r\n            }\r\n        }\r\n\r\n        .titleLong {\r\n            text-align: center;\r\n            color: $color15;\r\n            font-size: 20px;\r\n            padding: 10px 5px;\r\n            font-weight: 500;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                color: $color16;\r\n            }\r\n        }\r\n    }\r\n\r\n    .similar {\r\n        font-size: 20px;\r\n        padding-top: 30px;\r\n        padding-left: 0px;\r\n    }\r\n}\r\n\r\n.movieMain {\r\n    padding: 10px 25px;\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: auto auto auto auto auto;\r\n\r\n    p {\r\n        font-size: 22px;\r\n    }\r\n\r\n    .actorName {\r\n        padding-top: 20px;\r\n        color: $color15;\r\n        cursor: pointer;\r\n        font-size: 22px;\r\n        font-weight: 500;\r\n\r\n\r\n        &:hover {\r\n            color: $color16;\r\n        }\r\n    }\r\n}\r\n\r\n.movieMain2 {\r\n    padding: 10px 25px;\r\n    display: grid;\r\n    gap: 30px;\r\n    grid-template-columns: auto auto;\r\n}\r\n\r\n.movieNum {\r\n    margin: auto;\r\n    display: flex;\r\n    width: 1300px;\r\n    overflow-x: auto;\r\n\r\n    .numb {\r\n        padding: 8px 10px;\r\n        text-align: center;\r\n        font-size: 20px;\r\n        color: $color15;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            color: $color16;\r\n        }\r\n\r\n        &:active {\r\n            color: $color13;\r\n        }\r\n    }\r\n\r\n    .numbAct {\r\n        text-align: center;\r\n        padding: 8px 10px;\r\n        font-size: 20px;\r\n        background-color: $color13;\r\n        border-radius: 5px;\r\n        color: $color14;\r\n    }\r\n}\r\n\r\n.movieGenre {\r\n    padding: 5px;\r\n    margin: auto;\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto auto auto auto auto auto;\r\n    width: 1300px;\r\n\r\n    .genreName,\r\n    .timeGenre {\r\n        padding: 2px 10px;\r\n        text-align: center;\r\n        font-weight: 500;\r\n        font-size: 22px;\r\n        cursor: pointer;\r\n        color: $color15;\r\n\r\n        &:hover {\r\n            color: $color16;\r\n        }\r\n    }\r\n\r\n    .timeGenre {\r\n        color: $color14;\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n\r\n    .hrGenre {\r\n        width: 355px;\r\n    }\r\n\r\n    .detailMain,\r\n    .movieMain,\r\n    .movieMain2 {\r\n        width: 355px;\r\n        padding: 0px;\r\n\r\n        .detailMov {\r\n            display: block;\r\n\r\n            .cover {\r\n\r\n                .dropImg {\r\n                    min-width: 355px;\r\n                    top: 0px;\r\n                }\r\n            }\r\n\r\n            .movieTitle {\r\n                text-align: center;\r\n                font-size: 20px;\r\n                padding: 15px;\r\n            }\r\n\r\n            .divGenre {\r\n                display: flex;\r\n\r\n                .genres {\r\n                    display: block;\r\n                    padding: 5px 10px;\r\n                    width: 355px;\r\n\r\n                    p {\r\n                        margin: 0px;\r\n                        color: $color14;\r\n                        font-size: 15px;\r\n                        padding: 3px;\r\n                    }\r\n\r\n                    span {\r\n                        margin: 0px;\r\n                        padding: 3px 3px 3px 3px;\r\n                        width: 230px;\r\n                        font-size: 15px;\r\n                        color: $color14;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .description,\r\n            .review {\r\n                font-size: 18px;\r\n                padding: 10px;\r\n                color: $color14;\r\n                width: 355px;\r\n            }\r\n\r\n            .review {\r\n                padding: 5px 10px;\r\n            }\r\n\r\n            .writer,\r\n            .goofs {\r\n                padding: 5px 10px 5px 10px;\r\n                width: 355px;\r\n                font-size: 16px;\r\n            }\r\n\r\n            .office {\r\n                padding: 5px 5px 5px 10px;\r\n                font-size: 17px;\r\n            }\r\n\r\n            .goofs {\r\n                font-size: 14px;\r\n            }\r\n\r\n            .casting {\r\n                display: flex;\r\n                flex-direction: row;\r\n                padding-left: 20px;\r\n                width: 355px;\r\n                font-size: 16px;\r\n\r\n                p {\r\n                    margin: 2px;\r\n                    padding: 10px;\r\n                }\r\n\r\n                .actorName {\r\n                    color: $color15;\r\n                    cursor: pointer;\r\n                    font-size: 14px;\r\n\r\n\r\n                }\r\n            }\r\n\r\n            .sugestion {\r\n                display: block;\r\n                flex-direction: row;\r\n\r\n                .screen {\r\n                    padding: 10px 30px;\r\n\r\n                    p {\r\n                        color: $color14;\r\n                    }\r\n\r\n                    .image {\r\n                        border-radius: 8px;\r\n                    }\r\n\r\n                    .screenImg {\r\n                        margin-top: 10px;\r\n                        position: relative;\r\n                        cursor: pointer;\r\n\r\n                        .fullScreen {\r\n                            left: 270px;\r\n                        }\r\n\r\n                        .dropScreen {\r\n                            display: none;\r\n                            position: absolute;\r\n                            min-width: 355px;\r\n                            top: -5px;\r\n                            left: -30px;\r\n                            border-radius: 3px;\r\n                            z-index: 1;\r\n                        }\r\n\r\n                        &:hover .dropScreen {\r\n                            display: block;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .torrent {\r\n                    margin: 10px 30px;\r\n                    font-size: 12px;\r\n                    width: 295px;\r\n\r\n                    td {\r\n                        text-align: center;\r\n                        padding: 2px 5px;\r\n                    }\r\n\r\n                    a,\r\n                    .pictureButt {\r\n                        padding: 5px 15px;\r\n                        border-radius: 8px;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .freeMovie {\r\n                display: flex;\r\n                width: 355px !important;\r\n                padding: 5px 10px;\r\n\r\n                p {\r\n                    padding: 2px 10px 2px 10px;\r\n                    vertical-align: bottom;\r\n                    font-size: 18px;\r\n                }\r\n\r\n                .actorName {\r\n                    padding: 5px 10px 5px 10px;\r\n                    color: $color15;\r\n                    cursor: pointer;\r\n                    font-size: 18px;\r\n\r\n                    &:hover {\r\n                        color: $color16;\r\n                    }\r\n                }\r\n\r\n                .freeImg {\r\n                    width: 120px;\r\n                }\r\n            }\r\n\r\n            .character-grid {\r\n                width: 355px !important;\r\n                padding: 3px 10px;\r\n\r\n                .character-item {\r\n                    display: flex;\r\n\r\n                    .actorName {\r\n                        padding: 22px 10px 2px 20px;\r\n                        font-size: 18px;\r\n                    }\r\n\r\n                    .actorNoPic {\r\n                        padding: 22px 10px 2px 20px;\r\n                        font-size: 18px;\r\n                        text-align: left;\r\n\r\n                    }\r\n\r\n                    p {\r\n                        font-size: 16px;\r\n                    }\r\n\r\n                    .avatar-img {\r\n                        width: 75px;\r\n                        height: 75px;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .iframe {\r\n                margin-top: 15px;\r\n                width: 355px;\r\n                height: 209px;\r\n            }\r\n        }\r\n\r\n        .holder {\r\n            width: 160px;\r\n\r\n            .dropdownM {\r\n\r\n                .dropImg {\r\n                    width: 160px;\r\n                    height: 240px;\r\n                }\r\n\r\n                .dropdown-contentM {\r\n                    width: 160px;\r\n                    height: 233px;\r\n                    overflow: hidden;\r\n\r\n                    p {\r\n                        font-size: 12px;\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            .titleLong {\r\n                font-size: 16px;\r\n                padding: 5px 3px;\r\n            }\r\n        }\r\n\r\n        .similar {\r\n            font-size: 16px;\r\n            padding-top: 10px;\r\n            padding-left: 10px;\r\n        }\r\n\r\n    }\r\n\r\n    .movieMain {\r\n        padding: 10px 10px;\r\n        gap: 15px;\r\n        grid-template-columns: auto auto;\r\n    }\r\n\r\n    .movieNum {\r\n        margin: auto;\r\n        display: flex;\r\n        width: 355px;\r\n        overflow-x: auto;\r\n\r\n        .numb {\r\n            padding: 6px 10px;\r\n            font-size: 15px;\r\n        }\r\n\r\n        .numbAct {\r\n            padding: 6px 10px;\r\n            font-size: 15px;\r\n        }\r\n    }\r\n\r\n    .movieGenre {\r\n        margin: auto;\r\n        display: grid;\r\n        grid-template-columns: auto auto auto auto auto;\r\n        width: 355px;\r\n        height: 130px;\r\n\r\n        .genreName,\r\n        .timeGenre {\r\n            padding: 2px;\r\n            text-align: center;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .timeGenre {\r\n            color: $color14;\r\n        }\r\n    }\r\n}","@import '../scss/_movie';\r\n\r\n$color1: #323769;\r\n$color2: #2D3250;\r\n$color3: #7077A1;\r\n$color4: whitesmoke;\r\n$color5: #f6b17a;\r\n$color6: #ffd2ae;\r\n$color7: rgba(18, 16, 62, 0.635);\r\n$color8: rgb(18, 17, 58);\r\n$color9: green;\r\n$color10: rgb(5, 175, 5);\r\n\r\n@font-face {\r\n    font-family: mainFont;\r\n    src: url(\"../../public/assets/Antic-Regular.ttf\");\r\n}\r\n\r\nbody {\r\n    background-color: $color2;\r\n    font-family: mainFont;\r\n    font-weight: lighter;\r\n    color: $color4;\r\n}\r\n\r\n.average {\r\n    color: transparent;\r\n    display: none;\r\n}\r\n\r\n.provider {\r\n    margin: auto;\r\n    width: 1300px;\r\n\r\n    .fixed {\r\n        position: fixed;\r\n        width: 1300px;\r\n        height: 50px;\r\n        background-color: $color3;\r\n        z-index: 2;\r\n    }\r\n}\r\n\r\n.navigation {\r\n    margin: auto;\r\n    display: flex;\r\n    width: 1300px;\r\n\r\n    .search {\r\n        display: flex;\r\n    }\r\n}\r\n\r\n.home {\r\n    width: 1300px;\r\n    margin: auto;\r\n}\r\n\r\n.place {\r\n    margin: auto;\r\n    width: 1300px;\r\n    height: 600px;\r\n    padding: 80px 10px 10px 10px;\r\n    justify-content: center;\r\n    background-color: $color1;\r\n\r\n    .placeBut {\r\n        display: flex;\r\n        justify-content: space-around;\r\n\r\n        .paper {\r\n            width: 240px;\r\n            height: 42px;\r\n            margin: 4px;\r\n\r\n            .base {\r\n                padding-left: 8px;\r\n                width: 140px;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.guestCast {\r\n    margin: auto;\r\n    width: 1300px;\r\n    text-align: left;\r\n    padding: 7px 10px;\r\n    background-color: #7077A1;\r\n    font-size: 20px;\r\n}\r\n\r\n.gridTv {\r\n    margin: auto;\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto auto auto;\r\n    width: 1300px;\r\n    gap: 20px;\r\n    background-color: $color1;\r\n    font-size: 18px;\r\n    padding: 20px 18px;\r\n\r\n    .time {\r\n        margin: 0;\r\n        font-size: 22px;\r\n        padding: 3px 25px;\r\n        color: $color4;\r\n    }\r\n\r\n    .gridItem {\r\n        max-width: 194px;\r\n        text-align: center;\r\n        position: relative;\r\n\r\n        img {\r\n            min-width: 194px;\r\n            min-height: 272px;\r\n            cursor: pointer;\r\n        }\r\n\r\n        .genresTv {\r\n            position: absolute;\r\n            width: 194px;\r\n            height: 273px;\r\n            font-size: 18px;\r\n            color: $color4;\r\n            top: 0px;\r\n            display: none;\r\n            text-align: center;\r\n            flex-direction: column;\r\n            padding: 0px;\r\n            justify-content: end;\r\n            padding-bottom: 10px;\r\n            background-image: linear-gradient($color7, $color8);\r\n            cursor: pointer;\r\n\r\n            .episode {\r\n                font-weight: 400;\r\n                font-size: 20px;\r\n                padding: 5px;\r\n            }\r\n\r\n            p {\r\n\r\n                margin: 0px;\r\n                padding: 2px;\r\n            }\r\n        }\r\n\r\n        &:hover .genresTv {\r\n            display: flex;\r\n        }\r\n\r\n        .showName {\r\n            max-width: 194px;\r\n            font-size: 20px;\r\n            font-weight: 500;\r\n            cursor: pointer;\r\n            margin: 0;\r\n            padding: 10px 5px;\r\n            color: $color5;\r\n\r\n            &:hover {\r\n                color: $color6;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.searchMain {\r\n    margin: auto;\r\n    padding-top: 10px;\r\n    width: 1300px;\r\n    height: 1400px;\r\n    font-size: 26px;\r\n    color: $color4;\r\n    text-shadow: 2px 2px 5px gray;\r\n    text-align: center;\r\n    background-color: $color1;\r\n\r\n    p {\r\n        margin: 0;\r\n    }\r\n}\r\n\r\n.showMain,\r\n.showActor {\r\n    padding-top: 2px;\r\n    margin: auto;\r\n    width: 1300px;\r\n    background-color: $color1;\r\n    font-size: 18px;\r\n    padding: 50px 10px 10px 10px;\r\n\r\n    .borderBotom {\r\n        border-bottom: 1px solid $color2;\r\n\r\n        p {\r\n            margin: 2px;\r\n        }\r\n    }\r\n\r\n    .wrap {\r\n        color: $color5;\r\n        font-size: 18px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            color: $color6;\r\n        }\r\n    }\r\n\r\n    .sezone {\r\n        padding-left: 6px;\r\n        font-size: 18px;\r\n        width: 400px;\r\n        max-width: 400px;\r\n        max-height: 80px;\r\n        overflow-x: auto;\r\n\r\n        p {\r\n            margin: 3px 0px;\r\n        }\r\n    }\r\n\r\n    .bigImg {\r\n        width: 1280px;\r\n        text-align: center;\r\n\r\n        p {\r\n            font-size: 20px;\r\n        }\r\n    }\r\n\r\n    .clickShow {\r\n        font-weight: 500;\r\n        font-size: 26px;\r\n        cursor: pointer;\r\n        width: 300px;\r\n        color: $color5;\r\n\r\n        &:hover {\r\n            color: $color6;\r\n        }\r\n    }\r\n\r\n    .showCast {\r\n        font-size: 20px;\r\n        border-bottom: 2px solid $color2;\r\n        background-color: #cccccc;\r\n    }\r\n\r\n    .holdImg {\r\n        padding-right: 10PX;\r\n        vertical-align: top;\r\n\r\n        .imgShow {\r\n            margin-top: 2px;\r\n            min-width: 500px;\r\n            max-width: 500px;\r\n            border-radius: 10px;\r\n            cursor: pointer;\r\n        }\r\n\r\n        .imgActor {\r\n            min-width: 350px;\r\n            max-width: 350px;\r\n        }\r\n    }\r\n\r\n    .imgEpisode {\r\n        min-width: 400px;\r\n        max-width: 400px;\r\n        border-radius: 8px;\r\n    }\r\n\r\n    .number {\r\n        padding-left: 30px;\r\n        font-size: 22px;\r\n        font-weight: 400;\r\n        width: 100px;\r\n    }\r\n\r\n    .showName {\r\n        padding: 2px 10px;\r\n        font-weight: 500;\r\n        font-size: 28px;\r\n        text-align: center;\r\n    }\r\n\r\n    .airDate {\r\n        width: 70px;\r\n        padding: 3px 10px;\r\n    }\r\n\r\n    .showNameActor {\r\n        padding: 2px 30px;\r\n        font-weight: 400;\r\n        font-size: 28px;\r\n        cursor: pointer;\r\n        color: $color5;\r\n\r\n        &:hover {\r\n            color: $color6;\r\n        }\r\n    }\r\n\r\n    .forSummary {\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n\r\n    .summary {\r\n        margin-left: 25px;\r\n        max-width: 395px;\r\n        min-width: 395px;\r\n        padding: 10px 15px;\r\n        font-size: 24px;\r\n        border: 1px solid $color2;\r\n        border-radius: 19px;\r\n        color: $color4;\r\n        background-color: $color3;\r\n    }\r\n\r\n    .summaryRes {\r\n        margin-left: 5px;\r\n        max-width: 650px;\r\n        min-width: 650px;\r\n        padding: 10px 15px;\r\n        font-size: 24px;\r\n        border: 1px solid $color2;\r\n        background-color: $color3;\r\n        border-radius: 19px;\r\n    }\r\n\r\n    .language {\r\n        padding: 2px 10px;\r\n        min-width: 335px;\r\n        max-width: 335px;\r\n    }\r\n\r\n    a {\r\n        padding-left: 8px;\r\n    }\r\n\r\n    .genres {\r\n        display: flex;\r\n        font-size: 20px;\r\n        margin: 0;\r\n        color: $color4;\r\n        list-style: none;\r\n        padding: 0px 5px 0px 2px;\r\n\r\n        li {\r\n            padding-right: 5px;\r\n        }\r\n    }\r\n\r\n    a {\r\n        font-weight: 400;\r\n        font-size: 20px;\r\n        text-decoration: none;\r\n        color: $color5;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            color: $color6;\r\n        }\r\n    }\r\n\r\n\r\n    .nameComm {\r\n        font-size: 24px;\r\n        width: 800px;\r\n\r\n        ul {\r\n            padding: 0;\r\n        }\r\n\r\n        li {\r\n            list-style: none;\r\n            padding: 0;\r\n        }\r\n    }\r\n\r\n    .collapseTv {\r\n        display: flex;\r\n        flex-direction: row;\r\n        background-color: #DFFF00;\r\n    }\r\n\r\n    .tvName {\r\n        width: 300px;\r\n        font-weight: 400;\r\n    }\r\n\r\n    th {\r\n        text-align: left;\r\n    }\r\n\r\n    .imgTv {\r\n        width: 60px;\r\n        padding: 5px;\r\n    }\r\n}\r\n\r\n.showActor {\r\n    padding-top: 10px;\r\n}\r\n\r\n.details {\r\n    display: flex;\r\n    margin: auto;\r\n    width: 1300px;\r\n    background-color: $color1;\r\n    font-size: 18px;\r\n    padding: 60px 10px 10px 10px;\r\n\r\n    p {\r\n        padding: 5px;\r\n        margin: 0;\r\n    }\r\n\r\n    .more {\r\n        border-radius: 5px;\r\n        background-color: $color9;\r\n        color: $color4;\r\n        font-size: 16px;\r\n        cursor: pointer;\r\n        text-align: center;\r\n        vertical-align: middle;\r\n        width: 160px;\r\n        padding: 10px 15px;\r\n\r\n        &:hover {\r\n\r\n            background-color: $color10;\r\n        }\r\n    }\r\n\r\n    .holdImg {\r\n        padding-right: 25px;\r\n        vertical-align: top;\r\n        position: relative;\r\n        cursor: pointer;\r\n\r\n\r\n        .imgShow {\r\n            margin-top: 2px;\r\n            min-width: 500px;\r\n            max-width: 500px;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .imgOmdb {\r\n            display: none;\r\n            position: absolute;\r\n            top: 0px;\r\n            width: 500px;\r\n            border-radius: 10px;\r\n\r\n            z-index: 1;\r\n\r\n        }\r\n        &:hover .imgOmdb {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    .sezone {\r\n\r\n        padding-left: 6px;\r\n        font-size: 18px;\r\n        width: 750px;\r\n        max-width: 750px;\r\n        max-height: 75px;\r\n        overflow-x: auto;\r\n\r\n        div {\r\n            display: flex;\r\n\r\n            p {\r\n                margin: 3px 0px;\r\n                padding-right: 15px;\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    .clickShow {\r\n        font-weight: 500;\r\n        font-size: 26px;\r\n        cursor: pointer;\r\n        width: 300px;\r\n        color: $color5;\r\n\r\n        &:hover {\r\n            color: $color6;\r\n        }\r\n    }\r\n\r\n    .showName {\r\n        padding: 2px 10px;\r\n        font-weight: 500;\r\n        font-size: 28px;\r\n        text-align: center;\r\n    }\r\n\r\n    .showCast {\r\n        background-color: $color3;\r\n        font-size: 19px;\r\n        padding-left: 15px;\r\n        height: 30px;\r\n\r\n        td {\r\n            padding-left: 10px;\r\n        }\r\n    }\r\n\r\n    .summary {\r\n\r\n        max-width: 750px;\r\n        min-width: 750px;\r\n        padding: 10px 15px;\r\n        font-size: 24px;\r\n        color: $color4;\r\n        background-color: $color3;\r\n        border-radius: 10px;\r\n        vertical-align: top;\r\n    }\r\n\r\n    .runtime {\r\n        display: flex;\r\n        vertical-align: top;\r\n\r\n        .rating {\r\n            margin: 0px;\r\n        }\r\n\r\n        .rating2 {\r\n            margin: 0px;\r\n            padding-left: 10px;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    .rating3 {\r\n        padding: 6px;\r\n    }\r\n\r\n    .language {\r\n        padding: 2px 10px;\r\n        min-width: 335px;\r\n        max-width: 335px;\r\n        vertical-align: top;\r\n    }\r\n\r\n    .genres {\r\n        display: flex;\r\n        font-size: 20px;\r\n        margin: 0;\r\n        list-style: none;\r\n        padding: 0px 5px 0px 2px;\r\n\r\n        li {\r\n            padding-right: 5px;\r\n        }\r\n    }\r\n\r\n    a {\r\n        font-weight: 300;\r\n        font-size: 20px;\r\n        text-decoration: none;\r\n        color: $color5;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            color: $color6;\r\n        }\r\n    }\r\n}\r\n\r\n.sezoneList {\r\n    display: flex;\r\n    margin: auto;\r\n    width: 1300px;\r\n    background-color: $color1;\r\n\r\n    .epNumber {\r\n        margin: 0;\r\n        font-size: 20px;\r\n        font-weight: 400;\r\n        padding: 3px 10px;\r\n        width: 440px;\r\n    }\r\n\r\n    .epName {\r\n        margin: 0;\r\n        text-align: center;\r\n        font-size: 22px;\r\n        font-weight: 400;\r\n        width: 440px;\r\n        padding: 10px 10px;\r\n    }\r\n\r\n    .epTitle {\r\n        padding: 15px 10px;\r\n        margin: 0;\r\n        text-align: center;\r\n        font-size: 24px;\r\n        color: $color5;\r\n        font-weight: 500;\r\n        width: 440px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            color: $color6;\r\n        }\r\n    }\r\n\r\n    .airdate {\r\n        margin: 0;\r\n        width: 200px;\r\n        padding: 3px 10px;\r\n    }\r\n\r\n    .episName {\r\n        width: 200px;\r\n    }\r\n\r\n    .summaryEpis {\r\n        width: 540px;\r\n    }\r\n\r\n    .imgSezons {\r\n        width: 400px;\r\n        padding: 5px 5px;\r\n    }\r\n\r\n    .sezonNum {\r\n        font-size: 25px;\r\n        font-weight: 400;\r\n        width: 50px;\r\n    }\r\n\r\n\r\n    \r\n    .sezonDate {\r\n        width: 250px;\r\n        padding-left: 15px;\r\n        font-weight: 400;\r\n    }\r\n\r\n    .summEpis {\r\n        margin-top: 5px;\r\n        width: 450px;\r\n        padding: 10px 15px;\r\n        font-size: 22px;\r\n        border-radius: 19px;\r\n        vertical-align: top;\r\n    }\r\n}\r\n\r\n.collapse {\r\n    margin: auto;\r\n    width: 1300px;\r\n    border-bottom: solid 1px $color3;\r\n}\r\n\r\n.footer {\r\n    text-align: center;\r\n    font-size: 18px;\r\n    padding-top: 500px;\r\n    padding-bottom: 10px;\r\n    background-color: $color2;\r\n    color: $color3;\r\n\r\n    hr {\r\n        color: $color3;\r\n        background-color: $color3;\r\n\r\n    }\r\n}\r\n\r\n.back-to-top {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 300px;\r\n    cursor: pointer;\r\n    border-radius: 5px;\r\n\r\n    .arrowup {\r\n        align-items: center;\r\n        width: 30px;\r\n        height: 25px;\r\n        color: $color3;\r\n        background-color: $color7;\r\n        border-radius: 5px;\r\n        border: solid 3px $color3;\r\n    }\r\n}\r\n\r\n.loader {\r\n    display: flex;\r\n    width: 1300px;\r\n    background-color: $color2;\r\n    color: $color5;\r\n    height: 1000px;\r\n    margin: auto;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.sliderDiv {\r\n    width: 740px;\r\n    min-height: 30px;\r\n    margin: auto;\r\n\r\n    .imageActor {\r\n        max-width: 170px;\r\n        min-height: 239px;\r\n        cursor: pointer;\r\n        border: 1px solid transparent;\r\n\r\n        &:hover {\r\n            border: 1px solid $color5;\r\n        }\r\n    }\r\n\r\n\r\n    .imageCaracter {\r\n        max-width: 170px;\r\n        min-height: 239px;\r\n    }\r\n\r\n    .vertical {\r\n        width: 3px;\r\n        height: 239px;\r\n    }\r\n\r\n    .clickActor {\r\n        max-width: 170px;\r\n        margin: 0;\r\n        padding: 5px;\r\n        color: $color5;\r\n        cursor: pointer;\r\n        font-size: 18px;\r\n        overflow: hidden;\r\n\r\n        &:hover {\r\n            color: $color6;\r\n        }\r\n    }\r\n\r\n    p {\r\n        width: 170px;\r\n        margin: 0;\r\n        padding: 5px;\r\n        overflow: hidden;\r\n    }\r\n\r\n}\r\n\r\n\r\n@media screen and (max-width: 500px) {\r\n\r\n\r\n\r\n    .provider {\r\n        width: 355px;\r\n\r\n        .fixed {\r\n            width: 355px;\r\n        }\r\n    }\r\n\r\n    .searchMain {\r\n        width: 355px;\r\n        font-size: 20px;\r\n    }\r\n\r\n    .guestCast {\r\n        width: 345px;\r\n        font-size: 16px;\r\n    }\r\n\r\n    .showActor {\r\n        display: block;\r\n        width: 355px;\r\n        font-size: 14px;\r\n        padding: 20px 5px 5px 5px;\r\n\r\n        .holdImg {\r\n            padding: 2px;\r\n\r\n            .imgShow {\r\n                max-width: 345px;\r\n                min-width: 345px;\r\n            }\r\n        }\r\n\r\n        .forSummary {\r\n            flex-direction: column;\r\n        }\r\n\r\n        .summary {\r\n            font-size: 18px;\r\n        }\r\n\r\n        a {\r\n            font-size: 16px;\r\n        }\r\n\r\n        .language {\r\n            padding: 1px 4px;\r\n            max-width: 150px;\r\n            min-width: 150px;\r\n        }\r\n\r\n        .showCast {\r\n            max-width: 350px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .clickShow {\r\n            font-size: 18px;\r\n            max-width: 150px;\r\n\r\n            .genres {\r\n                font-size: 16px;\r\n            }\r\n        }\r\n\r\n        .showName {\r\n            padding: 1px 5px;\r\n            font-size: 22px;\r\n            max-width: 350px;\r\n        }\r\n\r\n        .genres {\r\n            font-size: 14px;\r\n        }\r\n\r\n        .sezone {\r\n            padding-left: 4px;\r\n            font-size: 16px;\r\n            width: 335px;\r\n            max-width: 335px;\r\n            max-height: 55px;\r\n        }\r\n    }\r\n\r\n    .details {\r\n        display: block;\r\n        width: 355px;\r\n        font-size: 14px;\r\n        padding: 60px 5px 5px 5px;\r\n\r\n        .more {\r\n            font-size: 10px;\r\n            padding: 4px 6px;\r\n            width: 100px;\r\n        }\r\n\r\n        .holdImg {\r\n            padding: 2px;\r\n\r\n            .imgShow {\r\n                max-width: 345px;\r\n                min-width: 345px;\r\n                border-radius: 7px;\r\n            }\r\n        }\r\n\r\n        .forSummary {\r\n            flex-direction: column;\r\n        }\r\n\r\n        .summary {\r\n            font-size: 18px;\r\n            max-width: 330px;\r\n            min-width: 330px;\r\n        }\r\n\r\n        a {\r\n            font-size: 14px;\r\n        }\r\n\r\n        .language {\r\n            padding: 1px 4px;\r\n            max-width: 150px;\r\n            min-width: 150px;\r\n        }\r\n\r\n        .showCast {\r\n            max-width: 350px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .clickShow {\r\n            font-size: 20px;\r\n            max-width: 150px;\r\n\r\n            .genres {\r\n                font-size: 16px;\r\n            }\r\n        }\r\n\r\n        .showName {\r\n            padding: 5px 5px;\r\n            font-size: 22px;\r\n            max-width: 350px;\r\n        }\r\n\r\n        .genres {\r\n            font-size: 14px;\r\n        }\r\n\r\n        .sezone {\r\n            padding-left: 4px;\r\n            font-size: 14px;\r\n            width: 335px;\r\n            max-width: 335px;\r\n            max-height: 62px;\r\n        }\r\n    }\r\n\r\n    .place {\r\n        width: 355px;\r\n        padding: 50px 5px 5px 5px;\r\n\r\n        .placeBut {\r\n            padding: 2px;\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    .gridTv {\r\n        grid-template-columns: auto auto auto;\r\n        width: 355px;\r\n        font-size: 16px;\r\n        gap: 8px;\r\n        padding: 10px 4px;\r\n\r\n        .time {\r\n            font-size: 16px;\r\n            padding: 5px 10px;\r\n        }\r\n\r\n        .gridItem {\r\n            padding: 2px;\r\n            max-width: 107x;\r\n\r\n            img {\r\n                min-width: 107px;\r\n                min-height: 156px;\r\n            }\r\n\r\n            .genresTv {\r\n                position: absolute;\r\n                width: 107px;\r\n                height: 157px;\r\n                font-size: 12px;\r\n\r\n                top: 1px;\r\n                padding-bottom: 8px;\r\n\r\n                .episode {\r\n\r\n                    font-size: 14px;\r\n                    padding: 5px;\r\n                }\r\n\r\n                p {\r\n                    margin: 0px;\r\n                    padding: 2px;\r\n                }\r\n            }\r\n\r\n            &:hover .genresTv {\r\n                display: flex;\r\n            }\r\n\r\n            .showName {\r\n                max-width: 95px;\r\n                font-size: 14px;\r\n                font-weight: 400;\r\n                padding: 6px 3px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .showActor {\r\n        width: 355px;\r\n\r\n        .imgCastMain {\r\n            max-width: 345px;\r\n\r\n            .guest {\r\n                display: flex;\r\n                width: 200px;\r\n\r\n                .guestImgClick,\r\n                .guestImg {\r\n                    width: 100px;\r\n                }\r\n            }\r\n\r\n            .guestName {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                height: 50px;\r\n\r\n                p {\r\n                    width: 100px;\r\n                    font-size: 12px;\r\n                    padding-left: 3px;\r\n                }\r\n\r\n                .click {\r\n                    font-size: 12px;\r\n                    cursor: pointer;\r\n                    text-align: right;\r\n                    padding-right: 5px;\r\n                    width: 100px;\r\n                }\r\n            }\r\n\r\n            .imgCast {\r\n                min-width: 100px;\r\n            }\r\n        }\r\n\r\n        .wrap {\r\n            font-size: 16px;\r\n        }\r\n\r\n        .bigImg {\r\n            width: 345px;\r\n        }\r\n\r\n        .imgEpisode {\r\n            min-width: 345px;\r\n            max-width: 345px;\r\n        }\r\n\r\n        .number {\r\n            padding-left: 15px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .summary {\r\n            margin-left: 0px;\r\n            max-width: 345px;\r\n            min-width: 345px;\r\n        }\r\n    }\r\n\r\n    .sezoneList {\r\n        display: block;\r\n        margin: auto;\r\n        width: 355px;\r\n\r\n        .episName {\r\n            width: 200px;\r\n        }\r\n\r\n        .epNumber {\r\n            font-size: 16px;\r\n            width: 350px;\r\n        }\r\n\r\n        .epName {\r\n            font-size: 20px;\r\n            width: 350px;\r\n            padding: 4px 5px;\r\n        }\r\n\r\n        .epTitle {\r\n            padding: 7px 5px;\r\n            margin: 0px;\r\n            width: 355px;\r\n            font-size: 20px;\r\n        }\r\n\r\n        .summaryEpis {\r\n            width: 345px;\r\n        }\r\n\r\n        .imgSezons {\r\n            width: 355px;\r\n            padding: 5px 0px;\r\n        }\r\n\r\n        .sezonNum {\r\n            font-size: 18px;\r\n        }\r\n\r\n        .sezonDate {\r\n            width: 250px;\r\n        }\r\n\r\n        .summEpis {\r\n            width: 350px;\r\n            padding: 5px 5px;\r\n            font-size: 18px;\r\n            border-radius: 5px;\r\n        }\r\n    }\r\n\r\n    .showMain {\r\n        padding-top: 50px;\r\n        width: 355px;\r\n\r\n        .bigImg {\r\n            width: 340px;\r\n\r\n            p {\r\n                font-size: 12px;\r\n            }\r\n        }\r\n\r\n        .holdImg {\r\n            padding-right: 2px;\r\n\r\n            .imgShow {\r\n                padding-right: 3px;\r\n                min-width: 115px;\r\n                max-width: 115px;\r\n            }\r\n\r\n            .imgActor {\r\n                min-width: 110px;\r\n                max-width: 110px;\r\n            }\r\n        }\r\n\r\n        .showNameActor {\r\n            font-size: 22px;\r\n        }\r\n\r\n        a,\r\n        .language {\r\n            min-width: 95px;\r\n            max-width: 95px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .clickShow {\r\n            font-size: 22px;\r\n        }\r\n\r\n        .summary {\r\n            max-width: 100px;\r\n            font-size: 14px;\r\n            border-radius: 5px;\r\n        }\r\n\r\n        .summaryRes {\r\n            margin-left: 3px;\r\n            padding: 8px 6px;\r\n            max-width: 100px;\r\n            min-width: 100px;\r\n            font-size: 14px;\r\n            border-radius: 5px;\r\n        }\r\n\r\n        td,\r\n        .genres {\r\n            font-size: 14px;\r\n        }\r\n    }\r\n\r\n    .collapse {\r\n        width: 345px;\r\n    }\r\n\r\n    .footer {\r\n        padding-top: 100px;\r\n        font-size: 12px;\r\n    }\r\n\r\n    .back-to-top {\r\n        right: 25px;\r\n    }\r\n\r\n    .loader {\r\n        width: 355px;\r\n        height: 700px;\r\n    }\r\n\r\n    .sliderDiv {\r\n        width: 300px;\r\n        min-height: 15px;\r\n\r\n        .imageActor {\r\n            max-width: 60px;\r\n            min-height: 84.4px;\r\n        }\r\n\r\n        .imageCaracter {\r\n            max-width: 60px;\r\n            min-height: 84.4px;\r\n        }\r\n\r\n        .vertical {\r\n            width: 3px;\r\n            height: 84.4px;\r\n        }\r\n\r\n        .clickActor {\r\n            max-width: 60px;\r\n            margin: 0;\r\n            padding: 3px;\r\n            font-size: 12px;\r\n        }\r\n\r\n        p {\r\n            font-size: 12px;\r\n            width: 60px;\r\n            padding: 3px;\r\n        }\r\n    }\r\n}"],sourceRoot:""}]);const p=s},6314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},4417:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},1354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},1040:(e,t,n)=>{var r=n(8404),o=n(2524).each;function a(e,t){this.query=e,this.isUnconditional=t,this.handlers=[],this.mql=window.matchMedia(e);var n=this;this.listener=function(e){n.mql=e.currentTarget||e,n.assess()},this.mql.addListener(this.listener)}a.prototype={constuctor:a,addHandler:function(e){var t=new r(e);this.handlers.push(t),this.matches()&&t.on()},removeHandler:function(e){var t=this.handlers;o(t,(function(n,r){if(n.equals(e))return n.destroy(),!t.splice(r,1)}))},matches:function(){return this.mql.matches||this.isUnconditional},clear:function(){o(this.handlers,(function(e){e.destroy()})),this.mql.removeListener(this.listener),this.handlers.length=0},assess:function(){var e=this.matches()?"on":"off";o(this.handlers,(function(t){t[e]()}))}},e.exports=a},1098:(e,t,n)=>{var r=n(1040),o=n(2524),a=o.each,i=o.isFunction,l=o.isArray;function u(){if(!window.matchMedia)throw new Error("matchMedia not present, legacy browsers require a polyfill");this.queries={},this.browserIsIncapable=!window.matchMedia("only all").matches}u.prototype={constructor:u,register:function(e,t,n){var o=this.queries,u=n&&this.browserIsIncapable;return o[e]||(o[e]=new r(e,u)),i(t)&&(t={match:t}),l(t)||(t=[t]),a(t,(function(t){i(t)&&(t={match:t}),o[e].addHandler(t)})),this},unregister:function(e,t){var n=this.queries[e];return n&&(t?n.removeHandler(t):(n.clear(),delete this.queries[e])),this}},e.exports=u},8404:e=>{function t(e){this.options=e,!e.deferSetup&&this.setup()}t.prototype={constructor:t,setup:function(){this.options.setup&&this.options.setup(),this.initialised=!0},on:function(){!this.initialised&&this.setup(),this.options.match&&this.options.match()},off:function(){this.options.unmatch&&this.options.unmatch()},destroy:function(){this.options.destroy?this.options.destroy():this.off()},equals:function(e){return this.options===e||this.options.match===e}},e.exports=t},2524:e=>{e.exports={isFunction:function(e){return"function"==typeof e},isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},each:function(e,t){for(var n=0,r=e.length;n<r&&!1!==t(e[n],n);n++);}}},2386:(e,t,n)=>{var r=n(1098);e.exports=new r},6067:function(e,t,n){var r;e=n.nmd(e),function(){var o=(e&&e.exports,"object"==typeof n.g&&n.g);o.global!==o&&o.window;var a=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,i=/[\x01-\x7F]/g,l=/[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,u=/<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g,c={"­":"shy","‌":"zwnj","‍":"zwj","‎":"lrm","⁣":"ic","⁢":"it","⁡":"af","‏":"rlm","​":"ZeroWidthSpace","⁠":"NoBreak","̑":"DownBreve","⃛":"tdot","⃜":"DotDot","\t":"Tab","\n":"NewLine"," ":"puncsp"," ":"MediumSpace"," ":"thinsp"," ":"hairsp"," ":"emsp13"," ":"ensp"," ":"emsp14"," ":"emsp"," ":"numsp"," ":"nbsp","  ":"ThickSpace","‾":"oline",_:"lowbar","‐":"dash","–":"ndash","—":"mdash","―":"horbar",",":"comma",";":"semi","⁏":"bsemi",":":"colon","⩴":"Colone","!":"excl","¡":"iexcl","?":"quest","¿":"iquest",".":"period","‥":"nldr","…":"mldr","·":"middot","'":"apos","‘":"lsquo","’":"rsquo","‚":"sbquo","‹":"lsaquo","›":"rsaquo",'"':"quot","“":"ldquo","”":"rdquo","„":"bdquo","«":"laquo","»":"raquo","(":"lpar",")":"rpar","[":"lsqb","]":"rsqb","{":"lcub","}":"rcub","⌈":"lceil","⌉":"rceil","⌊":"lfloor","⌋":"rfloor","⦅":"lopar","⦆":"ropar","⦋":"lbrke","⦌":"rbrke","⦍":"lbrkslu","⦎":"rbrksld","⦏":"lbrksld","⦐":"rbrkslu","⦑":"langd","⦒":"rangd","⦓":"lparlt","⦔":"rpargt","⦕":"gtlPar","⦖":"ltrPar","⟦":"lobrk","⟧":"robrk","⟨":"lang","⟩":"rang","⟪":"Lang","⟫":"Rang","⟬":"loang","⟭":"roang","❲":"lbbrk","❳":"rbbrk","‖":"Vert","§":"sect","¶":"para","@":"commat","*":"ast","/":"sol",undefined:null,"&":"amp","#":"num","%":"percnt","‰":"permil","‱":"pertenk","†":"dagger","‡":"Dagger","•":"bull","⁃":"hybull","′":"prime","″":"Prime","‴":"tprime","⁗":"qprime","‵":"bprime","⁁":"caret","`":"grave","´":"acute","˜":"tilde","^":"Hat","¯":"macr","˘":"breve","˙":"dot","¨":"die","˚":"ring","˝":"dblac","¸":"cedil","˛":"ogon",ˆ:"circ",ˇ:"caron","°":"deg","©":"copy","®":"reg","℗":"copysr",℘:"wp","℞":"rx","℧":"mho","℩":"iiota","←":"larr","↚":"nlarr","→":"rarr","↛":"nrarr","↑":"uarr","↓":"darr","↔":"harr","↮":"nharr","↕":"varr","↖":"nwarr","↗":"nearr","↘":"searr","↙":"swarr","↝":"rarrw","↝̸":"nrarrw","↞":"Larr","↟":"Uarr","↠":"Rarr","↡":"Darr","↢":"larrtl","↣":"rarrtl","↤":"mapstoleft","↥":"mapstoup","↦":"map","↧":"mapstodown","↩":"larrhk","↪":"rarrhk","↫":"larrlp","↬":"rarrlp","↭":"harrw","↰":"lsh","↱":"rsh","↲":"ldsh","↳":"rdsh","↵":"crarr","↶":"cularr","↷":"curarr","↺":"olarr","↻":"orarr","↼":"lharu","↽":"lhard","↾":"uharr","↿":"uharl","⇀":"rharu","⇁":"rhard","⇂":"dharr","⇃":"dharl","⇄":"rlarr","⇅":"udarr","⇆":"lrarr","⇇":"llarr","⇈":"uuarr","⇉":"rrarr","⇊":"ddarr","⇋":"lrhar","⇌":"rlhar","⇐":"lArr","⇍":"nlArr","⇑":"uArr","⇒":"rArr","⇏":"nrArr","⇓":"dArr","⇔":"iff","⇎":"nhArr","⇕":"vArr","⇖":"nwArr","⇗":"neArr","⇘":"seArr","⇙":"swArr","⇚":"lAarr","⇛":"rAarr","⇝":"zigrarr","⇤":"larrb","⇥":"rarrb","⇵":"duarr","⇽":"loarr","⇾":"roarr","⇿":"hoarr","∀":"forall","∁":"comp","∂":"part","∂̸":"npart","∃":"exist","∄":"nexist","∅":"empty","∇":"Del","∈":"in","∉":"notin","∋":"ni","∌":"notni","϶":"bepsi","∏":"prod","∐":"coprod","∑":"sum","+":"plus","±":"pm","÷":"div","×":"times","<":"lt","≮":"nlt","<⃒":"nvlt","=":"equals","≠":"ne","=⃥":"bne","⩵":"Equal",">":"gt","≯":"ngt",">⃒":"nvgt","¬":"not","|":"vert","¦":"brvbar","−":"minus","∓":"mp","∔":"plusdo","⁄":"frasl","∖":"setmn","∗":"lowast","∘":"compfn","√":"Sqrt","∝":"prop","∞":"infin","∟":"angrt","∠":"ang","∠⃒":"nang","∡":"angmsd","∢":"angsph","∣":"mid","∤":"nmid","∥":"par","∦":"npar","∧":"and","∨":"or","∩":"cap","∩︀":"caps","∪":"cup","∪︀":"cups","∫":"int","∬":"Int","∭":"tint","⨌":"qint","∮":"oint","∯":"Conint","∰":"Cconint","∱":"cwint","∲":"cwconint","∳":"awconint","∴":"there4","∵":"becaus","∶":"ratio","∷":"Colon","∸":"minusd","∺":"mDDot","∻":"homtht","∼":"sim","≁":"nsim","∼⃒":"nvsim","∽":"bsim","∽̱":"race","∾":"ac","∾̳":"acE","∿":"acd","≀":"wr","≂":"esim","≂̸":"nesim","≃":"sime","≄":"nsime","≅":"cong","≇":"ncong","≆":"simne","≈":"ap","≉":"nap","≊":"ape","≋":"apid","≋̸":"napid","≌":"bcong","≍":"CupCap","≭":"NotCupCap","≍⃒":"nvap","≎":"bump","≎̸":"nbump","≏":"bumpe","≏̸":"nbumpe","≐":"doteq","≐̸":"nedot","≑":"eDot","≒":"efDot","≓":"erDot","≔":"colone","≕":"ecolon","≖":"ecir","≗":"cire","≙":"wedgeq","≚":"veeeq","≜":"trie","≟":"equest","≡":"equiv","≢":"nequiv","≡⃥":"bnequiv","≤":"le","≰":"nle","≤⃒":"nvle","≥":"ge","≱":"nge","≥⃒":"nvge","≦":"lE","≦̸":"nlE","≧":"gE","≧̸":"ngE","≨︀":"lvnE","≨":"lnE","≩":"gnE","≩︀":"gvnE","≪":"ll","≪̸":"nLtv","≪⃒":"nLt","≫":"gg","≫̸":"nGtv","≫⃒":"nGt","≬":"twixt","≲":"lsim","≴":"nlsim","≳":"gsim","≵":"ngsim","≶":"lg","≸":"ntlg","≷":"gl","≹":"ntgl","≺":"pr","⊀":"npr","≻":"sc","⊁":"nsc","≼":"prcue","⋠":"nprcue","≽":"sccue","⋡":"nsccue","≾":"prsim","≿":"scsim","≿̸":"NotSucceedsTilde","⊂":"sub","⊄":"nsub","⊂⃒":"vnsub","⊃":"sup","⊅":"nsup","⊃⃒":"vnsup","⊆":"sube","⊈":"nsube","⊇":"supe","⊉":"nsupe","⊊︀":"vsubne","⊊":"subne","⊋︀":"vsupne","⊋":"supne","⊍":"cupdot","⊎":"uplus","⊏":"sqsub","⊏̸":"NotSquareSubset","⊐":"sqsup","⊐̸":"NotSquareSuperset","⊑":"sqsube","⋢":"nsqsube","⊒":"sqsupe","⋣":"nsqsupe","⊓":"sqcap","⊓︀":"sqcaps","⊔":"sqcup","⊔︀":"sqcups","⊕":"oplus","⊖":"ominus","⊗":"otimes","⊘":"osol","⊙":"odot","⊚":"ocir","⊛":"oast","⊝":"odash","⊞":"plusb","⊟":"minusb","⊠":"timesb","⊡":"sdotb","⊢":"vdash","⊬":"nvdash","⊣":"dashv","⊤":"top","⊥":"bot","⊧":"models","⊨":"vDash","⊭":"nvDash","⊩":"Vdash","⊮":"nVdash","⊪":"Vvdash","⊫":"VDash","⊯":"nVDash","⊰":"prurel","⊲":"vltri","⋪":"nltri","⊳":"vrtri","⋫":"nrtri","⊴":"ltrie","⋬":"nltrie","⊴⃒":"nvltrie","⊵":"rtrie","⋭":"nrtrie","⊵⃒":"nvrtrie","⊶":"origof","⊷":"imof","⊸":"mumap","⊹":"hercon","⊺":"intcal","⊻":"veebar","⊽":"barvee","⊾":"angrtvb","⊿":"lrtri","⋀":"Wedge","⋁":"Vee","⋂":"xcap","⋃":"xcup","⋄":"diam","⋅":"sdot","⋆":"Star","⋇":"divonx","⋈":"bowtie","⋉":"ltimes","⋊":"rtimes","⋋":"lthree","⋌":"rthree","⋍":"bsime","⋎":"cuvee","⋏":"cuwed","⋐":"Sub","⋑":"Sup","⋒":"Cap","⋓":"Cup","⋔":"fork","⋕":"epar","⋖":"ltdot","⋗":"gtdot","⋘":"Ll","⋘̸":"nLl","⋙":"Gg","⋙̸":"nGg","⋚︀":"lesg","⋚":"leg","⋛":"gel","⋛︀":"gesl","⋞":"cuepr","⋟":"cuesc","⋦":"lnsim","⋧":"gnsim","⋨":"prnsim","⋩":"scnsim","⋮":"vellip","⋯":"ctdot","⋰":"utdot","⋱":"dtdot","⋲":"disin","⋳":"isinsv","⋴":"isins","⋵":"isindot","⋵̸":"notindot","⋶":"notinvc","⋷":"notinvb","⋹":"isinE","⋹̸":"notinE","⋺":"nisd","⋻":"xnis","⋼":"nis","⋽":"notnivc","⋾":"notnivb","⌅":"barwed","⌆":"Barwed","⌌":"drcrop","⌍":"dlcrop","⌎":"urcrop","⌏":"ulcrop","⌐":"bnot","⌒":"profline","⌓":"profsurf","⌕":"telrec","⌖":"target","⌜":"ulcorn","⌝":"urcorn","⌞":"dlcorn","⌟":"drcorn","⌢":"frown","⌣":"smile","⌭":"cylcty","⌮":"profalar","⌶":"topbot","⌽":"ovbar","⌿":"solbar","⍼":"angzarr","⎰":"lmoust","⎱":"rmoust","⎴":"tbrk","⎵":"bbrk","⎶":"bbrktbrk","⏜":"OverParenthesis","⏝":"UnderParenthesis","⏞":"OverBrace","⏟":"UnderBrace","⏢":"trpezium","⏧":"elinters","␣":"blank","─":"boxh","│":"boxv","┌":"boxdr","┐":"boxdl","└":"boxur","┘":"boxul","├":"boxvr","┤":"boxvl","┬":"boxhd","┴":"boxhu","┼":"boxvh","═":"boxH","║":"boxV","╒":"boxdR","╓":"boxDr","╔":"boxDR","╕":"boxdL","╖":"boxDl","╗":"boxDL","╘":"boxuR","╙":"boxUr","╚":"boxUR","╛":"boxuL","╜":"boxUl","╝":"boxUL","╞":"boxvR","╟":"boxVr","╠":"boxVR","╡":"boxvL","╢":"boxVl","╣":"boxVL","╤":"boxHd","╥":"boxhD","╦":"boxHD","╧":"boxHu","╨":"boxhU","╩":"boxHU","╪":"boxvH","╫":"boxVh","╬":"boxVH","▀":"uhblk","▄":"lhblk","█":"block","░":"blk14","▒":"blk12","▓":"blk34","□":"squ","▪":"squf","▫":"EmptyVerySmallSquare","▭":"rect","▮":"marker","▱":"fltns","△":"xutri","▴":"utrif","▵":"utri","▸":"rtrif","▹":"rtri","▽":"xdtri","▾":"dtrif","▿":"dtri","◂":"ltrif","◃":"ltri","◊":"loz","○":"cir","◬":"tridot","◯":"xcirc","◸":"ultri","◹":"urtri","◺":"lltri","◻":"EmptySmallSquare","◼":"FilledSmallSquare","★":"starf","☆":"star","☎":"phone","♀":"female","♂":"male","♠":"spades","♣":"clubs","♥":"hearts","♦":"diams","♪":"sung","✓":"check","✗":"cross","✠":"malt","✶":"sext","❘":"VerticalSeparator","⟈":"bsolhsub","⟉":"suphsol","⟵":"xlarr","⟶":"xrarr","⟷":"xharr","⟸":"xlArr","⟹":"xrArr","⟺":"xhArr","⟼":"xmap","⟿":"dzigrarr","⤂":"nvlArr","⤃":"nvrArr","⤄":"nvHarr","⤅":"Map","⤌":"lbarr","⤍":"rbarr","⤎":"lBarr","⤏":"rBarr","⤐":"RBarr","⤑":"DDotrahd","⤒":"UpArrowBar","⤓":"DownArrowBar","⤖":"Rarrtl","⤙":"latail","⤚":"ratail","⤛":"lAtail","⤜":"rAtail","⤝":"larrfs","⤞":"rarrfs","⤟":"larrbfs","⤠":"rarrbfs","⤣":"nwarhk","⤤":"nearhk","⤥":"searhk","⤦":"swarhk","⤧":"nwnear","⤨":"toea","⤩":"tosa","⤪":"swnwar","⤳":"rarrc","⤳̸":"nrarrc","⤵":"cudarrr","⤶":"ldca","⤷":"rdca","⤸":"cudarrl","⤹":"larrpl","⤼":"curarrm","⤽":"cularrp","⥅":"rarrpl","⥈":"harrcir","⥉":"Uarrocir","⥊":"lurdshar","⥋":"ldrushar","⥎":"LeftRightVector","⥏":"RightUpDownVector","⥐":"DownLeftRightVector","⥑":"LeftUpDownVector","⥒":"LeftVectorBar","⥓":"RightVectorBar","⥔":"RightUpVectorBar","⥕":"RightDownVectorBar","⥖":"DownLeftVectorBar","⥗":"DownRightVectorBar","⥘":"LeftUpVectorBar","⥙":"LeftDownVectorBar","⥚":"LeftTeeVector","⥛":"RightTeeVector","⥜":"RightUpTeeVector","⥝":"RightDownTeeVector","⥞":"DownLeftTeeVector","⥟":"DownRightTeeVector","⥠":"LeftUpTeeVector","⥡":"LeftDownTeeVector","⥢":"lHar","⥣":"uHar","⥤":"rHar","⥥":"dHar","⥦":"luruhar","⥧":"ldrdhar","⥨":"ruluhar","⥩":"rdldhar","⥪":"lharul","⥫":"llhard","⥬":"rharul","⥭":"lrhard","⥮":"udhar","⥯":"duhar","⥰":"RoundImplies","⥱":"erarr","⥲":"simrarr","⥳":"larrsim","⥴":"rarrsim","⥵":"rarrap","⥶":"ltlarr","⥸":"gtrarr","⥹":"subrarr","⥻":"suplarr","⥼":"lfisht","⥽":"rfisht","⥾":"ufisht","⥿":"dfisht","⦚":"vzigzag","⦜":"vangrt","⦝":"angrtvbd","⦤":"ange","⦥":"range","⦦":"dwangle","⦧":"uwangle","⦨":"angmsdaa","⦩":"angmsdab","⦪":"angmsdac","⦫":"angmsdad","⦬":"angmsdae","⦭":"angmsdaf","⦮":"angmsdag","⦯":"angmsdah","⦰":"bemptyv","⦱":"demptyv","⦲":"cemptyv","⦳":"raemptyv","⦴":"laemptyv","⦵":"ohbar","⦶":"omid","⦷":"opar","⦹":"operp","⦻":"olcross","⦼":"odsold","⦾":"olcir","⦿":"ofcir","⧀":"olt","⧁":"ogt","⧂":"cirscir","⧃":"cirE","⧄":"solb","⧅":"bsolb","⧉":"boxbox","⧍":"trisb","⧎":"rtriltri","⧏":"LeftTriangleBar","⧏̸":"NotLeftTriangleBar","⧐":"RightTriangleBar","⧐̸":"NotRightTriangleBar","⧜":"iinfin","⧝":"infintie","⧞":"nvinfin","⧣":"eparsl","⧤":"smeparsl","⧥":"eqvparsl","⧫":"lozf","⧴":"RuleDelayed","⧶":"dsol","⨀":"xodot","⨁":"xoplus","⨂":"xotime","⨄":"xuplus","⨆":"xsqcup","⨍":"fpartint","⨐":"cirfnint","⨑":"awint","⨒":"rppolint","⨓":"scpolint","⨔":"npolint","⨕":"pointint","⨖":"quatint","⨗":"intlarhk","⨢":"pluscir","⨣":"plusacir","⨤":"simplus","⨥":"plusdu","⨦":"plussim","⨧":"plustwo","⨩":"mcomma","⨪":"minusdu","⨭":"loplus","⨮":"roplus","⨯":"Cross","⨰":"timesd","⨱":"timesbar","⨳":"smashp","⨴":"lotimes","⨵":"rotimes","⨶":"otimesas","⨷":"Otimes","⨸":"odiv","⨹":"triplus","⨺":"triminus","⨻":"tritime","⨼":"iprod","⨿":"amalg","⩀":"capdot","⩂":"ncup","⩃":"ncap","⩄":"capand","⩅":"cupor","⩆":"cupcap","⩇":"capcup","⩈":"cupbrcap","⩉":"capbrcup","⩊":"cupcup","⩋":"capcap","⩌":"ccups","⩍":"ccaps","⩐":"ccupssm","⩓":"And","⩔":"Or","⩕":"andand","⩖":"oror","⩗":"orslope","⩘":"andslope","⩚":"andv","⩛":"orv","⩜":"andd","⩝":"ord","⩟":"wedbar","⩦":"sdote","⩪":"simdot","⩭":"congdot","⩭̸":"ncongdot","⩮":"easter","⩯":"apacir","⩰":"apE","⩰̸":"napE","⩱":"eplus","⩲":"pluse","⩳":"Esim","⩷":"eDDot","⩸":"equivDD","⩹":"ltcir","⩺":"gtcir","⩻":"ltquest","⩼":"gtquest","⩽":"les","⩽̸":"nles","⩾":"ges","⩾̸":"nges","⩿":"lesdot","⪀":"gesdot","⪁":"lesdoto","⪂":"gesdoto","⪃":"lesdotor","⪄":"gesdotol","⪅":"lap","⪆":"gap","⪇":"lne","⪈":"gne","⪉":"lnap","⪊":"gnap","⪋":"lEg","⪌":"gEl","⪍":"lsime","⪎":"gsime","⪏":"lsimg","⪐":"gsiml","⪑":"lgE","⪒":"glE","⪓":"lesges","⪔":"gesles","⪕":"els","⪖":"egs","⪗":"elsdot","⪘":"egsdot","⪙":"el","⪚":"eg","⪝":"siml","⪞":"simg","⪟":"simlE","⪠":"simgE","⪡":"LessLess","⪡̸":"NotNestedLessLess","⪢":"GreaterGreater","⪢̸":"NotNestedGreaterGreater","⪤":"glj","⪥":"gla","⪦":"ltcc","⪧":"gtcc","⪨":"lescc","⪩":"gescc","⪪":"smt","⪫":"lat","⪬":"smte","⪬︀":"smtes","⪭":"late","⪭︀":"lates","⪮":"bumpE","⪯":"pre","⪯̸":"npre","⪰":"sce","⪰̸":"nsce","⪳":"prE","⪴":"scE","⪵":"prnE","⪶":"scnE","⪷":"prap","⪸":"scap","⪹":"prnap","⪺":"scnap","⪻":"Pr","⪼":"Sc","⪽":"subdot","⪾":"supdot","⪿":"subplus","⫀":"supplus","⫁":"submult","⫂":"supmult","⫃":"subedot","⫄":"supedot","⫅":"subE","⫅̸":"nsubE","⫆":"supE","⫆̸":"nsupE","⫇":"subsim","⫈":"supsim","⫋︀":"vsubnE","⫋":"subnE","⫌︀":"vsupnE","⫌":"supnE","⫏":"csub","⫐":"csup","⫑":"csube","⫒":"csupe","⫓":"subsup","⫔":"supsub","⫕":"subsub","⫖":"supsup","⫗":"suphsub","⫘":"supdsub","⫙":"forkv","⫚":"topfork","⫛":"mlcp","⫤":"Dashv","⫦":"Vdashl","⫧":"Barv","⫨":"vBar","⫩":"vBarv","⫫":"Vbar","⫬":"Not","⫭":"bNot","⫮":"rnmid","⫯":"cirmid","⫰":"midcir","⫱":"topcir","⫲":"nhpar","⫳":"parsim","⫽":"parsl","⫽⃥":"nparsl","♭":"flat","♮":"natur","♯":"sharp","¤":"curren","¢":"cent",$:"dollar","£":"pound","¥":"yen","€":"euro","¹":"sup1","½":"half","⅓":"frac13","¼":"frac14","⅕":"frac15","⅙":"frac16","⅛":"frac18","²":"sup2","⅔":"frac23","⅖":"frac25","³":"sup3","¾":"frac34","⅗":"frac35","⅜":"frac38","⅘":"frac45","⅚":"frac56","⅝":"frac58","⅞":"frac78",𝒶:"ascr",𝕒:"aopf",𝔞:"afr",𝔸:"Aopf",𝔄:"Afr",𝒜:"Ascr",ª:"ordf",á:"aacute",Á:"Aacute",à:"agrave",À:"Agrave",ă:"abreve",Ă:"Abreve",â:"acirc",Â:"Acirc",å:"aring",Å:"angst",ä:"auml",Ä:"Auml",ã:"atilde",Ã:"Atilde",ą:"aogon",Ą:"Aogon",ā:"amacr",Ā:"Amacr",æ:"aelig",Æ:"AElig",𝒷:"bscr",𝕓:"bopf",𝔟:"bfr",𝔹:"Bopf",ℬ:"Bscr",𝔅:"Bfr",𝔠:"cfr",𝒸:"cscr",𝕔:"copf",ℭ:"Cfr",𝒞:"Cscr",ℂ:"Copf",ć:"cacute",Ć:"Cacute",ĉ:"ccirc",Ĉ:"Ccirc",č:"ccaron",Č:"Ccaron",ċ:"cdot",Ċ:"Cdot",ç:"ccedil",Ç:"Ccedil","℅":"incare",𝔡:"dfr",ⅆ:"dd",𝕕:"dopf",𝒹:"dscr",𝒟:"Dscr",𝔇:"Dfr",ⅅ:"DD",𝔻:"Dopf",ď:"dcaron",Ď:"Dcaron",đ:"dstrok",Đ:"Dstrok",ð:"eth",Ð:"ETH",ⅇ:"ee",ℯ:"escr",𝔢:"efr",𝕖:"eopf",ℰ:"Escr",𝔈:"Efr",𝔼:"Eopf",é:"eacute",É:"Eacute",è:"egrave",È:"Egrave",ê:"ecirc",Ê:"Ecirc",ě:"ecaron",Ě:"Ecaron",ë:"euml",Ë:"Euml",ė:"edot",Ė:"Edot",ę:"eogon",Ę:"Eogon",ē:"emacr",Ē:"Emacr",𝔣:"ffr",𝕗:"fopf",𝒻:"fscr",𝔉:"Ffr",𝔽:"Fopf",ℱ:"Fscr",ﬀ:"fflig",ﬃ:"ffilig",ﬄ:"ffllig",ﬁ:"filig",fj:"fjlig",ﬂ:"fllig",ƒ:"fnof",ℊ:"gscr",𝕘:"gopf",𝔤:"gfr",𝒢:"Gscr",𝔾:"Gopf",𝔊:"Gfr",ǵ:"gacute",ğ:"gbreve",Ğ:"Gbreve",ĝ:"gcirc",Ĝ:"Gcirc",ġ:"gdot",Ġ:"Gdot",Ģ:"Gcedil",𝔥:"hfr",ℎ:"planckh",𝒽:"hscr",𝕙:"hopf",ℋ:"Hscr",ℌ:"Hfr",ℍ:"Hopf",ĥ:"hcirc",Ĥ:"Hcirc",ℏ:"hbar",ħ:"hstrok",Ħ:"Hstrok",𝕚:"iopf",𝔦:"ifr",𝒾:"iscr",ⅈ:"ii",𝕀:"Iopf",ℐ:"Iscr",ℑ:"Im",í:"iacute",Í:"Iacute",ì:"igrave",Ì:"Igrave",î:"icirc",Î:"Icirc",ï:"iuml",Ï:"Iuml",ĩ:"itilde",Ĩ:"Itilde",İ:"Idot",į:"iogon",Į:"Iogon",ī:"imacr",Ī:"Imacr",ĳ:"ijlig",Ĳ:"IJlig",ı:"imath",𝒿:"jscr",𝕛:"jopf",𝔧:"jfr",𝒥:"Jscr",𝔍:"Jfr",𝕁:"Jopf",ĵ:"jcirc",Ĵ:"Jcirc",ȷ:"jmath",𝕜:"kopf",𝓀:"kscr",𝔨:"kfr",𝒦:"Kscr",𝕂:"Kopf",𝔎:"Kfr",ķ:"kcedil",Ķ:"Kcedil",𝔩:"lfr",𝓁:"lscr",ℓ:"ell",𝕝:"lopf",ℒ:"Lscr",𝔏:"Lfr",𝕃:"Lopf",ĺ:"lacute",Ĺ:"Lacute",ľ:"lcaron",Ľ:"Lcaron",ļ:"lcedil",Ļ:"Lcedil",ł:"lstrok",Ł:"Lstrok",ŀ:"lmidot",Ŀ:"Lmidot",𝔪:"mfr",𝕞:"mopf",𝓂:"mscr",𝔐:"Mfr",𝕄:"Mopf",ℳ:"Mscr",𝔫:"nfr",𝕟:"nopf",𝓃:"nscr",ℕ:"Nopf",𝒩:"Nscr",𝔑:"Nfr",ń:"nacute",Ń:"Nacute",ň:"ncaron",Ň:"Ncaron",ñ:"ntilde",Ñ:"Ntilde",ņ:"ncedil",Ņ:"Ncedil","№":"numero",ŋ:"eng",Ŋ:"ENG",𝕠:"oopf",𝔬:"ofr",ℴ:"oscr",𝒪:"Oscr",𝔒:"Ofr",𝕆:"Oopf",º:"ordm",ó:"oacute",Ó:"Oacute",ò:"ograve",Ò:"Ograve",ô:"ocirc",Ô:"Ocirc",ö:"ouml",Ö:"Ouml",ő:"odblac",Ő:"Odblac",õ:"otilde",Õ:"Otilde",ø:"oslash",Ø:"Oslash",ō:"omacr",Ō:"Omacr",œ:"oelig",Œ:"OElig",𝔭:"pfr",𝓅:"pscr",𝕡:"popf",ℙ:"Popf",𝔓:"Pfr",𝒫:"Pscr",𝕢:"qopf",𝔮:"qfr",𝓆:"qscr",𝒬:"Qscr",𝔔:"Qfr",ℚ:"Qopf",ĸ:"kgreen",𝔯:"rfr",𝕣:"ropf",𝓇:"rscr",ℛ:"Rscr",ℜ:"Re",ℝ:"Ropf",ŕ:"racute",Ŕ:"Racute",ř:"rcaron",Ř:"Rcaron",ŗ:"rcedil",Ŗ:"Rcedil",𝕤:"sopf",𝓈:"sscr",𝔰:"sfr",𝕊:"Sopf",𝔖:"Sfr",𝒮:"Sscr","Ⓢ":"oS",ś:"sacute",Ś:"Sacute",ŝ:"scirc",Ŝ:"Scirc",š:"scaron",Š:"Scaron",ş:"scedil",Ş:"Scedil",ß:"szlig",𝔱:"tfr",𝓉:"tscr",𝕥:"topf",𝒯:"Tscr",𝔗:"Tfr",𝕋:"Topf",ť:"tcaron",Ť:"Tcaron",ţ:"tcedil",Ţ:"Tcedil","™":"trade",ŧ:"tstrok",Ŧ:"Tstrok",𝓊:"uscr",𝕦:"uopf",𝔲:"ufr",𝕌:"Uopf",𝔘:"Ufr",𝒰:"Uscr",ú:"uacute",Ú:"Uacute",ù:"ugrave",Ù:"Ugrave",ŭ:"ubreve",Ŭ:"Ubreve",û:"ucirc",Û:"Ucirc",ů:"uring",Ů:"Uring",ü:"uuml",Ü:"Uuml",ű:"udblac",Ű:"Udblac",ũ:"utilde",Ũ:"Utilde",ų:"uogon",Ų:"Uogon",ū:"umacr",Ū:"Umacr",𝔳:"vfr",𝕧:"vopf",𝓋:"vscr",𝔙:"Vfr",𝕍:"Vopf",𝒱:"Vscr",𝕨:"wopf",𝓌:"wscr",𝔴:"wfr",𝒲:"Wscr",𝕎:"Wopf",𝔚:"Wfr",ŵ:"wcirc",Ŵ:"Wcirc",𝔵:"xfr",𝓍:"xscr",𝕩:"xopf",𝕏:"Xopf",𝔛:"Xfr",𝒳:"Xscr",𝔶:"yfr",𝓎:"yscr",𝕪:"yopf",𝒴:"Yscr",𝔜:"Yfr",𝕐:"Yopf",ý:"yacute",Ý:"Yacute",ŷ:"ycirc",Ŷ:"Ycirc",ÿ:"yuml",Ÿ:"Yuml",𝓏:"zscr",𝔷:"zfr",𝕫:"zopf",ℨ:"Zfr",ℤ:"Zopf",𝒵:"Zscr",ź:"zacute",Ź:"Zacute",ž:"zcaron",Ž:"Zcaron",ż:"zdot",Ż:"Zdot",Ƶ:"imped",þ:"thorn",Þ:"THORN",ŉ:"napos",α:"alpha",Α:"Alpha",β:"beta",Β:"Beta",γ:"gamma",Γ:"Gamma",δ:"delta",Δ:"Delta",ε:"epsi",ϵ:"epsiv",Ε:"Epsilon",ϝ:"gammad",Ϝ:"Gammad",ζ:"zeta",Ζ:"Zeta",η:"eta",Η:"Eta",θ:"theta",ϑ:"thetav",Θ:"Theta",ι:"iota",Ι:"Iota",κ:"kappa",ϰ:"kappav",Κ:"Kappa",λ:"lambda",Λ:"Lambda",μ:"mu",µ:"micro",Μ:"Mu",ν:"nu",Ν:"Nu",ξ:"xi",Ξ:"Xi",ο:"omicron",Ο:"Omicron",π:"pi",ϖ:"piv",Π:"Pi",ρ:"rho",ϱ:"rhov",Ρ:"Rho",σ:"sigma",Σ:"Sigma",ς:"sigmaf",τ:"tau",Τ:"Tau",υ:"upsi",Υ:"Upsilon",ϒ:"Upsi",φ:"phi",ϕ:"phiv",Φ:"Phi",χ:"chi",Χ:"Chi",ψ:"psi",Ψ:"Psi",ω:"omega",Ω:"ohm",а:"acy",А:"Acy",б:"bcy",Б:"Bcy",в:"vcy",В:"Vcy",г:"gcy",Г:"Gcy",ѓ:"gjcy",Ѓ:"GJcy",д:"dcy",Д:"Dcy",ђ:"djcy",Ђ:"DJcy",е:"iecy",Е:"IEcy",ё:"iocy",Ё:"IOcy",є:"jukcy",Є:"Jukcy",ж:"zhcy",Ж:"ZHcy",з:"zcy",З:"Zcy",ѕ:"dscy",Ѕ:"DScy",и:"icy",И:"Icy",і:"iukcy",І:"Iukcy",ї:"yicy",Ї:"YIcy",й:"jcy",Й:"Jcy",ј:"jsercy",Ј:"Jsercy",к:"kcy",К:"Kcy",ќ:"kjcy",Ќ:"KJcy",л:"lcy",Л:"Lcy",љ:"ljcy",Љ:"LJcy",м:"mcy",М:"Mcy",н:"ncy",Н:"Ncy",њ:"njcy",Њ:"NJcy",о:"ocy",О:"Ocy",п:"pcy",П:"Pcy",р:"rcy",Р:"Rcy",с:"scy",С:"Scy",т:"tcy",Т:"Tcy",ћ:"tshcy",Ћ:"TSHcy",у:"ucy",У:"Ucy",ў:"ubrcy",Ў:"Ubrcy",ф:"fcy",Ф:"Fcy",х:"khcy",Х:"KHcy",ц:"tscy",Ц:"TScy",ч:"chcy",Ч:"CHcy",џ:"dzcy",Џ:"DZcy",ш:"shcy",Ш:"SHcy",щ:"shchcy",Щ:"SHCHcy",ъ:"hardcy",Ъ:"HARDcy",ы:"ycy",Ы:"Ycy",ь:"softcy",Ь:"SOFTcy",э:"ecy",Э:"Ecy",ю:"yucy",Ю:"YUcy",я:"yacy",Я:"YAcy",ℵ:"aleph",ℶ:"beth",ℷ:"gimel",ℸ:"daleth"},s=/["&'<>`]/g,d={'"':"&quot;","&":"&amp;","'":"&#x27;","<":"&lt;",">":"&gt;","`":"&#x60;"},p=/&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/,f=/[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,m=/&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g,h={aacute:"á",Aacute:"Á",abreve:"ă",Abreve:"Ă",ac:"∾",acd:"∿",acE:"∾̳",acirc:"â",Acirc:"Â",acute:"´",acy:"а",Acy:"А",aelig:"æ",AElig:"Æ",af:"⁡",afr:"𝔞",Afr:"𝔄",agrave:"à",Agrave:"À",alefsym:"ℵ",aleph:"ℵ",alpha:"α",Alpha:"Α",amacr:"ā",Amacr:"Ā",amalg:"⨿",amp:"&",AMP:"&",and:"∧",And:"⩓",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",aogon:"ą",Aogon:"Ą",aopf:"𝕒",Aopf:"𝔸",ap:"≈",apacir:"⩯",ape:"≊",apE:"⩰",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",aring:"å",Aring:"Å",ascr:"𝒶",Ascr:"𝒜",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",bcy:"б",Bcy:"Б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",beta:"β",Beta:"Β",beth:"ℶ",between:"≬",bfr:"𝔟",Bfr:"𝔅",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bnot:"⌐",bNot:"⫭",bopf:"𝕓",Bopf:"𝔹",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxhD:"╥",boxHd:"╤",boxHD:"╦",boxhu:"┴",boxhU:"╨",boxHu:"╧",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpe:"≏",bumpE:"⪮",bumpeq:"≏",Bumpeq:"≎",cacute:"ć",Cacute:"Ć",cap:"∩",Cap:"⋒",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",ccaron:"č",Ccaron:"Č",ccedil:"ç",Ccedil:"Ç",ccirc:"ĉ",Ccirc:"Ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",cdot:"ċ",Cdot:"Ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",chcy:"ч",CHcy:"Ч",check:"✓",checkmark:"✓",chi:"χ",Chi:"Χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cire:"≗",cirE:"⧃",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",colone:"≔",Colone:"⩴",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",cscr:"𝒸",Cscr:"𝒞",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cup:"∪",Cup:"⋓",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",dArr:"⇓",Darr:"↡",dash:"‐",dashv:"⊣",Dashv:"⫤",dbkarow:"⤏",dblac:"˝",dcaron:"ď",Dcaron:"Ď",dcy:"д",Dcy:"Д",dd:"ⅆ",DD:"ⅅ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",delta:"δ",Delta:"Δ",demptyv:"⦱",dfisht:"⥿",dfr:"𝔡",Dfr:"𝔇",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",djcy:"ђ",DJcy:"Ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",dopf:"𝕕",Dopf:"𝔻",dot:"˙",Dot:"¨",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",downarrow:"↓",Downarrow:"⇓",DownArrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",dscr:"𝒹",Dscr:"𝒟",dscy:"ѕ",DScy:"Ѕ",dsol:"⧶",dstrok:"đ",Dstrok:"Đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",dzcy:"џ",DZcy:"Џ",dzigrarr:"⟿",eacute:"é",Eacute:"É",easter:"⩮",ecaron:"ě",Ecaron:"Ě",ecir:"≖",ecirc:"ê",Ecirc:"Ê",ecolon:"≕",ecy:"э",Ecy:"Э",eDDot:"⩷",edot:"ė",eDot:"≑",Edot:"Ė",ee:"ⅇ",efDot:"≒",efr:"𝔢",Efr:"𝔈",eg:"⪚",egrave:"è",Egrave:"È",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",emacr:"ē",Emacr:"Ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",eng:"ŋ",ENG:"Ŋ",ensp:" ",eogon:"ę",Eogon:"Ę",eopf:"𝕖",Eopf:"𝔼",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",epsilon:"ε",Epsilon:"Ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",esim:"≂",Esim:"⩳",eta:"η",Eta:"Η",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",fcy:"ф",Fcy:"Ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",ffr:"𝔣",Ffr:"𝔉",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",fopf:"𝕗",Fopf:"𝔽",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",gamma:"γ",Gamma:"Γ",gammad:"ϝ",Gammad:"Ϝ",gap:"⪆",gbreve:"ğ",Gbreve:"Ğ",Gcedil:"Ģ",gcirc:"ĝ",Gcirc:"Ĝ",gcy:"г",Gcy:"Г",gdot:"ġ",Gdot:"Ġ",ge:"≥",gE:"≧",gel:"⋛",gEl:"⪌",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",gfr:"𝔤",Gfr:"𝔊",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",gjcy:"ѓ",GJcy:"Ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",gopf:"𝕘",Gopf:"𝔾",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",gscr:"ℊ",Gscr:"𝒢",gsim:"≳",gsime:"⪎",gsiml:"⪐",gt:">",Gt:"≫",GT:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",hardcy:"ъ",HARDcy:"Ъ",harr:"↔",hArr:"⇔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",hcirc:"ĥ",Hcirc:"Ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",hstrok:"ħ",Hstrok:"Ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",iacute:"í",Iacute:"Í",ic:"⁣",icirc:"î",Icirc:"Î",icy:"и",Icy:"И",Idot:"İ",iecy:"е",IEcy:"Е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",igrave:"ì",Igrave:"Ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",ijlig:"ĳ",IJlig:"Ĳ",Im:"ℑ",imacr:"ī",Imacr:"Ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",int:"∫",Int:"∬",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",iocy:"ё",IOcy:"Ё",iogon:"į",Iogon:"Į",iopf:"𝕚",Iopf:"𝕀",iota:"ι",Iota:"Ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",itilde:"ĩ",Itilde:"Ĩ",iukcy:"і",Iukcy:"І",iuml:"ï",Iuml:"Ï",jcirc:"ĵ",Jcirc:"Ĵ",jcy:"й",Jcy:"Й",jfr:"𝔧",Jfr:"𝔍",jmath:"ȷ",jopf:"𝕛",Jopf:"𝕁",jscr:"𝒿",Jscr:"𝒥",jsercy:"ј",Jsercy:"Ј",jukcy:"є",Jukcy:"Є",kappa:"κ",Kappa:"Κ",kappav:"ϰ",kcedil:"ķ",Kcedil:"Ķ",kcy:"к",Kcy:"К",kfr:"𝔨",Kfr:"𝔎",kgreen:"ĸ",khcy:"х",KHcy:"Х",kjcy:"ќ",KJcy:"Ќ",kopf:"𝕜",Kopf:"𝕂",kscr:"𝓀",Kscr:"𝒦",lAarr:"⇚",lacute:"ĺ",Lacute:"Ĺ",laemptyv:"⦴",lagran:"ℒ",lambda:"λ",Lambda:"Λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larr:"←",lArr:"⇐",Larr:"↞",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",latail:"⤙",lAtail:"⤛",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",lcaron:"ľ",Lcaron:"Ľ",lcedil:"ļ",Lcedil:"Ļ",lceil:"⌈",lcub:"{",lcy:"л",Lcy:"Л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",leftarrow:"←",Leftarrow:"⇐",LeftArrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",Leftrightarrow:"⇔",LeftRightArrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",leg:"⋚",lEg:"⪋",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",lfr:"𝔩",Lfr:"𝔏",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",ljcy:"љ",LJcy:"Љ",ll:"≪",Ll:"⋘",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",lmidot:"ŀ",Lmidot:"Ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",Longleftarrow:"⟸",LongLeftArrow:"⟵",longleftrightarrow:"⟷",Longleftrightarrow:"⟺",LongLeftRightArrow:"⟷",longmapsto:"⟼",longrightarrow:"⟶",Longrightarrow:"⟹",LongRightArrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",lopf:"𝕝",Lopf:"𝕃",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",lstrok:"ł",Lstrok:"Ł",lt:"<",Lt:"≪",LT:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",Map:"⤅",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",mcy:"м",Mcy:"М",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",mfr:"𝔪",Mfr:"𝔐",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",mopf:"𝕞",Mopf:"𝕄",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",mu:"μ",Mu:"Μ",multimap:"⊸",mumap:"⊸",nabla:"∇",nacute:"ń",Nacute:"Ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",ncaron:"ň",Ncaron:"Ň",ncedil:"ņ",Ncedil:"Ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",ncy:"н",Ncy:"Н",ndash:"–",ne:"≠",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",nfr:"𝔫",Nfr:"𝔑",nge:"≱",ngE:"≧̸",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",ngt:"≯",nGt:"≫⃒",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",njcy:"њ",NJcy:"Њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nle:"≰",nlE:"≦̸",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nlt:"≮",nLt:"≪⃒",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",not:"¬",Not:"⫬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrarr:"↛",nrArr:"⇏",nrarrc:"⤳̸",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",nscr:"𝓃",Nscr:"𝒩",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsube:"⊈",nsubE:"⫅̸",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupe:"⊉",nsupE:"⫆̸",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",ntilde:"ñ",Ntilde:"Ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",nu:"ν",Nu:"Ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",oacute:"ó",Oacute:"Ó",oast:"⊛",ocir:"⊚",ocirc:"ô",Ocirc:"Ô",ocy:"о",Ocy:"О",odash:"⊝",odblac:"ő",Odblac:"Ő",odiv:"⨸",odot:"⊙",odsold:"⦼",oelig:"œ",OElig:"Œ",ofcir:"⦿",ofr:"𝔬",Ofr:"𝔒",ogon:"˛",ograve:"ò",Ograve:"Ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",omacr:"ō",Omacr:"Ō",omega:"ω",Omega:"Ω",omicron:"ο",Omicron:"Ο",omid:"⦶",ominus:"⊖",oopf:"𝕠",Oopf:"𝕆",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",or:"∨",Or:"⩔",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",oscr:"ℴ",Oscr:"𝒪",oslash:"ø",Oslash:"Ø",osol:"⊘",otilde:"õ",Otilde:"Õ",otimes:"⊗",Otimes:"⨷",otimesas:"⨶",ouml:"ö",Ouml:"Ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",pcy:"п",Pcy:"П",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",pfr:"𝔭",Pfr:"𝔓",phi:"φ",Phi:"Φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",pi:"π",Pi:"Π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",pr:"≺",Pr:"⪻",prap:"⪷",prcue:"≼",pre:"⪯",prE:"⪳",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",pscr:"𝓅",Pscr:"𝒫",psi:"ψ",Psi:"Ψ",puncsp:" ",qfr:"𝔮",Qfr:"𝔔",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",qscr:"𝓆",Qscr:"𝒬",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",racute:"ŕ",Racute:"Ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarr:"→",rArr:"⇒",Rarr:"↠",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",rarrtl:"↣",Rarrtl:"⤖",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",rcaron:"ř",Rcaron:"Ř",rcedil:"ŗ",Rcedil:"Ŗ",rceil:"⌉",rcub:"}",rcy:"р",Rcy:"Р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",rho:"ρ",Rho:"Ρ",rhov:"ϱ",RightAngleBracket:"⟩",rightarrow:"→",Rightarrow:"⇒",RightArrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",sacute:"ś",Sacute:"Ś",sbquo:"‚",sc:"≻",Sc:"⪼",scap:"⪸",scaron:"š",Scaron:"Š",sccue:"≽",sce:"⪰",scE:"⪴",scedil:"ş",Scedil:"Ş",scirc:"ŝ",Scirc:"Ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",scy:"с",Scy:"С",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",sfr:"𝔰",Sfr:"𝔖",sfrown:"⌢",sharp:"♯",shchcy:"щ",SHCHcy:"Щ",shcy:"ш",SHcy:"Ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",sigma:"σ",Sigma:"Σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",softcy:"ь",SOFTcy:"Ь",sol:"/",solb:"⧄",solbar:"⌿",sopf:"𝕤",Sopf:"𝕊",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",sscr:"𝓈",Sscr:"𝒮",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",star:"☆",Star:"⋆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",sube:"⊆",subE:"⫅",subedot:"⫃",submult:"⫁",subne:"⊊",subnE:"⫋",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup:"⊃",Sup:"⋑",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supe:"⊇",supE:"⫆",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supne:"⊋",supnE:"⫌",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",tau:"τ",Tau:"Τ",tbrk:"⎴",tcaron:"ť",Tcaron:"Ť",tcedil:"ţ",Tcedil:"Ţ",tcy:"т",Tcy:"Т",tdot:"⃛",telrec:"⌕",tfr:"𝔱",Tfr:"𝔗",there4:"∴",therefore:"∴",Therefore:"∴",theta:"θ",Theta:"Θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",thorn:"þ",THORN:"Þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",topf:"𝕥",Topf:"𝕋",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",tscr:"𝓉",Tscr:"𝒯",tscy:"ц",TScy:"Ц",tshcy:"ћ",TSHcy:"Ћ",tstrok:"ŧ",Tstrok:"Ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",uacute:"ú",Uacute:"Ú",uarr:"↑",uArr:"⇑",Uarr:"↟",Uarrocir:"⥉",ubrcy:"ў",Ubrcy:"Ў",ubreve:"ŭ",Ubreve:"Ŭ",ucirc:"û",Ucirc:"Û",ucy:"у",Ucy:"У",udarr:"⇅",udblac:"ű",Udblac:"Ű",udhar:"⥮",ufisht:"⥾",ufr:"𝔲",Ufr:"𝔘",ugrave:"ù",Ugrave:"Ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",umacr:"ū",Umacr:"Ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",uogon:"ų",Uogon:"Ų",uopf:"𝕦",Uopf:"𝕌",uparrow:"↑",Uparrow:"⇑",UpArrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",updownarrow:"↕",Updownarrow:"⇕",UpDownArrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",upsilon:"υ",Upsilon:"Υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",uring:"ů",Uring:"Ů",urtri:"◹",uscr:"𝓊",Uscr:"𝒰",utdot:"⋰",utilde:"ũ",Utilde:"Ũ",utri:"▵",utrif:"▴",uuarr:"⇈",uuml:"ü",Uuml:"Ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",vcy:"в",Vcy:"В",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",vee:"∨",Vee:"⋁",veebar:"⊻",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",vfr:"𝔳",Vfr:"𝔙",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",vopf:"𝕧",Vopf:"𝕍",vprop:"∝",vrtri:"⊳",vscr:"𝓋",Vscr:"𝒱",vsubne:"⊊︀",vsubnE:"⫋︀",vsupne:"⊋︀",vsupnE:"⫌︀",Vvdash:"⊪",vzigzag:"⦚",wcirc:"ŵ",Wcirc:"Ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",wfr:"𝔴",Wfr:"𝔚",wopf:"𝕨",Wopf:"𝕎",wp:"℘",wr:"≀",wreath:"≀",wscr:"𝓌",Wscr:"𝒲",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",xfr:"𝔵",Xfr:"𝔛",xharr:"⟷",xhArr:"⟺",xi:"ξ",Xi:"Ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",xopf:"𝕩",Xopf:"𝕏",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",xscr:"𝓍",Xscr:"𝒳",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",yacute:"ý",Yacute:"Ý",yacy:"я",YAcy:"Я",ycirc:"ŷ",Ycirc:"Ŷ",ycy:"ы",Ycy:"Ы",yen:"¥",yfr:"𝔶",Yfr:"𝔜",yicy:"ї",YIcy:"Ї",yopf:"𝕪",Yopf:"𝕐",yscr:"𝓎",Yscr:"𝒴",yucy:"ю",YUcy:"Ю",yuml:"ÿ",Yuml:"Ÿ",zacute:"ź",Zacute:"Ź",zcaron:"ž",Zcaron:"Ž",zcy:"з",Zcy:"З",zdot:"ż",Zdot:"Ż",zeetrf:"ℨ",ZeroWidthSpace:"​",zeta:"ζ",Zeta:"Ζ",zfr:"𝔷",Zfr:"ℨ",zhcy:"ж",ZHcy:"Ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",zscr:"𝓏",Zscr:"𝒵",zwj:"‍",zwnj:"‌"},v={aacute:"á",Aacute:"Á",acirc:"â",Acirc:"Â",acute:"´",aelig:"æ",AElig:"Æ",agrave:"à",Agrave:"À",amp:"&",AMP:"&",aring:"å",Aring:"Å",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",brvbar:"¦",ccedil:"ç",Ccedil:"Ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",Eacute:"É",ecirc:"ê",Ecirc:"Ê",egrave:"è",Egrave:"È",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",iacute:"í",Iacute:"Í",icirc:"î",Icirc:"Î",iexcl:"¡",igrave:"ì",Igrave:"Ì",iquest:"¿",iuml:"ï",Iuml:"Ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",Ntilde:"Ñ",oacute:"ó",Oacute:"Ó",ocirc:"ô",Ocirc:"Ô",ograve:"ò",Ograve:"Ò",ordf:"ª",ordm:"º",oslash:"ø",Oslash:"Ø",otilde:"õ",Otilde:"Õ",ouml:"ö",Ouml:"Ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",THORN:"Þ",times:"×",uacute:"ú",Uacute:"Ú",ucirc:"û",Ucirc:"Û",ugrave:"ù",Ugrave:"Ù",uml:"¨",uuml:"ü",Uuml:"Ü",yacute:"ý",Yacute:"Ý",yen:"¥",yuml:"ÿ"},g={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"},y=[1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65e3,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111],b=String.fromCharCode,A={}.hasOwnProperty,x=function(e,t){return A.call(e,t)},w=function(e,t){if(!e)return t;var n,r={};for(n in t)r[n]=x(e,n)?e[n]:t[n];return r},C=function(e,t){var n="";return e>=55296&&e<=57343||e>1114111?(t&&k("character reference outside the permissible Unicode range"),"�"):x(g,e)?(t&&k("disallowed character reference"),g[e]):(t&&function(e,t){for(var n=-1,r=e.length;++n<r;)if(e[n]==t)return!0;return!1}(y,e)&&k("disallowed character reference"),e>65535&&(n+=b((e-=65536)>>>10&1023|55296),e=56320|1023&e),n+=b(e))},S=function(e){return"&#x"+e.toString(16).toUpperCase()+";"},E=function(e){return"&#"+e+";"},k=function(e){throw Error("Parse error: "+e)},B=function(e,t){(t=w(t,B.options)).strict&&f.test(e)&&k("forbidden code point");var n=t.encodeEverything,r=t.useNamedReferences,o=t.allowUnsafeSymbols,d=t.decimal?E:S,p=function(e){return d(e.charCodeAt(0))};return n?(e=e.replace(i,(function(e){return r&&x(c,e)?"&"+c[e]+";":p(e)})),r&&(e=e.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;").replace(/&#x66;&#x6A;/g,"&fjlig;")),r&&(e=e.replace(u,(function(e){return"&"+c[e]+";"})))):r?(o||(e=e.replace(s,(function(e){return"&"+c[e]+";"}))),e=(e=e.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;")).replace(u,(function(e){return"&"+c[e]+";"}))):o||(e=e.replace(s,p)),e.replace(a,(function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1);return d(1024*(t-55296)+n-56320+65536)})).replace(l,p)};B.options={allowUnsafeSymbols:!1,encodeEverything:!1,strict:!1,useNamedReferences:!1,decimal:!1};var M=function(e,t){var n=(t=w(t,M.options)).strict;return n&&p.test(e)&&k("malformed character reference"),e.replace(m,(function(e,r,o,a,i,l,u,c,s){var d,p,f,m,g,y;return r?h[g=r]:o?(g=o,(y=a)&&t.isAttributeValue?(n&&"="==y&&k("`&` did not start a character reference"),e):(n&&k("named character reference was not terminated by a semicolon"),v[g]+(y||""))):i?(f=i,p=l,n&&!p&&k("character reference was not terminated by a semicolon"),d=parseInt(f,10),C(d,n)):u?(m=u,p=c,n&&!p&&k("character reference was not terminated by a semicolon"),d=parseInt(m,16),C(d,n)):(n&&k("named character reference was not terminated by a semicolon"),e)}))};M.options={isAttributeValue:!1,strict:!1};var O={version:"1.2.0",encode:B,decode:M,escape:function(e){return e.replace(s,(function(e){return d[e]}))},unescape:M};void 0===(r=function(){return O}.call(t,n,t,e))||(e.exports=r)}()},4146:(e,t,n)=>{"use strict";var r=n(3404),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=f(n);o&&o!==m&&e(t,o,r)}var i=s(n);d&&(i=i.concat(d(n)));for(var l=u(t),h=u(n),v=0;v<i.length;++v){var g=i[v];if(!(a[g]||r&&r[g]||h&&h[g]||l&&l[g])){var y=p(n,g);try{c(t,g,y)}catch(e){}}}}return t}},3072:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,A=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case d:case a:case l:case i:case f:return e;default:switch(e=e&&e.$$typeof){case c:case p:case v:case h:case u:return e;default:return t}}case o:return t}}}function w(e){return x(e)===d}t.AsyncMode=s,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=u,t.Element=r,t.ForwardRef=p,t.Fragment=a,t.Lazy=v,t.Memo=h,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=f,t.isAsyncMode=function(e){return w(e)||x(e)===s},t.isConcurrentMode=w,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===v},t.isMemo=function(e){return x(e)===h},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===i||e===f||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===h||e.$$typeof===u||e.$$typeof===c||e.$$typeof===p||e.$$typeof===y||e.$$typeof===b||e.$$typeof===A||e.$$typeof===g)},t.typeOf=x},3404:(e,t,n)=>{"use strict";e.exports=n(3072)},1441:(e,t,n)=>{var r=n(8028),o=function(e){var t="",n=Object.keys(e);return n.forEach((function(o,a){var i=e[o];(function(e){return/[height|width]$/.test(e)})(o=r(o))&&"number"==typeof i&&(i+="px"),t+=!0===i?o:!1===i?"not "+o:"("+o+": "+i+")",a<n.length-1&&(t+=" and ")})),t};e.exports=function(e){var t="";return"string"==typeof e?e:e instanceof Array?(e.forEach((function(n,r){t+=o(n),r<e.length-1&&(t+=", ")})),t):o(e)}},181:(e,t,n)=>{var r=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,l=parseInt,u="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,c="object"==typeof self&&self&&self.Object===Object&&self,s=u||c||Function("return this")(),d=Object.prototype.toString,p=Math.max,f=Math.min,m=function(){return s.Date.now()};function h(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function v(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==d.call(e)}(e))return NaN;if(h(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=h(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(r,"");var n=a.test(e);return n||i.test(e)?l(e.slice(2),n?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var r,o,a,i,l,u,c=0,s=!1,d=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function y(t){var n=r,a=o;return r=o=void 0,c=t,i=e.apply(a,n)}function b(e){var n=e-u;return void 0===u||n>=t||n<0||d&&e-c>=a}function A(){var e=m();if(b(e))return x(e);l=setTimeout(A,function(e){var n=t-(e-u);return d?f(n,a-(e-c)):n}(e))}function x(e){return l=void 0,g&&r?y(e):(r=o=void 0,i)}function w(){var e=m(),n=b(e);if(r=arguments,o=this,u=e,n){if(void 0===l)return function(e){return c=e,l=setTimeout(A,t),s?y(e):i}(u);if(d)return l=setTimeout(A,t),y(u)}return void 0===l&&(l=setTimeout(A,t)),i}return t=v(t)||0,h(n)&&(s=!!n.leading,a=(d="maxWait"in n)?p(v(n.maxWait)||0,t):a,g="trailing"in n?!!n.trailing:g),w.cancel=function(){void 0!==l&&clearTimeout(l),c=0,r=u=o=l=void 0},w.flush=function(){return void 0===l?i:x(m())},w}},2551:(e,t,n)=>{"use strict";var r=n(6540),o=n(9982);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},m={};function h(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(m,e)||!d.call(f,e)&&(p.test(e)?m[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),w=Symbol.for("react.portal"),C=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),B=Symbol.for("react.context"),M=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),j=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var _=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var P=Symbol.iterator;function z(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var D,R=Object.assign;function L(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var I=!1;function F(e,t){if(!e||I)return"";I=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{I=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?L(e):""}function q(e){switch(e.tag){case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case w:return"Portal";case E:return"Profiler";case S:return"StrictMode";case O:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case B:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case M:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case j:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function G(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function H(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function V(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return R({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Z(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){Z(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&V(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return R({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function ae(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,de=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(fe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ge=R({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ae=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,Ce=null,Se=null;function Ee(e){if(e=Ao(e)){if("function"!=typeof we)throw Error(a(280));var t=e.stateNode;t&&(t=wo(t),we(e.stateNode,e.type,t))}}function ke(e){Ce?Se?Se.push(e):Se=[e]:Ce=e}function Be(){if(Ce){var e=Ce,t=Se;if(Se=Ce=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Me(e,t){return e(t)}function Oe(){}var Ne=!1;function Te(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Me(e,t,n)}finally{Ne=!1,(null!==Ce||null!==Se)&&(Oe(),Be())}}function je(e,t){var n=e.stateNode;if(null===n)return null;var r=wo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var _e=!1;if(s)try{var Pe={};Object.defineProperty(Pe,"passive",{get:function(){_e=!0}}),window.addEventListener("test",Pe,Pe),window.removeEventListener("test",Pe,Pe)}catch(se){_e=!1}function ze(e,t,n,r,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var De=!1,Re=null,Le=!1,Ie=null,Fe={onError:function(e){De=!0,Re=e}};function qe(e,t,n,r,o,a,i,l,u){De=!1,Re=null,ze.apply(Fe,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(Ue(e)!==e)throw Error(a(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return $e(o),e;if(i===r)return $e(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var He=o.unstable_scheduleCallback,Ve=o.unstable_cancelCallback,Qe=o.unstable_shouldYield,Ke=o.unstable_requestPaint,Ze=o.unstable_now,Xe=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,ct=64,st=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=dt(l):0!=(a&=i)&&(r=dt(a))}else 0!=(i=n&~o)?r=dt(i):0!==a&&(r=dt(a));if(0===r)return 0;if(0!==t&&t!==r&&!(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&4194240&a))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ct;return!(4194240&(ct<<=1))&&(ct=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function At(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var xt,wt,Ct,St,Et,kt=!1,Bt=[],Mt=null,Ot=null,Nt=null,Tt=new Map,jt=new Map,_t=[],Pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function zt(e,t){switch(e){case"focusin":case"focusout":Mt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":jt.delete(t.pointerId)}}function Dt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=Ao(t))&&wt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Rt(e){var t=bo(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void Et(e.priority,(function(){Ct(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Ao(n))&&wt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ae=r,n.target.dispatchEvent(r),Ae=null,t.shift()}return!0}function It(e,t,n){Lt(e)&&n.delete(t)}function Ft(){kt=!1,null!==Mt&&Lt(Mt)&&(Mt=null),null!==Ot&&Lt(Ot)&&(Ot=null),null!==Nt&&Lt(Nt)&&(Nt=null),Tt.forEach(It),jt.forEach(It)}function qt(e,t){e.blockedOn===t&&(e.blockedOn=null,kt||(kt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function Ut(e){function t(t){return qt(t,e)}if(0<Bt.length){qt(Bt[0],e);for(var n=1;n<Bt.length;n++){var r=Bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Mt&&qt(Mt,e),null!==Ot&&qt(Ot,e),null!==Nt&&qt(Nt,e),Tt.forEach(t),jt.forEach(t),n=0;n<_t.length;n++)(r=_t[n]).blockedOn===e&&(r.blockedOn=null);for(;0<_t.length&&null===(n=_t[0]).blockedOn;)Rt(n),null===n.blockedOn&&_t.shift()}var Gt=A.ReactCurrentBatchConfig,$t=!0;function Wt(e,t,n,r){var o=bt,a=Gt.transition;Gt.transition=null;try{bt=1,Ht(e,t,n,r)}finally{bt=o,Gt.transition=a}}function Yt(e,t,n,r){var o=bt,a=Gt.transition;Gt.transition=null;try{bt=4,Ht(e,t,n,r)}finally{bt=o,Gt.transition=a}}function Ht(e,t,n,r){if($t){var o=Qt(e,t,n,r);if(null===o)$r(e,t,r,Vt,n),zt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Mt=Dt(Mt,e,t,n,r,o),!0;case"dragenter":return Ot=Dt(Ot,e,t,n,r,o),!0;case"mouseover":return Nt=Dt(Nt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Tt.set(a,Dt(Tt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,jt.set(a,Dt(jt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(zt(e,r),4&t&&-1<Pt.indexOf(e)){for(;null!==o;){var a=Ao(o);if(null!==a&&xt(a),null===(a=Qt(e,t,n,r))&&$r(e,t,r,Vt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else $r(e,t,r,null,n)}}var Vt=null;function Qt(e,t,n,r){if(Vt=null,null!==(e=bo(e=xe(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ge(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Vt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Zt=null,Xt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Xt,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return R(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(cn),dn=R({},cn,{view:0,detail:0}),pn=on(dn),fn=R({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=on(fn),hn=on(R({},fn,{dataTransfer:0})),vn=on(R({},dn,{relatedTarget:0})),gn=on(R({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=R({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(yn),An=on(R({},cn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function En(){return Sn}var kn=R({},dn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Bn=on(kn),Mn=on(R({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=on(R({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Nn=on(R({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=R({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),jn=on(Tn),_n=[9,13,27,32],Pn=s&&"CompositionEvent"in window,zn=null;s&&"documentMode"in document&&(zn=document.documentMode);var Dn=s&&"TextEvent"in window&&!zn,Rn=s&&(!Pn||zn&&8<zn&&11>=zn),Ln=String.fromCharCode(32),In=!1;function Fn(e,t){switch(e){case"keyup":return-1!==_n.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function qn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Gn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Gn[e.type]:"textarea"===t}function Wn(e,t,n,r){ke(r),0<(t=Yr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Hn=null;function Vn(e){Lr(e,0)}function Qn(e){if(H(xo(e)))return e}function Kn(e,t){if("change"===e)return t}var Zn=!1;if(s){var Xn;if(s){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Xn=Jn}else Xn=!1;Zn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),Hn=Yn=null)}function nr(e){if("value"===e.propertyName&&Qn(Hn)){var t=[];Wn(t,Hn,e,xe(e)),Te(Vn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Hn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Hn)}function ar(e,t){if("click"===e)return Qn(t)}function ir(e,t){if("input"===e||"change"===e)return Qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=V();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=V((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=sr(n,a);var i=sr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=s&&"documentMode"in document&&11>=document.documentMode,vr=null,gr=null,yr=null,br=!1;function Ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==V(r)||(r="selectionStart"in(r=vr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=Yr(gr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},Cr={},Sr={};function Er(e){if(Cr[e])return Cr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return Cr[e]=n[t];return e}s&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var kr=Er("animationend"),Br=Er("animationiteration"),Mr=Er("animationstart"),Or=Er("transitionend"),Nr=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function jr(e,t){Nr.set(e,t),u(t,[e])}for(var _r=0;_r<Tr.length;_r++){var Pr=Tr[_r];jr(Pr.toLowerCase(),"on"+(Pr[0].toUpperCase()+Pr.slice(1)))}jr(kr,"onAnimationEnd"),jr(Br,"onAnimationIteration"),jr(Mr,"onAnimationStart"),jr("dblclick","onDoubleClick"),jr("focusin","onFocus"),jr("focusout","onBlur"),jr(Or,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(zr));function Rr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,c){if(qe.apply(this,arguments),De){if(!De)throw Error(a(198));var s=Re;De=!1,Re=null,Le||(Le=!0,Ie=s)}}(r,t,void 0,e),e.currentTarget=null}function Lr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Rr(o,l,c),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Rr(o,l,c),a=u}}}if(Le)throw e=Ie,Le=!1,Ie=null,e}function Ir(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Gr(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),Gr(n,e,r,t)}var qr="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[qr]){e[qr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[qr]||(t[qr]=!0,Fr("selectionchange",!1,t))}}function Gr(e,t,n,r){switch(Kt(t)){case 1:var o=Wt;break;case 4:o=Yt;break;default:o=Ht}n=o.bind(null,t,n,e),o=void 0,!_e||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=a,o=xe(n),i=[];e:{var l=Nr.get(e);if(void 0!==l){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Bn;break;case"focusin":c="focus",u=vn;break;case"focusout":c="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case kr:case Br:case Mr:u=gn;break;case Or:u=Nn;break;case"scroll":u=pn;break;case"wheel":u=jn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Mn}var s=!!(4&t),d=!s&&"scroll"===e,p=s?null!==l?l+"Capture":null:l;s=[];for(var f,m=r;null!==m;){var h=(f=m).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==p&&null!=(h=je(m,p))&&s.push(Wr(m,h,f))),d)break;m=m.return}0<s.length&&(l=new u(l,c,null,n,o),i.push({event:l,listeners:s}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Ae||!(c=n.relatedTarget||n.fromElement)||!bo(c)&&!c[ho])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?bo(c):null)&&(c!==(d=Ue(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=mn,h="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(s=Mn,h="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==u?l:xo(u),f=null==c?l:xo(c),(l=new s(h,m+"leave",u,n,o)).target=d,l.relatedTarget=f,h=null,bo(o)===r&&((s=new s(p,m+"enter",c,n,o)).target=f,s.relatedTarget=d,h=s),d=h,u&&c)e:{for(p=c,m=0,f=s=u;f;f=Hr(f))m++;for(f=0,h=p;h;h=Hr(h))f++;for(;0<m-f;)s=Hr(s),m--;for(;0<f-m;)p=Hr(p),f--;for(;m--;){if(s===p||null!==p&&s===p.alternate)break e;s=Hr(s),p=Hr(p)}s=null}else s=null;null!==u&&Vr(i,l,u,s,!1),null!==c&&null!==d&&Vr(i,d,c,s,!0)}if("select"===(u=(l=r?xo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Kn;else if($n(l))if(Zn)v=ir;else{v=or;var g=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ar);switch(v&&(v=v(e,r))?Wn(i,v,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ee(l,"number",l.value)),g=r?xo(r):window,e){case"focusin":($n(g)||"true"===g.contentEditable)&&(vr=g,gr=r,yr=null);break;case"focusout":yr=gr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,Ar(i,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":Ar(i,n,o)}var y;if(Pn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Rn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(y=en()):(Xt="value"in(Zt=o)?Zt.value:Zt.textContent,Un=!0)),0<(g=Yr(r,b)).length&&(b=new An(b,e,null,n,o),i.push({event:b,listeners:g}),(y||null!==(y=qn(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return qn(t);case"keypress":return 32!==t.which?null:(In=!0,Ln);case"textInput":return(e=t.data)===Ln&&In?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Pn&&Fn(e,t)?(e=en(),Jt=Xt=Zt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Rn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(o=new An("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Lr(i,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=je(e,n))&&r.unshift(Wr(e,a,o)),null!=(a=je(e,t))&&r.push(Wr(e,a,o))),e=e.return}return r}function Hr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Vr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=je(n,a))&&i.unshift(Wr(n,u,l)):o||null!=(u=je(n,a))&&i.push(Wr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Zr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Kr,"")}function Xr(e,t,n){if(t=Zr(t),Zr(e)!==t&&n)throw Error(a(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Ut(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var po=Math.random().toString(36).slice(2),fo="__reactFiber$"+po,mo="__reactProps$"+po,ho="__reactContainer$"+po,vo="__reactEvents$"+po,go="__reactListeners$"+po,yo="__reactHandles$"+po;function bo(e){var t=e[fo];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ho]||n[fo]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[fo])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function Ao(e){return!(e=e[fo]||e[ho])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function wo(e){return e[mo]||null}var Co=[],So=-1;function Eo(e){return{current:e}}function ko(e){0>So||(e.current=Co[So],Co[So]=null,So--)}function Bo(e,t){So++,Co[So]=e.current,e.current=t}var Mo={},Oo=Eo(Mo),No=Eo(!1),To=Mo;function jo(e,t){var n=e.type.contextTypes;if(!n)return Mo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function _o(e){return null!=e.childContextTypes}function Po(){ko(No),ko(Oo)}function zo(e,t,n){if(Oo.current!==Mo)throw Error(a(168));Bo(Oo,t),Bo(No,n)}function Do(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,G(e)||"Unknown",o));return R({},n,r)}function Ro(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Mo,To=Oo.current,Bo(Oo,e),Bo(No,No.current),!0}function Lo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Do(e,t,To),r.__reactInternalMemoizedMergedChildContext=e,ko(No),ko(Oo),Bo(Oo,e)):ko(No),Bo(No,n)}var Io=null,Fo=!1,qo=!1;function Uo(e){null===Io?Io=[e]:Io.push(e)}function Go(){if(!qo&&null!==Io){qo=!0;var e=0,t=bt;try{var n=Io;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Io=null,Fo=!1}catch(t){throw null!==Io&&(Io=Io.slice(e+1)),He(Je,Go),t}finally{bt=t,qo=!1}}return null}var $o=[],Wo=0,Yo=null,Ho=0,Vo=[],Qo=0,Ko=null,Zo=1,Xo="";function Jo(e,t){$o[Wo++]=Ho,$o[Wo++]=Yo,Yo=e,Ho=t}function ea(e,t,n){Vo[Qo++]=Zo,Vo[Qo++]=Xo,Vo[Qo++]=Ko,Ko=e;var r=Zo;e=Xo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Zo=1<<32-it(t)+o|n<<o|r,Xo=a+e}else Zo=1<<a|n<<o|r,Xo=e}function ta(e){null!==e.return&&(Jo(e,1),ea(e,1,0))}function na(e){for(;e===Yo;)Yo=$o[--Wo],$o[Wo]=null,Ho=$o[--Wo],$o[Wo]=null;for(;e===Ko;)Ko=Vo[--Qo],Vo[Qo]=null,Xo=Vo[--Qo],Vo[Qo]=null,Zo=Vo[--Qo],Vo[Qo]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Tc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ko?{id:Zo,overflow:Xo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Tc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ca(e){return!(!(1&e.mode)||128&e.flags)}function sa(e){if(aa){var t=oa;if(t){var n=t;if(!ua(e,t)){if(ca(e))throw Error(a(418));t=co(n.nextSibling);var r=ra;t&&ua(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ca(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function da(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function pa(e){if(e!==ra)return!1;if(!aa)return da(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ca(e))throw fa(),Error(a(418));for(;t;)la(e,t),t=co(t.nextSibling)}if(da(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?co(e.stateNode.nextSibling):null;return!0}function fa(){for(var e=oa;e;)e=co(e.nextSibling)}function ma(){oa=ra=null,aa=!1}function ha(e){null===ia?ia=[e]:ia.push(e)}var va=A.ReactCurrentBatchConfig;function ga(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ya(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ba(e){return(0,e._init)(e._payload)}function Aa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=_c(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Rc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){var a=n.type;return a===C?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===j&&ba(a)===t.type)?((r=o(t,n.props)).ref=ga(e,t,n),r.return=e,r):((r=Pc(n.type,n.key,n.props,null,e.mode,r)).ref=ga(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Lc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=zc(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Rc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Pc(t.type,t.key,t.props,null,e.mode,n)).ref=ga(e,null,t),n.return=e,n;case w:return(t=Lc(t,e.mode,n)).return=e,t;case j:return p(e,(0,t._init)(t._payload),n)}if(te(t)||z(t))return(t=zc(t,e.mode,n,null)).return=e,t;ya(e,t)}return null}function f(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?c(e,t,n,r):null;case w:return n.key===o?s(e,t,n,r):null;case j:return f(e,t,(o=n._init)(n._payload),r)}if(te(n)||z(n))return null!==o?null:d(e,t,n,r,null);ya(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case w:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case j:return m(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||z(r))return d(t,e=e.get(n)||null,r,o,null);ya(t,r)}return null}function h(o,a,l,u){for(var c=null,s=null,d=a,h=a=0,v=null;null!==d&&h<l.length;h++){d.index>h?(v=d,d=null):v=d.sibling;var g=f(o,d,l[h],u);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(o,d),a=i(g,a,h),null===s?c=g:s.sibling=g,s=g,d=v}if(h===l.length)return n(o,d),aa&&Jo(o,h),c;if(null===d){for(;h<l.length;h++)null!==(d=p(o,l[h],u))&&(a=i(d,a,h),null===s?c=d:s.sibling=d,s=d);return aa&&Jo(o,h),c}for(d=r(o,d);h<l.length;h++)null!==(v=m(d,o,h,l[h],u))&&(e&&null!==v.alternate&&d.delete(null===v.key?h:v.key),a=i(v,a,h),null===s?c=v:s.sibling=v,s=v);return e&&d.forEach((function(e){return t(o,e)})),aa&&Jo(o,h),c}function v(o,l,u,c){var s=z(u);if("function"!=typeof s)throw Error(a(150));if(null==(u=s.call(u)))throw Error(a(151));for(var d=s=null,h=l,v=l=0,g=null,y=u.next();null!==h&&!y.done;v++,y=u.next()){h.index>v?(g=h,h=null):g=h.sibling;var b=f(o,h,y.value,c);if(null===b){null===h&&(h=g);break}e&&h&&null===b.alternate&&t(o,h),l=i(b,l,v),null===d?s=b:d.sibling=b,d=b,h=g}if(y.done)return n(o,h),aa&&Jo(o,v),s;if(null===h){for(;!y.done;v++,y=u.next())null!==(y=p(o,y.value,c))&&(l=i(y,l,v),null===d?s=y:d.sibling=y,d=y);return aa&&Jo(o,v),s}for(h=r(o,h);!y.done;v++,y=u.next())null!==(y=m(h,o,v,y.value,c))&&(e&&null!==y.alternate&&h.delete(null===y.key?v:y.key),l=i(y,l,v),null===d?s=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(o,e)})),aa&&Jo(o,v),s}return function e(r,a,i,u){if("object"==typeof i&&null!==i&&i.type===C&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var c=i.key,s=a;null!==s;){if(s.key===c){if((c=i.type)===C){if(7===s.tag){n(r,s.sibling),(a=o(s,i.props.children)).return=r,r=a;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===j&&ba(c)===s.type){n(r,s.sibling),(a=o(s,i.props)).ref=ga(r,s,i),a.return=r,r=a;break e}n(r,s);break}t(r,s),s=s.sibling}i.type===C?((a=zc(i.props.children,r.mode,u,i.key)).return=r,r=a):((u=Pc(i.type,i.key,i.props,null,r.mode,u)).ref=ga(r,a,i),u.return=r,r=u)}return l(r);case w:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Lc(i,r.mode,u)).return=r,r=a}return l(r);case j:return e(r,a,(s=i._init)(i._payload),u)}if(te(i))return h(r,a,i,u);if(z(i))return v(r,a,i,u);ya(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Rc(i,r.mode,u)).return=r,r=a),l(r)):n(r,a)}}var xa=Aa(!0),wa=Aa(!1),Ca=Eo(null),Sa=null,Ea=null,ka=null;function Ba(){ka=Ea=Sa=null}function Ma(e){var t=Ca.current;ko(Ca),e._currentValue=t}function Oa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Na(e,t){Sa=e,ka=Ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bl=!0),e.firstContext=null)}function Ta(e){var t=e._currentValue;if(ka!==e)if(e={context:e,memoizedValue:t,next:null},null===Ea){if(null===Sa)throw Error(a(308));Ea=e,Sa.dependencies={lanes:0,firstContext:e}}else Ea=Ea.next=e;return t}var ja=null;function _a(e){null===ja?ja=[e]:ja.push(e)}function Pa(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,_a(t)):(n.next=o.next,o.next=n),t.interleaved=n,za(e,r)}function za(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Da=!1;function Ra(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function La(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Fa(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Mu){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,za(e,n)}return null===(o=r.interleaved)?(t.next=t,_a(r)):(t.next=o.next,o.next=t),r.interleaved=t,za(e,n)}function qa(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Ua(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ga(e,t,n,r){var o=e.updateQueue;Da=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===i?a=c:i.next=c,i=u;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===l?s.firstBaseUpdate=c:l.next=c,s.lastBaseUpdate=u)}if(null!==a){var d=o.baseState;for(i=0,s=c=u=null,l=a;;){var p=l.lane,f=l.eventTime;if((r&p)===p){null!==s&&(s=s.next={eventTime:f,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(p=t,f=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(f,d,p);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=h.payload)?m.call(f,d,p):m))break e;d=R({},d,p);break e;case 2:Da=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=o.effects)?o.effects=[l]:p.push(l))}else f={eventTime:f,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(c=s=f,u=d):s=s.next=f,i|=p;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(p=l).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}if(null===s&&(u=d),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Du|=i,e.lanes=i,e.memoizedState=d}}function $a(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Wa={},Ya=Eo(Wa),Ha=Eo(Wa),Va=Eo(Wa);function Qa(e){if(e===Wa)throw Error(a(174));return e}function Ka(e,t){switch(Bo(Va,t),Bo(Ha,e),Bo(Ya,Wa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ko(Ya),Bo(Ya,t)}function Za(){ko(Ya),ko(Ha),ko(Va)}function Xa(e){Qa(Va.current);var t=Qa(Ya.current),n=ue(t,e.type);t!==n&&(Bo(Ha,e),Bo(Ya,n))}function Ja(e){Ha.current===e&&(ko(Ya),ko(Ha))}var ei=Eo(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var oi=A.ReactCurrentDispatcher,ai=A.ReactCurrentBatchConfig,ii=0,li=null,ui=null,ci=null,si=!1,di=!1,pi=0,fi=0;function mi(){throw Error(a(321))}function hi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function vi(e,t,n,r,o,i){if(ii=i,li=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,oi.current=null===e||null===e.memoizedState?Ji:el,e=n(r,o),di){i=0;do{if(di=!1,pi=0,25<=i)throw Error(a(301));i+=1,ci=ui=null,t.updateQueue=null,oi.current=tl,e=n(r,o)}while(di)}if(oi.current=Xi,t=null!==ui&&null!==ui.next,ii=0,ci=ui=li=null,si=!1,t)throw Error(a(300));return e}function gi(){var e=0!==pi;return pi=0,e}function yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ci?li.memoizedState=ci=e:ci=ci.next=e,ci}function bi(){if(null===ui){var e=li.alternate;e=null!==e?e.memoizedState:null}else e=ui.next;var t=null===ci?li.memoizedState:ci.next;if(null!==t)ci=t,ui=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ui=e).memoizedState,baseState:ui.baseState,baseQueue:ui.baseQueue,queue:ui.queue,next:null},null===ci?li.memoizedState=ci=e:ci=ci.next=e}return ci}function Ai(e,t){return"function"==typeof t?t(e):t}function xi(e){var t=bi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ui,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,c=null,s=i;do{var d=s.lane;if((ii&d)===d)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var p={lane:d,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=p,l=r):c=c.next=p,li.lanes|=d,Du|=d}s=s.next}while(null!==s&&s!==i);null===c?l=r:c.next=u,lr(r,t.memoizedState)||(bl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,li.lanes|=i,Du|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function wi(e){var t=bi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(bl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ci(){}function Si(e,t){var n=li,r=bi(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,bl=!0),r=r.queue,Di(Bi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ci&&1&ci.memoizedState.tag){if(n.flags|=2048,Ti(9,ki.bind(null,n,r,o,t),void 0,null),null===Ou)throw Error(a(349));30&ii||Ei(n,t,o)}return o}function Ei(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function ki(e,t,n,r){t.value=n,t.getSnapshot=r,Mi(t)&&Oi(e)}function Bi(e,t,n){return n((function(){Mi(t)&&Oi(e)}))}function Mi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Oi(e){var t=za(e,1);null!==t&&nc(t,e,1,-1)}function Ni(e){var t=yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:e},t.queue=e,e=e.dispatch=Vi.bind(null,li,e),[t.memoizedState,e]}function Ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ji(){return bi().memoizedState}function _i(e,t,n,r){var o=yi();li.flags|=e,o.memoizedState=Ti(1|t,n,void 0,void 0===r?null:r)}function Pi(e,t,n,r){var o=bi();r=void 0===r?null:r;var a=void 0;if(null!==ui){var i=ui.memoizedState;if(a=i.destroy,null!==r&&hi(r,i.deps))return void(o.memoizedState=Ti(t,n,a,r))}li.flags|=e,o.memoizedState=Ti(1|t,n,a,r)}function zi(e,t){return _i(8390656,8,e,t)}function Di(e,t){return Pi(2048,8,e,t)}function Ri(e,t){return Pi(4,2,e,t)}function Li(e,t){return Pi(4,4,e,t)}function Ii(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Fi(e,t,n){return n=null!=n?n.concat([e]):null,Pi(4,4,Ii.bind(null,t,e),n)}function qi(){}function Ui(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&hi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Gi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&hi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function $i(e,t,n){return 21&ii?(lr(n,t)||(n=ht(),li.lanes|=n,Du|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bl=!0),e.memoizedState=n)}function Wi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ai.transition;ai.transition={};try{e(!1),t()}finally{bt=n,ai.transition=r}}function Yi(){return bi().memoizedState}function Hi(e,t,n){var r=tc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Qi(e)?Ki(t,n):null!==(n=Pa(e,t,n,r))&&(nc(n,e,r,ec()),Zi(n,t,r))}function Vi(e,t,n){var r=tc(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Qi(e))Ki(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(o.next=o,_a(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Pa(e,t,o,r))&&(nc(n,e,r,o=ec()),Zi(n,t,r))}}function Qi(e){var t=e.alternate;return e===li||null!==t&&t===li}function Ki(e,t){di=si=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Zi(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var Xi={readContext:Ta,useCallback:mi,useContext:mi,useEffect:mi,useImperativeHandle:mi,useInsertionEffect:mi,useLayoutEffect:mi,useMemo:mi,useReducer:mi,useRef:mi,useState:mi,useDebugValue:mi,useDeferredValue:mi,useTransition:mi,useMutableSource:mi,useSyncExternalStore:mi,useId:mi,unstable_isNewReconciler:!1},Ji={readContext:Ta,useCallback:function(e,t){return yi().memoizedState=[e,void 0===t?null:t],e},useContext:Ta,useEffect:zi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,_i(4194308,4,Ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return _i(4194308,4,e,t)},useInsertionEffect:function(e,t){return _i(4,2,e,t)},useMemo:function(e,t){var n=yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Hi.bind(null,li,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yi().memoizedState=e},useState:Ni,useDebugValue:qi,useDeferredValue:function(e){return yi().memoizedState=e},useTransition:function(){var e=Ni(!1),t=e[0];return e=Wi.bind(null,e[1]),yi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=li,o=yi();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Ou)throw Error(a(349));30&ii||Ei(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,zi(Bi.bind(null,r,i,e),[e]),r.flags|=2048,Ti(9,ki.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=yi(),t=Ou.identifierPrefix;if(aa){var n=Xo;t=":"+t+"R"+(n=(Zo&~(1<<32-it(Zo)-1)).toString(32)+n),0<(n=pi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=fi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},el={readContext:Ta,useCallback:Ui,useContext:Ta,useEffect:Di,useImperativeHandle:Fi,useInsertionEffect:Ri,useLayoutEffect:Li,useMemo:Gi,useReducer:xi,useRef:ji,useState:function(){return xi(Ai)},useDebugValue:qi,useDeferredValue:function(e){return $i(bi(),ui.memoizedState,e)},useTransition:function(){return[xi(Ai)[0],bi().memoizedState]},useMutableSource:Ci,useSyncExternalStore:Si,useId:Yi,unstable_isNewReconciler:!1},tl={readContext:Ta,useCallback:Ui,useContext:Ta,useEffect:Di,useImperativeHandle:Fi,useInsertionEffect:Ri,useLayoutEffect:Li,useMemo:Gi,useReducer:wi,useRef:ji,useState:function(){return wi(Ai)},useDebugValue:qi,useDeferredValue:function(e){var t=bi();return null===ui?t.memoizedState=e:$i(t,ui.memoizedState,e)},useTransition:function(){return[wi(Ai)[0],bi().memoizedState]},useMutableSource:Ci,useSyncExternalStore:Si,useId:Yi,unstable_isNewReconciler:!1};function nl(e,t){if(e&&e.defaultProps){for(var n in t=R({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:R({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ol={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ec(),o=tc(e),a=Ia(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,o))&&(nc(t,e,o,r),qa(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ec(),o=tc(e),a=Ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,o))&&(nc(t,e,o,r),qa(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),r=tc(e),o=Ia(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Fa(e,o,r))&&(nc(t,e,r,n),qa(t,e,r))}};function al(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function il(e,t,n){var r=!1,o=Mo,a=t.contextType;return"object"==typeof a&&null!==a?a=Ta(a):(o=_o(t)?To:Oo.current,a=(r=null!=(r=t.contextTypes))?jo(e,o):Mo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ol,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ll(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ol.enqueueReplaceState(t,t.state,null)}function ul(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs={},Ra(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Ta(a):(a=_o(t)?To:Oo.current,o.context=jo(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(rl(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ol.enqueueReplaceState(o,o.state,null),Ga(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function cl(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function sl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function fl(e,t,n){(n=Ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$u||($u=!0,Wu=r),dl(0,t)},n}function ml(e,t,n){(n=Ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Yu?Yu=new Set([this]):Yu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function hl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Ec.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,o){return 1&e.mode?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ia(-1,1)).tag=2,Fa(n,t,1))),n.lanes|=1),e)}var yl=A.ReactCurrentOwner,bl=!1;function Al(e,t,n,r){t.child=null===e?wa(t,null,n,r):xa(t,e.child,n,r)}function xl(e,t,n,r,o){n=n.render;var a=t.ref;return Na(t,o),r=vi(e,t,n,r,a,o),n=gi(),null===e||bl?(aa&&n&&ta(t),t.flags|=1,Al(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,$l(e,t,o))}function wl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||jc(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pc(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Cl(e,t,a,r,o))}if(a=e.child,!(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return $l(e,t,o)}return t.flags|=1,(e=_c(a,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(ur(a,r)&&e.ref===t.ref){if(bl=!1,t.pendingProps=r=a,!(e.lanes&o))return t.lanes=e.lanes,$l(e,t,o);131072&e.flags&&(bl=!0)}}return kl(e,t,n,r,o)}function Sl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Bo(_u,ju),ju|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Bo(_u,ju),ju|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Bo(_u,ju),ju|=n;else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Bo(_u,ju),ju|=r;return Al(e,t,o,n),t.child}function El(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function kl(e,t,n,r,o){var a=_o(n)?To:Oo.current;return a=jo(t,a),Na(t,o),n=vi(e,t,n,r,a,o),r=gi(),null===e||bl?(aa&&r&&ta(t),t.flags|=1,Al(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,$l(e,t,o))}function Bl(e,t,n,r,o){if(_o(n)){var a=!0;Ro(t)}else a=!1;if(Na(t,o),null===t.stateNode)Gl(e,t),il(t,n,r),ul(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;c="object"==typeof c&&null!==c?Ta(c):jo(t,c=_o(n)?To:Oo.current);var s=n.getDerivedStateFromProps,d="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&ll(t,i,r,c),Da=!1;var p=t.memoizedState;i.state=p,Ga(t,r,i,o),u=t.memoizedState,l!==r||p!==u||No.current||Da?("function"==typeof s&&(rl(t,n,s,r),u=t.memoizedState),(l=Da||al(t,n,l,r,p,u,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,La(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:nl(t.type,l),i.props=c,d=t.pendingProps,p=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Ta(u):jo(t,u=_o(n)?To:Oo.current);var f=n.getDerivedStateFromProps;(s="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||p!==u)&&ll(t,i,r,u),Da=!1,p=t.memoizedState,i.state=p,Ga(t,r,i,o);var m=t.memoizedState;l!==d||p!==m||No.current||Da?("function"==typeof f&&(rl(t,n,f,r),m=t.memoizedState),(c=Da||al(t,n,c,r,p,m,u)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Ml(e,t,n,r,a,o)}function Ml(e,t,n,r,o,a){El(e,t);var i=!!(128&t.flags);if(!r&&!i)return o&&Lo(t,n,!1),$l(e,t,a);r=t.stateNode,yl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=xa(t,e.child,null,a),t.child=xa(t,null,l,a)):Al(e,t,l,a),t.memoizedState=r.state,o&&Lo(t,n,!0),t.child}function Ol(e){var t=e.stateNode;t.pendingContext?zo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&zo(0,t.context,!1),Ka(e,t.containerInfo)}function Nl(e,t,n,r,o){return ma(),ha(o),t.flags|=256,Al(e,t,n,r),t.child}var Tl,jl,_l,Pl,zl={dehydrated:null,treeContext:null,retryLane:0};function Dl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Rl(e,t,n){var r,o=t.pendingProps,i=ei.current,l=!1,u=!!(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Bo(ei,1&i),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},1&o||null===l?l=Dc(u,o,0,null):(l.childLanes=0,l.pendingProps=u),e=zc(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Dl(n),t.memoizedState=zl,e):Ll(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Il(e,t,l,r=sl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Dc({mode:"visible",children:r.children},o,0,null),(i=zc(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&xa(t,e.child,null,l),t.child.memoizedState=Dl(l),t.memoizedState=zl,i);if(!(1&t.mode))return Il(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Il(e,t,l,r=sl(i=Error(a(419)),r,void 0))}if(u=!!(l&e.childLanes),bl||u){if(null!==(r=Ou)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=o&(r.suspendedLanes|l)?0:o)&&o!==i.retryLane&&(i.retryLane=o,za(e,o),nc(r,e,o,-1))}return hc(),Il(e,t,l,r=sl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Bc.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=co(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Vo[Qo++]=Zo,Vo[Qo++]=Xo,Vo[Qo++]=Ko,Zo=e.id,Xo=e.overflow,Ko=t),(t=Ll(t,r.children)).flags|=4096,t)}(e,t,u,o,r,i,n);if(l){l=o.fallback,u=t.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:o.children};return 1&u||t.child===i?(o=_c(i,c)).subtreeFlags=14680064&i.subtreeFlags:((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null),null!==r?l=_c(r,l):(l=zc(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Dl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=zl,o}return e=(l=e.child).sibling,o=_c(l,{mode:"visible",children:o.children}),!(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Ll(e,t){return(t=Dc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Il(e,t,n,r){return null!==r&&ha(r),xa(t,e.child,null,n),(e=Ll(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Oa(e.return,t,n)}function ql(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Ul(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Al(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fl(e,n,t);else if(19===e.tag)Fl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Bo(ei,r),1&t.mode)switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ql(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ti(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}ql(t,!0,n,null,a);break;case"together":ql(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Gl(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $l(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Du|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=_c(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=_c(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Hl(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yl(t),null;case 1:case 17:return _o(t.type)&&Po(),Yl(t),null;case 3:return r=t.stateNode,Za(),ko(No),ko(Oo),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(pa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ia&&(ic(ia),ia=null))),jl(e,t),Yl(t),null;case 5:Ja(t);var o=Qa(Va.current);if(n=t.type,null!==e&&null!=t.stateNode)_l(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Yl(t),null}if(e=Qa(Ya.current),pa(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[fo]=t,r[mo]=i,e=!!(1&t.mode),n){case"dialog":Ir("cancel",r),Ir("close",r);break;case"iframe":case"object":case"embed":Ir("load",r);break;case"video":case"audio":for(o=0;o<zr.length;o++)Ir(zr[o],r);break;case"source":Ir("error",r);break;case"img":case"image":case"link":Ir("error",r),Ir("load",r);break;case"details":Ir("toggle",r);break;case"input":K(r,i),Ir("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Ir("invalid",r);break;case"textarea":oe(r,i),Ir("invalid",r)}for(var u in ye(n,i),o=null,i)if(i.hasOwnProperty(u)){var c=i[u];"children"===u?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),o=["children",""+c]):l.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&Ir("scroll",r)}switch(n){case"input":Y(r),J(r,i,!0);break;case"textarea":Y(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[fo]=t,e[mo]=r,Tl(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Ir("cancel",e),Ir("close",e),o=r;break;case"iframe":case"object":case"embed":Ir("load",e),o=r;break;case"video":case"audio":for(o=0;o<zr.length;o++)Ir(zr[o],e);o=r;break;case"source":Ir("error",e),o=r;break;case"img":case"image":case"link":Ir("error",e),Ir("load",e),o=r;break;case"details":Ir("toggle",e),o=r;break;case"input":K(e,r),o=Q(e,r),Ir("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=R({},r,{value:void 0}),Ir("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Ir("invalid",e)}for(i in ye(n,o),c=o)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?ve(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&de(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&pe(e,s):"number"==typeof s&&pe(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&Ir("scroll",e):null!=s&&b(e,i,s,u))}switch(n){case"input":Y(e),J(e,r,!1);break;case"textarea":Y(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Yl(t),null;case 6:if(e&&null!=t.stateNode)Pl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=Qa(Va.current),Qa(Ya.current),pa(t)){if(r=t.stateNode,n=t.memoizedProps,r[fo]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Xr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fo]=t,t.stateNode=r}return Yl(t),null;case 13:if(ko(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&1&t.mode&&!(128&t.flags))fa(),ma(),t.flags|=98560,i=!1;else if(i=pa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[fo]=t}else ma(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yl(t),i=!1}else null!==ia&&(ic(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===Pu&&(Pu=3):hc())),null!==t.updateQueue&&(t.flags|=4),Yl(t),null);case 4:return Za(),jl(e,t),null===e&&Ur(t.stateNode.containerInfo),Yl(t),null;case 10:return Ma(t.type._context),Yl(t),null;case 19:if(ko(ei),null===(i=t.memoizedState))return Yl(t),null;if(r=!!(128&t.flags),null===(u=i.rendering))if(r)Wl(i,!1);else{if(0!==Pu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(u=ti(e))){for(t.flags|=128,Wl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Bo(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Ze()>Uu&&(t.flags|=128,r=!0,Wl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Wl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!aa)return Yl(t),null}else 2*Ze()-i.renderingStartTime>Uu&&1073741824!==n&&(t.flags|=128,r=!0,Wl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ze(),t.sibling=null,n=ei.current,Bo(ei,r?1&n|2:1&n),t):(Yl(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&ju)&&(Yl(t),6&t.subtreeFlags&&(t.flags|=8192)):Yl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Vl(e,t){switch(na(t),t.tag){case 1:return _o(t.type)&&Po(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Za(),ko(No),ko(Oo),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Ja(t),null;case 13:if(ko(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ma()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ko(ei),null;case 4:return Za(),null;case 10:return Ma(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Tl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},jl=function(){},_l=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Qa(Ya.current);var a,i=null;switch(n){case"input":o=Q(e,o),r=Q(e,r),i=[];break;case"select":o=R({},o,{value:void 0}),r=R({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(s in ye(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var u=o[s];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(i||(i=[]),i.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&Ir("scroll",e),i||u===c||(i=[])):(i=i||[]).push(s,c))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},Pl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ql=!1,Kl=!1,Zl="function"==typeof WeakSet?WeakSet:Set,Xl=null;function Jl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Sc(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){Sc(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&eu(t,n,a)}o=o.next}while(o!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fo],delete t[mo],delete t[vo],delete t[go],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function lu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var su=null,du=!1;function pu(e,t,n){for(n=n.child;null!==n;)fu(e,t,n),n=n.sibling}function fu(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Kl||Jl(n,t);case 6:var r=su,o=du;su=null,pu(e,t,n),du=o,null!==(su=r)&&(du?(e=su,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):su.removeChild(n.stateNode));break;case 18:null!==su&&(du?(e=su,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Ut(e)):uo(su,n.stateNode));break;case 4:r=su,o=du,su=n.stateNode.containerInfo,du=!0,pu(e,t,n),su=r,du=o;break;case 0:case 11:case 14:case 15:if(!Kl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(2&a||4&a)&&eu(n,t,i),o=o.next}while(o!==r)}pu(e,t,n);break;case 1:if(!Kl&&(Jl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Sc(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Kl=(r=Kl)||null!==n.memoizedState,pu(e,t,n),Kl=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zl),t.forEach((function(t){var r=Mc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function hu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:su=u.stateNode,du=!1;break e;case 3:case 4:su=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===su)throw Error(a(160));fu(i,l,o),su=null,du=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){Sc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vu(t,e),t=t.sibling}function vu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hu(t,e),gu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){Sc(e,e.return,t)}try{nu(5,e,e.return)}catch(t){Sc(e,e.return,t)}}break;case 1:hu(t,e),gu(e),512&r&&null!==n&&Jl(n,n.return);break;case 5:if(hu(t,e),gu(e),512&r&&null!==n&&Jl(n,n.return),32&e.flags){var o=e.stateNode;try{pe(o,"")}catch(t){Sc(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===i.type&&null!=i.name&&Z(o,i),be(u,l);var s=be(u,i);for(l=0;l<c.length;l+=2){var d=c[l],p=c[l+1];"style"===d?ve(o,p):"dangerouslySetInnerHTML"===d?de(o,p):"children"===d?pe(o,p):b(o,d,p,s)}switch(u){case"input":X(o,i);break;case"textarea":ae(o,i);break;case"select":var f=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(o,!!i.multiple,m,!1):f!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[mo]=i}catch(t){Sc(e,e.return,t)}}break;case 6:if(hu(t,e),gu(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Sc(e,e.return,t)}}break;case 3:if(hu(t,e),gu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){Sc(e,e.return,t)}break;case 4:default:hu(t,e),gu(e);break;case 13:hu(t,e),gu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(qu=Ze())),4&r&&mu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Kl=(s=Kl)||d,hu(t,e),Kl=s):hu(t,e),gu(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!d&&1&e.mode)for(Xl=e,d=e.child;null!==d;){for(p=Xl=d;null!==Xl;){switch(m=(f=Xl).child,f.tag){case 0:case 11:case 14:case 15:nu(4,f,f.return);break;case 1:Jl(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){r=f,n=f.return;try{t=r,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){Sc(r,n,e)}}break;case 5:Jl(f,f.return);break;case 22:if(null!==f.memoizedState){xu(p);continue}}null!==m?(m.return=f,Xl=m):xu(p)}d=d.sibling}e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{o=p.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=p.stateNode,l=null!=(c=p.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=he("display",l))}catch(t){Sc(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=s?"":p.memoizedProps}catch(t){Sc(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:hu(t,e),gu(e),4&r&&mu(e);case 21:}}function gu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(pe(o,""),r.flags&=-33),cu(e,lu(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;uu(e,lu(e),i);break;default:throw Error(a(161))}}catch(t){Sc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yu(e,t,n){Xl=e,bu(e,t,n)}function bu(e,t,n){for(var r=!!(1&e.mode);null!==Xl;){var o=Xl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Ql;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Kl;l=Ql;var c=Kl;if(Ql=i,(Kl=u)&&!c)for(Xl=o;null!==Xl;)u=(i=Xl).child,22===i.tag&&null!==i.memoizedState?wu(o):null!==u?(u.return=i,Xl=u):wu(o);for(;null!==a;)Xl=a,bu(a,t,n),a=a.sibling;Xl=o,Ql=l,Kl=c}Au(e)}else 8772&o.subtreeFlags&&null!==a?(a.return=o,Xl=a):Au(e)}}function Au(e){for(;null!==Xl;){var t=Xl;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Kl||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Kl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:nl(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&$a(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}$a(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var d=s.memoizedState;if(null!==d){var p=d.dehydrated;null!==p&&Ut(p)}}}break;default:throw Error(a(163))}Kl||512&t.flags&&ou(t)}catch(e){Sc(t,t.return,e)}}if(t===e){Xl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xl=n;break}Xl=t.return}}function xu(e){for(;null!==Xl;){var t=Xl;if(t===e){Xl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xl=n;break}Xl=t.return}}function wu(e){for(;null!==Xl;){var t=Xl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){Sc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Sc(t,o,e)}}var a=t.return;try{ou(t)}catch(e){Sc(t,a,e)}break;case 5:var i=t.return;try{ou(t)}catch(e){Sc(t,i,e)}}}catch(e){Sc(t,t.return,e)}if(t===e){Xl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Xl=l;break}Xl=t.return}}var Cu,Su=Math.ceil,Eu=A.ReactCurrentDispatcher,ku=A.ReactCurrentOwner,Bu=A.ReactCurrentBatchConfig,Mu=0,Ou=null,Nu=null,Tu=0,ju=0,_u=Eo(0),Pu=0,zu=null,Du=0,Ru=0,Lu=0,Iu=null,Fu=null,qu=0,Uu=1/0,Gu=null,$u=!1,Wu=null,Yu=null,Hu=!1,Vu=null,Qu=0,Ku=0,Zu=null,Xu=-1,Ju=0;function ec(){return 6&Mu?Ze():-1!==Xu?Xu:Xu=Ze()}function tc(e){return 1&e.mode?2&Mu&&0!==Tu?Tu&-Tu:null!==va.transition?(0===Ju&&(Ju=ht()),Ju):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type):1}function nc(e,t,n,r){if(50<Ku)throw Ku=0,Zu=null,Error(a(185));gt(e,n,r),2&Mu&&e===Ou||(e===Ou&&(!(2&Mu)&&(Ru|=n),4===Pu&&lc(e,Tu)),rc(e,r),1===n&&0===Mu&&!(1&t.mode)&&(Uu=Ze()+500,Fo&&Go()))}function rc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?l&n&&!(l&r)||(o[i]=ft(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=pt(e,e===Ou?Tu:0);if(0===r)null!==n&&Ve(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ve(n),1===t)0===e.tag?function(e){Fo=!0,Uo(e)}(uc.bind(null,e)):Uo(uc.bind(null,e)),io((function(){!(6&Mu)&&Go()})),n=null;else{switch(At(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Oc(n,oc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function oc(e,t){if(Xu=-1,Ju=0,6&Mu)throw Error(a(327));var n=e.callbackNode;if(wc()&&e.callbackNode!==n)return null;var r=pt(e,e===Ou?Tu:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=vc(e,r);else{t=r;var o=Mu;Mu|=2;var i=mc();for(Ou===e&&Tu===t||(Gu=null,Uu=Ze()+500,pc(e,t));;)try{yc();break}catch(t){fc(e,t)}Ba(),Eu.current=i,Mu=o,null!==Nu?t=0:(Ou=null,Tu=0,t=Pu)}if(0!==t){if(2===t&&0!==(o=mt(e))&&(r=o,t=ac(e,o)),1===t)throw n=zu,pc(e,0),lc(e,r),rc(e,Ze()),n;if(6===t)lc(e,r);else{if(o=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)||(t=vc(e,r),2===t&&(i=mt(e),0!==i&&(r=i,t=ac(e,i))),1!==t)))throw n=zu,pc(e,0),lc(e,r),rc(e,Ze()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:xc(e,Fu,Gu);break;case 3:if(lc(e,r),(130023424&r)===r&&10<(t=qu+500-Ze())){if(0!==pt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(xc.bind(null,e,Fu,Gu),t);break}xc(e,Fu,Gu);break;case 4:if(lc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Ze()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Su(r/1960))-r)){e.timeoutHandle=ro(xc.bind(null,e,Fu,Gu),r);break}xc(e,Fu,Gu);break;default:throw Error(a(329))}}}return rc(e,Ze()),e.callbackNode===n?oc.bind(null,e):null}function ac(e,t){var n=Iu;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=vc(e,t))&&(t=Fu,Fu=n,null!==t&&ic(t)),e}function ic(e){null===Fu?Fu=e:Fu.push.apply(Fu,e)}function lc(e,t){for(t&=~Lu,t&=~Ru,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function uc(e){if(6&Mu)throw Error(a(327));wc();var t=pt(e,0);if(!(1&t))return rc(e,Ze()),null;var n=vc(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=ac(e,r))}if(1===n)throw n=zu,pc(e,0),lc(e,t),rc(e,Ze()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xc(e,Fu,Gu),rc(e,Ze()),null}function cc(e,t){var n=Mu;Mu|=1;try{return e(t)}finally{0===(Mu=n)&&(Uu=Ze()+500,Fo&&Go())}}function sc(e){null!==Vu&&0===Vu.tag&&!(6&Mu)&&wc();var t=Mu;Mu|=1;var n=Bu.transition,r=bt;try{if(Bu.transition=null,bt=1,e)return e()}finally{bt=r,Bu.transition=n,!(6&(Mu=t))&&Go()}}function dc(){ju=_u.current,ko(_u)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Nu)for(n=Nu.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Po();break;case 3:Za(),ko(No),ko(Oo),ri();break;case 5:Ja(r);break;case 4:Za();break;case 13:case 19:ko(ei);break;case 10:Ma(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Ou=e,Nu=e=_c(e.current,null),Tu=ju=t,Pu=0,zu=null,Lu=Ru=Du=0,Fu=Iu=null,null!==ja){for(t=0;t<ja.length;t++)if(null!==(r=(n=ja[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}ja=null}return e}function fc(e,t){for(;;){var n=Nu;try{if(Ba(),oi.current=Xi,si){for(var r=li.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}si=!1}if(ii=0,ci=ui=li=null,di=!1,pi=0,ku.current=null,null===n||null===n.return){Pu=1,zu=t,Nu=null;break}e:{var i=e,l=n.return,u=n,c=t;if(t=Tu,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,d=u,p=d.tag;if(!(1&d.mode||0!==p&&11!==p&&15!==p)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=vl(l);if(null!==m){m.flags&=-257,gl(m,l,u,0,t),1&m.mode&&hl(i,s,t),c=s;var h=(t=m).updateQueue;if(null===h){var v=new Set;v.add(c),t.updateQueue=v}else h.add(c);break e}if(!(1&t)){hl(i,s,t),hc();break e}c=Error(a(426))}else if(aa&&1&u.mode){var g=vl(l);if(null!==g){!(65536&g.flags)&&(g.flags|=256),gl(g,l,u,0,t),ha(cl(c,u));break e}}i=c=cl(c,u),4!==Pu&&(Pu=2),null===Iu?Iu=[i]:Iu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ua(i,fl(0,c,t));break e;case 1:u=c;var y=i.type,b=i.stateNode;if(!(128&i.flags||"function"!=typeof y.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Yu&&Yu.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Ua(i,ml(i,u,t));break e}}i=i.return}while(null!==i)}Ac(n)}catch(e){t=e,Nu===n&&null!==n&&(Nu=n=n.return);continue}break}}function mc(){var e=Eu.current;return Eu.current=Xi,null===e?Xi:e}function hc(){0!==Pu&&3!==Pu&&2!==Pu||(Pu=4),null===Ou||!(268435455&Du)&&!(268435455&Ru)||lc(Ou,Tu)}function vc(e,t){var n=Mu;Mu|=2;var r=mc();for(Ou===e&&Tu===t||(Gu=null,pc(e,t));;)try{gc();break}catch(t){fc(e,t)}if(Ba(),Mu=n,Eu.current=r,null!==Nu)throw Error(a(261));return Ou=null,Tu=0,Pu}function gc(){for(;null!==Nu;)bc(Nu)}function yc(){for(;null!==Nu&&!Qe();)bc(Nu)}function bc(e){var t=Cu(e.alternate,e,ju);e.memoizedProps=e.pendingProps,null===t?Ac(e):Nu=t,ku.current=null}function Ac(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Vl(n,t)))return n.flags&=32767,void(Nu=n);if(null===e)return Pu=6,void(Nu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Hl(n,t,ju)))return void(Nu=n);if(null!==(t=t.sibling))return void(Nu=t);Nu=t=e}while(null!==t);0===Pu&&(Pu=5)}function xc(e,t,n){var r=bt,o=Bu.transition;try{Bu.transition=null,bt=1,function(e,t,n,r){do{wc()}while(null!==Vu);if(6&Mu)throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Ou&&(Nu=Ou=null,Tu=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Hu||(Hu=!0,Oc(tt,(function(){return wc(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=Bu.transition,Bu.transition=null;var l=bt;bt=1;var u=Mu;Mu|=4,ku.current=null,function(e,t){if(eo=$t,fr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,c=-1,s=0,d=0,p=e,f=null;t:for(;;){for(var m;p!==n||0!==o&&3!==p.nodeType||(u=l+o),p!==i||0!==r&&3!==p.nodeType||(c=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(m=p.firstChild);)f=p,p=m;for(;;){if(p===e)break t;if(f===n&&++s===o&&(u=l),f===i&&++d===r&&(c=l),null!==(m=p.nextSibling))break;f=(p=f).parentNode}p=m}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},$t=!1,Xl=t;null!==Xl;)if(e=(t=Xl).child,1028&t.subtreeFlags&&null!==e)e.return=t,Xl=e;else for(;null!==Xl;){t=Xl;try{var h=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var v=h.memoizedProps,g=h.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:nl(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(a(163))}}catch(e){Sc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xl=e;break}Xl=t.return}h=tu,tu=!1}(e,n),vu(n,e),mr(to),$t=!!eo,to=eo=null,e.current=n,yu(n,e,o),Ke(),Mu=u,bt=l,Bu.transition=i}else e.current=n;if(Hu&&(Hu=!1,Vu=e,Qu=o),0===(i=e.pendingLanes)&&(Yu=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rc(e,Ze()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if($u)throw $u=!1,e=Wu,Wu=null,e;!!(1&Qu)&&0!==e.tag&&wc(),1&(i=e.pendingLanes)?e===Zu?Ku++:(Ku=0,Zu=e):Ku=0,Go()}(e,t,n,r)}finally{Bu.transition=o,bt=r}return null}function wc(){if(null!==Vu){var e=At(Qu),t=Bu.transition,n=bt;try{if(Bu.transition=null,bt=16>e?16:e,null===Vu)var r=!1;else{if(e=Vu,Vu=null,Qu=0,6&Mu)throw Error(a(331));var o=Mu;for(Mu|=4,Xl=e.current;null!==Xl;){var i=Xl,l=i.child;if(16&Xl.flags){var u=i.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Xl=s;null!==Xl;){var d=Xl;switch(d.tag){case 0:case 11:case 15:nu(8,d,i)}var p=d.child;if(null!==p)p.return=d,Xl=p;else for(;null!==Xl;){var f=(d=Xl).sibling,m=d.return;if(au(d),d===s){Xl=null;break}if(null!==f){f.return=m,Xl=f;break}Xl=m}}}var h=i.alternate;if(null!==h){var v=h.child;if(null!==v){h.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Xl=i}}if(2064&i.subtreeFlags&&null!==l)l.return=i,Xl=l;else e:for(;null!==Xl;){if(2048&(i=Xl).flags)switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Xl=y;break e}Xl=i.return}}var b=e.current;for(Xl=b;null!==Xl;){var A=(l=Xl).child;if(2064&l.subtreeFlags&&null!==A)A.return=l,Xl=A;else e:for(l=b;null!==Xl;){if(2048&(u=Xl).flags)try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){Sc(u,u.return,e)}if(u===l){Xl=null;break e}var x=u.sibling;if(null!==x){x.return=u.return,Xl=x;break e}Xl=u.return}}if(Mu=o,Go(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Bu.transition=t}}return!1}function Cc(e,t,n){e=Fa(e,t=fl(0,t=cl(n,t),1),1),t=ec(),null!==e&&(gt(e,1,t),rc(e,t))}function Sc(e,t,n){if(3===e.tag)Cc(e,e,n);else for(;null!==t;){if(3===t.tag){Cc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yu||!Yu.has(r))){t=Fa(t,e=ml(t,e=cl(n,e),1),1),e=ec(),null!==t&&(gt(t,1,e),rc(t,e));break}}t=t.return}}function Ec(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Ou===e&&(Tu&n)===n&&(4===Pu||3===Pu&&(130023424&Tu)===Tu&&500>Ze()-qu?pc(e,0):Lu|=n),rc(e,t)}function kc(e,t){0===t&&(1&e.mode?(t=st,!(130023424&(st<<=1))&&(st=4194304)):t=1);var n=ec();null!==(e=za(e,t))&&(gt(e,t,n),rc(e,n))}function Bc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),kc(e,n)}function Mc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),kc(e,n)}function Oc(e,t){return He(e,t)}function Nc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tc(e,t,n,r){return new Nc(e,t,n,r)}function jc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function _c(e,t){var n=e.alternate;return null===n?((n=Tc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pc(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)jc(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case C:return zc(n.children,o,i,t);case S:l=8,o|=8;break;case E:return(e=Tc(12,n,t,2|o)).elementType=E,e.lanes=i,e;case O:return(e=Tc(13,n,t,o)).elementType=O,e.lanes=i,e;case N:return(e=Tc(19,n,t,o)).elementType=N,e.lanes=i,e;case _:return Dc(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:l=10;break e;case B:l=9;break e;case M:l=11;break e;case T:l=14;break e;case j:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Tc(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function zc(e,t,n,r){return(e=Tc(7,e,r,t)).lanes=n,e}function Dc(e,t,n,r){return(e=Tc(22,e,r,t)).elementType=_,e.lanes=n,e.stateNode={isHidden:!1},e}function Rc(e,t,n){return(e=Tc(6,e,null,t)).lanes=n,e}function Lc(e,t,n){return(t=Tc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ic(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Fc(e,t,n,r,o,a,i,l,u){return e=new Ic(e,t,n,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Tc(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ra(a),e}function qc(e){if(!e)return Mo;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(_o(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(_o(n))return Do(e,n,t)}return t}function Uc(e,t,n,r,o,a,i,l,u){return(e=Fc(n,r,!0,e,0,a,0,l,u)).context=qc(null),n=e.current,(a=Ia(r=ec(),o=tc(n))).callback=null!=t?t:null,Fa(n,a,o),e.current.lanes=o,gt(e,o,r),rc(e,r),e}function Gc(e,t,n,r){var o=t.current,a=ec(),i=tc(o);return n=qc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ia(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Fa(o,t,i))&&(nc(e,o,i,a),qa(e,o,i)),i}function $c(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yc(e,t){Wc(e,t),(e=e.alternate)&&Wc(e,t)}Cu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||No.current)bl=!0;else{if(!(e.lanes&n||128&t.flags))return bl=!1,function(e,t,n){switch(t.tag){case 3:Ol(t),ma();break;case 5:Xa(t);break;case 1:_o(t.type)&&Ro(t);break;case 4:Ka(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Bo(Ca,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Bo(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?Rl(e,t,n):(Bo(ei,1&ei.current),null!==(e=$l(e,t,n))?e.sibling:null);Bo(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Ul(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Bo(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,Sl(e,t,n)}return $l(e,t,n)}(e,t,n);bl=!!(131072&e.flags)}else bl=!1,aa&&1048576&t.flags&&ea(t,Ho,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Gl(e,t),e=t.pendingProps;var o=jo(t,Oo.current);Na(t,n),o=vi(null,t,r,e,o,n);var i=gi();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,_o(r)?(i=!0,Ro(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ra(t),o.updater=ol,t.stateNode=o,o._reactInternals=t,ul(t,r,e,n),t=Ml(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),Al(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Gl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return jc(e)?1:0;if(null!=e){if((e=e.$$typeof)===M)return 11;if(e===T)return 14}return 2}(r),e=nl(r,e),o){case 0:t=kl(null,t,r,e,n);break e;case 1:t=Bl(null,t,r,e,n);break e;case 11:t=xl(null,t,r,e,n);break e;case 14:t=wl(null,t,r,nl(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,kl(e,t,r,o=t.elementType===r?o:nl(r,o),n);case 1:return r=t.type,o=t.pendingProps,Bl(e,t,r,o=t.elementType===r?o:nl(r,o),n);case 3:e:{if(Ol(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,La(e,t),Ga(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Nl(e,t,r,n,o=cl(Error(a(423)),t));break e}if(r!==o){t=Nl(e,t,r,n,o=cl(Error(a(424)),t));break e}for(oa=co(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=wa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ma(),r===o){t=$l(e,t,n);break e}Al(e,t,r,n)}t=t.child}return t;case 5:return Xa(t),null===e&&sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),El(e,t),Al(e,t,l,n),t.child;case 6:return null===e&&sa(t),null;case 13:return Rl(e,t,n);case 4:return Ka(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xa(t,null,r,n):Al(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,xl(e,t,r,o=t.elementType===r?o:nl(r,o),n);case 7:return Al(e,t,t.pendingProps,n),t.child;case 8:case 12:return Al(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Bo(Ca,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!No.current){t=$l(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var c=u.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Ia(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var d=(s=s.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),s.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),Oa(i.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Oa(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Al(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Na(t,n),r=r(o=Ta(o)),t.flags|=1,Al(e,t,r,n),t.child;case 14:return o=nl(r=t.type,t.pendingProps),wl(e,t,r,o=nl(r.type,o),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:nl(r,o),Gl(e,t),t.tag=1,_o(r)?(e=!0,Ro(t)):e=!1,Na(t,n),il(t,r,o),ul(t,r,o,n),Ml(null,t,r,!0,e,n);case 19:return Ul(e,t,n);case 22:return Sl(e,t,n)}throw Error(a(156,t.tag))};var Hc="function"==typeof reportError?reportError:function(e){console.error(e)};function Vc(e){this._internalRoot=e}function Qc(e){this._internalRoot=e}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xc(){}function Jc(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=$c(i);l.call(e)}}Gc(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=$c(i);a.call(e)}}var i=Uc(t,r,e,0,null,!1,0,"",Xc);return e._reactRootContainer=i,e[ho]=i.current,Ur(8===e.nodeType?e.parentNode:e),sc(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=$c(u);l.call(e)}}var u=Fc(e,0,!1,null,0,!1,0,"",Xc);return e._reactRootContainer=u,e[ho]=u.current,Ur(8===e.nodeType?e.parentNode:e),sc((function(){Gc(t,u,n,r)})),u}(n,t,e,o,r);return $c(i)}Qc.prototype.render=Vc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Gc(e,t,null,null)},Qc.prototype.unmount=Vc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;sc((function(){Gc(null,e,null,null)})),t[ho]=null}},Qc.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<_t.length&&0!==t&&t<_t[n].priority;n++);_t.splice(n,0,e),0===n&&Rt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),rc(t,Ze()),!(6&Mu)&&(Uu=Ze()+500,Go()))}break;case 13:sc((function(){var t=za(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),Yc(e,1)}},wt=function(e){if(13===e.tag){var t=za(e,134217728);null!==t&&nc(t,e,134217728,ec()),Yc(e,134217728)}},Ct=function(e){if(13===e.tag){var t=tc(e),n=za(e,t);null!==n&&nc(n,e,t,ec()),Yc(e,t)}},St=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},we=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=wo(r);if(!o)throw Error(a(90));H(r),X(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Me=cc,Oe=sc;var es={usingClientEntryPoint:!1,Events:[Ao,xo,wo,ke,Be,cc]},ts={findFiberByHostInstance:bo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},ns={bundleType:ts.bundleType,version:ts.version,rendererPackageName:ts.rendererPackageName,rendererConfig:ts.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:ts.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rs.isDisabled&&rs.supportsFiber)try{ot=rs.inject(ns),at=rs}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=es,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Kc(e))throw Error(a(299));var n=!1,r="",o=Hc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Fc(e,1,!1,null,0,n,0,r,o),e[ho]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Vc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return sc(e)},t.hydrate=function(e,t,n){if(!Zc(t))throw Error(a(200));return Jc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Kc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Hc;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Uc(t,null,e,1,null!=n?n:null,o,0,i,l),e[ho]=t.current,Ur(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qc(t)},t.render=function(e,t,n){if(!Zc(t))throw Error(a(200));return Jc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zc(e))throw Error(a(40));return!!e._reactRootContainer&&(sc((function(){Jc(null,null,e,!1,(function(){e._reactRootContainer=null,e[ho]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Jc(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},5338:(e,t,n)=>{"use strict";var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},2799:(e,t)=>{"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context");var n=Symbol.for("react.forward_ref"),r=(Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"));Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.ForwardRef=n,t.Memo=r},4363:(e,t,n)=>{"use strict";e.exports=n(2799)},9223:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.PrevArrow=t.NextArrow=void 0;var o=l(n(6540)),a=l(n(6942)),i=n(9445);function l(e){return e&&e.__esModule?e:{default:e}}function u(){return u=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u.apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){var r,o,a;r=e,o=t,a=n[t],(o=m(o))in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,m(r.key),r)}}function f(e,t,n){return t&&p(e.prototype,t),n&&p(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function m(e){var t=function(e){if("object"!=r(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==r(t)?t:String(t)}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}function v(e,t){return v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},v(e,t)}function g(e){var t=y();return function(){var n,o=b(e);if(t){var a=b(this).constructor;n=Reflect.construct(o,arguments,a)}else n=o.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function y(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(y=function(){return!!e})()}function b(e){return b=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},b(e)}t.PrevArrow=function(e){h(n,e);var t=g(n);function n(){return d(this,n),t.apply(this,arguments)}return f(n,[{key:"clickHandler",value:function(e,t){t&&t.preventDefault(),this.props.clickHandler(e,t)}},{key:"render",value:function(){var e={"slick-arrow":!0,"slick-prev":!0},t=this.clickHandler.bind(this,{message:"previous"});!this.props.infinite&&(0===this.props.currentSlide||this.props.slideCount<=this.props.slidesToShow)&&(e["slick-disabled"]=!0,t=null);var n={key:"0","data-role":"none",className:(0,a.default)(e),style:{display:"block"},onClick:t},r={currentSlide:this.props.currentSlide,slideCount:this.props.slideCount};return this.props.prevArrow?o.default.cloneElement(this.props.prevArrow,s(s({},n),r)):o.default.createElement("button",u({key:"0",type:"button"},n)," ","Previous")}}]),n}(o.default.PureComponent),t.NextArrow=function(e){h(n,e);var t=g(n);function n(){return d(this,n),t.apply(this,arguments)}return f(n,[{key:"clickHandler",value:function(e,t){t&&t.preventDefault(),this.props.clickHandler(e,t)}},{key:"render",value:function(){var e={"slick-arrow":!0,"slick-next":!0},t=this.clickHandler.bind(this,{message:"next"});(0,i.canGoNext)(this.props)||(e["slick-disabled"]=!0,t=null);var n={key:"1","data-role":"none",className:(0,a.default)(e),style:{display:"block"},onClick:t},r={currentSlide:this.props.currentSlide,slideCount:this.props.slideCount};return this.props.nextArrow?o.default.cloneElement(this.props.nextArrow,s(s({},n),r)):o.default.createElement("button",u({key:"1",type:"button"},n)," ","Next")}}]),n}(o.default.PureComponent)},1327:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(6540))&&r.__esModule?r:{default:r},a={accessibility:!0,adaptiveHeight:!1,afterChange:null,appendDots:function(e){return o.default.createElement("ul",{style:{display:"block"}},e)},arrows:!0,autoplay:!1,autoplaySpeed:3e3,beforeChange:null,centerMode:!1,centerPadding:"50px",className:"",cssEase:"ease",customPaging:function(e){return o.default.createElement("button",null,e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:null,nextArrow:null,onEdge:null,onInit:null,onLazyLoadError:null,onReInit:null,pauseOnDotsHover:!1,pauseOnFocus:!1,pauseOnHover:!0,prevArrow:null,responsive:null,rows:1,rtl:!1,slide:"div",slidesPerRow:1,slidesToScroll:1,slidesToShow:1,speed:500,swipe:!0,swipeEvent:null,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,waitForAnimate:!0,asNavFor:null};t.default=a},773:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Dots=void 0;var o=l(n(6540)),a=l(n(6942)),i=n(9445);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,s(r.key),r)}}function s(e){var t=function(e){if("object"!=r(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==r(t)?t:String(t)}function d(e,t){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},d(e,t)}function p(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(p=function(){return!!e})()}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}t.Dots=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(v,e);var t,n,l,m,h=(l=v,m=p(),function(){var e,t=f(l);if(m){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function v(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,v),h.apply(this,arguments)}return t=v,n=[{key:"clickHandler",value:function(e,t){t.preventDefault(),this.props.clickHandler(e)}},{key:"render",value:function(){for(var e,t=this.props,n=t.onMouseEnter,r=t.onMouseOver,l=t.onMouseLeave,c=t.infinite,d=t.slidesToScroll,p=t.slidesToShow,f=t.slideCount,m=t.currentSlide,h=(e={slideCount:f,slidesToScroll:d,slidesToShow:p,infinite:c}).infinite?Math.ceil(e.slideCount/e.slidesToScroll):Math.ceil((e.slideCount-e.slidesToShow)/e.slidesToScroll)+1,v={onMouseEnter:n,onMouseOver:r,onMouseLeave:l},g=[],y=0;y<h;y++){var b=(y+1)*d-1,A=c?b:(0,i.clamp)(b,0,f-1),x=A-(d-1),w=c?x:(0,i.clamp)(x,0,f-1),C=(0,a.default)({"slick-active":c?m>=w&&m<=A:m===w}),S={message:"dots",index:y,slidesToScroll:d,currentSlide:m},E=this.clickHandler.bind(this,S);g=g.concat(o.default.createElement("li",{key:y,className:C},o.default.cloneElement(this.props.customPaging(y),{onClick:E})))}return o.default.cloneElement(this.props.appendDots(g),function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){var r,o,a;r=e,o=t,a=n[t],(o=s(o))in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:this.props.dotsClass},v))}}],n&&c(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),v}(o.default.PureComponent)},4589:(e,t,n)=>{"use strict";t.A=void 0;var r,o=(r=n(8120))&&r.__esModule?r:{default:r};t.A=o.default},8841:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default={animating:!1,autoplaying:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,dragging:!1,edgeDragged:!1,initialized:!1,lazyLoadedList:[],listHeight:null,listWidth:null,scrolling:!1,slideCount:null,slideHeight:null,slideWidth:null,swipeLeft:null,swiped:!1,swiping:!1,touchObject:{startX:0,startY:0,curX:0,curY:0},trackStyle:{},trackWidth:0,targetSlide:0}},4999:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InnerSlider=void 0;var r=p(n(6540)),o=p(n(8841)),a=p(n(181)),i=p(n(6942)),l=n(9445),u=n(5942),c=n(773),s=n(9223),d=p(n(3591));function p(e){return e&&e.__esModule?e:{default:e}}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function m(){return m=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},m.apply(this,arguments)}function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,C(r.key),r)}}function y(e,t){return y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},y(e,t)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function A(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(A=function(){return!!e})()}function x(e){return x=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},x(e)}function w(e,t,n){return(t=C(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function C(e){var t=function(e){if("object"!=f(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=f(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==f(t)?t:String(t)}t.InnerSlider=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&y(e,t)}(S,e);var t,n,p,h,C=(p=S,h=A(),function(){var e,t=x(p);if(h){var n=x(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===f(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}(this,e)});function S(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,S),w(b(t=C.call(this,e)),"listRefHandler",(function(e){return t.list=e})),w(b(t),"trackRefHandler",(function(e){return t.track=e})),w(b(t),"adaptHeight",(function(){if(t.props.adaptiveHeight&&t.list){var e=t.list.querySelector('[data-index="'.concat(t.state.currentSlide,'"]'));t.list.style.height=(0,l.getHeight)(e)+"px"}})),w(b(t),"componentDidMount",(function(){if(t.props.onInit&&t.props.onInit(),t.props.lazyLoad){var e=(0,l.getOnDemandLazySlides)(v(v({},t.props),t.state));e.length>0&&(t.setState((function(t){return{lazyLoadedList:t.lazyLoadedList.concat(e)}})),t.props.onLazyLoad&&t.props.onLazyLoad(e))}var n=v({listRef:t.list,trackRef:t.track},t.props);t.updateState(n,!0,(function(){t.adaptHeight(),t.props.autoplay&&t.autoPlay("update")})),"progressive"===t.props.lazyLoad&&(t.lazyLoadTimer=setInterval(t.progressiveLazyLoad,1e3)),t.ro=new d.default((function(){t.state.animating?(t.onWindowResized(!1),t.callbackTimers.push(setTimeout((function(){return t.onWindowResized()}),t.props.speed))):t.onWindowResized()})),t.ro.observe(t.list),document.querySelectorAll&&Array.prototype.forEach.call(document.querySelectorAll(".slick-slide"),(function(e){e.onfocus=t.props.pauseOnFocus?t.onSlideFocus:null,e.onblur=t.props.pauseOnFocus?t.onSlideBlur:null})),window.addEventListener?window.addEventListener("resize",t.onWindowResized):window.attachEvent("onresize",t.onWindowResized)})),w(b(t),"componentWillUnmount",(function(){t.animationEndCallback&&clearTimeout(t.animationEndCallback),t.lazyLoadTimer&&clearInterval(t.lazyLoadTimer),t.callbackTimers.length&&(t.callbackTimers.forEach((function(e){return clearTimeout(e)})),t.callbackTimers=[]),window.addEventListener?window.removeEventListener("resize",t.onWindowResized):window.detachEvent("onresize",t.onWindowResized),t.autoplayTimer&&clearInterval(t.autoplayTimer),t.ro.disconnect()})),w(b(t),"componentDidUpdate",(function(e){if(t.checkImagesLoad(),t.props.onReInit&&t.props.onReInit(),t.props.lazyLoad){var n=(0,l.getOnDemandLazySlides)(v(v({},t.props),t.state));n.length>0&&(t.setState((function(e){return{lazyLoadedList:e.lazyLoadedList.concat(n)}})),t.props.onLazyLoad&&t.props.onLazyLoad(n))}t.adaptHeight();var o=v(v({listRef:t.list,trackRef:t.track},t.props),t.state),a=t.didPropsChange(e);a&&t.updateState(o,a,(function(){t.state.currentSlide>=r.default.Children.count(t.props.children)&&t.changeSlide({message:"index",index:r.default.Children.count(t.props.children)-t.props.slidesToShow,currentSlide:t.state.currentSlide}),t.props.autoplay?t.autoPlay("update"):t.pause("paused")}))})),w(b(t),"onWindowResized",(function(e){t.debouncedResize&&t.debouncedResize.cancel(),t.debouncedResize=(0,a.default)((function(){return t.resizeWindow(e)}),50),t.debouncedResize()})),w(b(t),"resizeWindow",(function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(Boolean(t.track&&t.track.node)){var n=v(v({listRef:t.list,trackRef:t.track},t.props),t.state);t.updateState(n,e,(function(){t.props.autoplay?t.autoPlay("update"):t.pause("paused")})),t.setState({animating:!1}),clearTimeout(t.animationEndCallback),delete t.animationEndCallback}})),w(b(t),"updateState",(function(e,n,o){var a=(0,l.initializedState)(e);e=v(v(v({},e),a),{},{slideIndex:a.currentSlide});var i=(0,l.getTrackLeft)(e);e=v(v({},e),{},{left:i});var u=(0,l.getTrackCSS)(e);(n||r.default.Children.count(t.props.children)!==r.default.Children.count(e.children))&&(a.trackStyle=u),t.setState(a,o)})),w(b(t),"ssrInit",(function(){if(t.props.variableWidth){var e=0,n=0,o=[],a=(0,l.getPreClones)(v(v(v({},t.props),t.state),{},{slideCount:t.props.children.length})),i=(0,l.getPostClones)(v(v(v({},t.props),t.state),{},{slideCount:t.props.children.length}));t.props.children.forEach((function(t){o.push(t.props.style.width),e+=t.props.style.width}));for(var u=0;u<a;u++)n+=o[o.length-1-u],e+=o[o.length-1-u];for(var c=0;c<i;c++)e+=o[c];for(var s=0;s<t.state.currentSlide;s++)n+=o[s];var d={width:e+"px",left:-n+"px"};if(t.props.centerMode){var p="".concat(o[t.state.currentSlide],"px");d.left="calc(".concat(d.left," + (100% - ").concat(p,") / 2 ) ")}return{trackStyle:d}}var f=r.default.Children.count(t.props.children),m=v(v(v({},t.props),t.state),{},{slideCount:f}),h=(0,l.getPreClones)(m)+(0,l.getPostClones)(m)+f,g=100/t.props.slidesToShow*h,y=100/h,b=-y*((0,l.getPreClones)(m)+t.state.currentSlide)*g/100;return t.props.centerMode&&(b+=(100-y*g/100)/2),{slideWidth:y+"%",trackStyle:{width:g+"%",left:b+"%"}}})),w(b(t),"checkImagesLoad",(function(){var e=t.list&&t.list.querySelectorAll&&t.list.querySelectorAll(".slick-slide img")||[],n=e.length,r=0;Array.prototype.forEach.call(e,(function(e){var o=function(){return++r&&r>=n&&t.onWindowResized()};if(e.onclick){var a=e.onclick;e.onclick=function(t){a(t),e.parentNode.focus()}}else e.onclick=function(){return e.parentNode.focus()};e.onload||(t.props.lazyLoad?e.onload=function(){t.adaptHeight(),t.callbackTimers.push(setTimeout(t.onWindowResized,t.props.speed))}:(e.onload=o,e.onerror=function(){o(),t.props.onLazyLoadError&&t.props.onLazyLoadError()}))}))})),w(b(t),"progressiveLazyLoad",(function(){for(var e=[],n=v(v({},t.props),t.state),r=t.state.currentSlide;r<t.state.slideCount+(0,l.getPostClones)(n);r++)if(t.state.lazyLoadedList.indexOf(r)<0){e.push(r);break}for(var o=t.state.currentSlide-1;o>=-(0,l.getPreClones)(n);o--)if(t.state.lazyLoadedList.indexOf(o)<0){e.push(o);break}e.length>0?(t.setState((function(t){return{lazyLoadedList:t.lazyLoadedList.concat(e)}})),t.props.onLazyLoad&&t.props.onLazyLoad(e)):t.lazyLoadTimer&&(clearInterval(t.lazyLoadTimer),delete t.lazyLoadTimer)})),w(b(t),"slideHandler",(function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=t.props,o=r.asNavFor,a=r.beforeChange,i=r.onLazyLoad,u=r.speed,c=r.afterChange,s=t.state.currentSlide,d=(0,l.slideHandler)(v(v(v({index:e},t.props),t.state),{},{trackRef:t.track,useCSS:t.props.useCSS&&!n})),p=d.state,f=d.nextState;if(p){a&&a(s,p.currentSlide);var m=p.lazyLoadedList.filter((function(e){return t.state.lazyLoadedList.indexOf(e)<0}));i&&m.length>0&&i(m),!t.props.waitForAnimate&&t.animationEndCallback&&(clearTimeout(t.animationEndCallback),c&&c(s),delete t.animationEndCallback),t.setState(p,(function(){o&&t.asNavForIndex!==e&&(t.asNavForIndex=e,o.innerSlider.slideHandler(e)),f&&(t.animationEndCallback=setTimeout((function(){var e=f.animating,n=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(f,["animating"]);t.setState(n,(function(){t.callbackTimers.push(setTimeout((function(){return t.setState({animating:e})}),10)),c&&c(p.currentSlide),delete t.animationEndCallback}))}),u))}))}})),w(b(t),"changeSlide",(function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=v(v({},t.props),t.state),o=(0,l.changeSlide)(r,e);if((0===o||o)&&(!0===n?t.slideHandler(o,n):t.slideHandler(o),t.props.autoplay&&t.autoPlay("update"),t.props.focusOnSelect)){var a=t.list.querySelectorAll(".slick-current");a[0]&&a[0].focus()}})),w(b(t),"clickHandler",(function(e){!1===t.clickable&&(e.stopPropagation(),e.preventDefault()),t.clickable=!0})),w(b(t),"keyHandler",(function(e){var n=(0,l.keyHandler)(e,t.props.accessibility,t.props.rtl);""!==n&&t.changeSlide({message:n})})),w(b(t),"selectHandler",(function(e){t.changeSlide(e)})),w(b(t),"disableBodyScroll",(function(){window.ontouchmove=function(e){(e=e||window.event).preventDefault&&e.preventDefault(),e.returnValue=!1}})),w(b(t),"enableBodyScroll",(function(){window.ontouchmove=null})),w(b(t),"swipeStart",(function(e){t.props.verticalSwiping&&t.disableBodyScroll();var n=(0,l.swipeStart)(e,t.props.swipe,t.props.draggable);""!==n&&t.setState(n)})),w(b(t),"swipeMove",(function(e){var n=(0,l.swipeMove)(e,v(v(v({},t.props),t.state),{},{trackRef:t.track,listRef:t.list,slideIndex:t.state.currentSlide}));n&&(n.swiping&&(t.clickable=!1),t.setState(n))})),w(b(t),"swipeEnd",(function(e){var n=(0,l.swipeEnd)(e,v(v(v({},t.props),t.state),{},{trackRef:t.track,listRef:t.list,slideIndex:t.state.currentSlide}));if(n){var r=n.triggerSlideHandler;delete n.triggerSlideHandler,t.setState(n),void 0!==r&&(t.slideHandler(r),t.props.verticalSwiping&&t.enableBodyScroll())}})),w(b(t),"touchEnd",(function(e){t.swipeEnd(e),t.clickable=!0})),w(b(t),"slickPrev",(function(){t.callbackTimers.push(setTimeout((function(){return t.changeSlide({message:"previous"})}),0))})),w(b(t),"slickNext",(function(){t.callbackTimers.push(setTimeout((function(){return t.changeSlide({message:"next"})}),0))})),w(b(t),"slickGoTo",(function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e=Number(e),isNaN(e))return"";t.callbackTimers.push(setTimeout((function(){return t.changeSlide({message:"index",index:e,currentSlide:t.state.currentSlide},n)}),0))})),w(b(t),"play",(function(){var e;if(t.props.rtl)e=t.state.currentSlide-t.props.slidesToScroll;else{if(!(0,l.canGoNext)(v(v({},t.props),t.state)))return!1;e=t.state.currentSlide+t.props.slidesToScroll}t.slideHandler(e)})),w(b(t),"autoPlay",(function(e){t.autoplayTimer&&clearInterval(t.autoplayTimer);var n=t.state.autoplaying;if("update"===e){if("hovered"===n||"focused"===n||"paused"===n)return}else if("leave"===e){if("paused"===n||"focused"===n)return}else if("blur"===e&&("paused"===n||"hovered"===n))return;t.autoplayTimer=setInterval(t.play,t.props.autoplaySpeed+50),t.setState({autoplaying:"playing"})})),w(b(t),"pause",(function(e){t.autoplayTimer&&(clearInterval(t.autoplayTimer),t.autoplayTimer=null);var n=t.state.autoplaying;"paused"===e?t.setState({autoplaying:"paused"}):"focused"===e?"hovered"!==n&&"playing"!==n||t.setState({autoplaying:"focused"}):"playing"===n&&t.setState({autoplaying:"hovered"})})),w(b(t),"onDotsOver",(function(){return t.props.autoplay&&t.pause("hovered")})),w(b(t),"onDotsLeave",(function(){return t.props.autoplay&&"hovered"===t.state.autoplaying&&t.autoPlay("leave")})),w(b(t),"onTrackOver",(function(){return t.props.autoplay&&t.pause("hovered")})),w(b(t),"onTrackLeave",(function(){return t.props.autoplay&&"hovered"===t.state.autoplaying&&t.autoPlay("leave")})),w(b(t),"onSlideFocus",(function(){return t.props.autoplay&&t.pause("focused")})),w(b(t),"onSlideBlur",(function(){return t.props.autoplay&&"focused"===t.state.autoplaying&&t.autoPlay("blur")})),w(b(t),"render",(function(){var e,n,o,a=(0,i.default)("slick-slider",t.props.className,{"slick-vertical":t.props.vertical,"slick-initialized":!0}),d=v(v({},t.props),t.state),p=(0,l.extractObject)(d,["fade","cssEase","speed","infinite","centerMode","focusOnSelect","currentSlide","lazyLoad","lazyLoadedList","rtl","slideWidth","slideHeight","listHeight","vertical","slidesToShow","slidesToScroll","slideCount","trackStyle","variableWidth","unslick","centerPadding","targetSlide","useCSS"]),f=t.props.pauseOnHover;if(p=v(v({},p),{},{onMouseEnter:f?t.onTrackOver:null,onMouseLeave:f?t.onTrackLeave:null,onMouseOver:f?t.onTrackOver:null,focusOnSelect:t.props.focusOnSelect&&t.clickable?t.selectHandler:null}),!0===t.props.dots&&t.state.slideCount>=t.props.slidesToShow){var h=(0,l.extractObject)(d,["dotsClass","slideCount","slidesToShow","currentSlide","slidesToScroll","clickHandler","children","customPaging","infinite","appendDots"]),g=t.props.pauseOnDotsHover;h=v(v({},h),{},{clickHandler:t.changeSlide,onMouseEnter:g?t.onDotsLeave:null,onMouseOver:g?t.onDotsOver:null,onMouseLeave:g?t.onDotsLeave:null}),e=r.default.createElement(c.Dots,h)}var y=(0,l.extractObject)(d,["infinite","centerMode","currentSlide","slideCount","slidesToShow","prevArrow","nextArrow"]);y.clickHandler=t.changeSlide,t.props.arrows&&(n=r.default.createElement(s.PrevArrow,y),o=r.default.createElement(s.NextArrow,y));var b=null;t.props.vertical&&(b={height:t.state.listHeight});var A=null;!1===t.props.vertical?!0===t.props.centerMode&&(A={padding:"0px "+t.props.centerPadding}):!0===t.props.centerMode&&(A={padding:t.props.centerPadding+" 0px"});var x=v(v({},b),A),w=t.props.touchMove,C={className:"slick-list",style:x,onClick:t.clickHandler,onMouseDown:w?t.swipeStart:null,onMouseMove:t.state.dragging&&w?t.swipeMove:null,onMouseUp:w?t.swipeEnd:null,onMouseLeave:t.state.dragging&&w?t.swipeEnd:null,onTouchStart:w?t.swipeStart:null,onTouchMove:t.state.dragging&&w?t.swipeMove:null,onTouchEnd:w?t.touchEnd:null,onTouchCancel:t.state.dragging&&w?t.swipeEnd:null,onKeyDown:t.props.accessibility?t.keyHandler:null},S={className:a,dir:"ltr",style:t.props.style};return t.props.unslick&&(C={className:"slick-list"},S={className:a}),r.default.createElement("div",S,t.props.unslick?"":n,r.default.createElement("div",m({ref:t.listRefHandler},C),r.default.createElement(u.Track,m({ref:t.trackRefHandler},p),t.props.children)),t.props.unslick?"":o,t.props.unslick?"":e)})),t.list=null,t.track=null,t.state=v(v({},o.default),{},{currentSlide:t.props.initialSlide,targetSlide:t.props.initialSlide?t.props.initialSlide:0,slideCount:r.default.Children.count(t.props.children)}),t.callbackTimers=[],t.clickable=!0,t.debouncedResize=null;var n=t.ssrInit();return t.state=v(v({},t.state),n),t}return t=S,(n=[{key:"didPropsChange",value:function(e){for(var t=!1,n=0,o=Object.keys(this.props);n<o.length;n++){var a=o[n];if(!e.hasOwnProperty(a)){t=!0;break}if("object"!==f(e[a])&&"function"!=typeof e[a]&&!isNaN(e[a])&&e[a]!==this.props[a]){t=!0;break}}return t||r.default.Children.count(this.props.children)!==r.default.Children.count(e.children)}}])&&g(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),S}(r.default.Component)},8120:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(6540)),o=n(4999),a=u(n(1441)),i=u(n(1327)),l=n(9445);function u(e){return e&&e.__esModule?e:{default:e}}function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,b(r.key),r)}}function m(e,t){return m=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},m(e,t)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(v=function(){return!!e})()}function g(e){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},g(e)}function y(e,t,n){return(t=b(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e){var t=function(e){if("object"!=c(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==c(t)?t:String(t)}var A=(0,l.canUseDOM)()&&n(2386);t.default=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&m(e,t)}(x,e);var t,n,u,d,b=(u=x,d=v(),function(){var e,t=g(u);if(d){var n=g(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===c(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return h(e)}(this,e)});function x(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,x),y(h(t=b.call(this,e)),"innerSliderRefHandler",(function(e){return t.innerSlider=e})),y(h(t),"slickPrev",(function(){return t.innerSlider.slickPrev()})),y(h(t),"slickNext",(function(){return t.innerSlider.slickNext()})),y(h(t),"slickGoTo",(function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t.innerSlider.slickGoTo(e,n)})),y(h(t),"slickPause",(function(){return t.innerSlider.pause("paused")})),y(h(t),"slickPlay",(function(){return t.innerSlider.autoPlay("play")})),t.state={breakpoint:null},t._responsiveMediaHandlers=[],t}return t=x,(n=[{key:"media",value:function(e,t){A.register(e,t),this._responsiveMediaHandlers.push({query:e,handler:t})}},{key:"componentDidMount",value:function(){var e=this;if(this.props.responsive){var t=this.props.responsive.map((function(e){return e.breakpoint}));t.sort((function(e,t){return e-t})),t.forEach((function(n,r){var o;o=0===r?(0,a.default)({minWidth:0,maxWidth:n}):(0,a.default)({minWidth:t[r-1]+1,maxWidth:n}),(0,l.canUseDOM)()&&e.media(o,(function(){e.setState({breakpoint:n})}))}));var n=(0,a.default)({minWidth:t.slice(-1)[0]});(0,l.canUseDOM)()&&this.media(n,(function(){e.setState({breakpoint:null})}))}}},{key:"componentWillUnmount",value:function(){this._responsiveMediaHandlers.forEach((function(e){A.unregister(e.query,e.handler)}))}},{key:"render",value:function(){var e,t,n=this;(e=this.state.breakpoint?"unslick"===(t=this.props.responsive.filter((function(e){return e.breakpoint===n.state.breakpoint})))[0].settings?"unslick":p(p(p({},i.default),this.props),t[0].settings):p(p({},i.default),this.props)).centerMode&&(e.slidesToScroll,e.slidesToScroll=1),e.fade&&(e.slidesToShow,e.slidesToScroll,e.slidesToShow=1,e.slidesToScroll=1);var a=r.default.Children.toArray(this.props.children);a=a.filter((function(e){return"string"==typeof e?!!e.trim():!!e})),e.variableWidth&&(e.rows>1||e.slidesPerRow>1)&&(console.warn("variableWidth is not supported in case of rows > 1 or slidesPerRow > 1"),e.variableWidth=!1);for(var u=[],c=null,d=0;d<a.length;d+=e.rows*e.slidesPerRow){for(var f=[],m=d;m<d+e.rows*e.slidesPerRow;m+=e.slidesPerRow){for(var h=[],v=m;v<m+e.slidesPerRow&&(e.variableWidth&&a[v].props.style&&(c=a[v].props.style.width),!(v>=a.length));v+=1)h.push(r.default.cloneElement(a[v],{key:100*d+10*m+v,tabIndex:-1,style:{width:"".concat(100/e.slidesPerRow,"%"),display:"inline-block"}}));f.push(r.default.createElement("div",{key:10*d+m},h))}e.variableWidth?u.push(r.default.createElement("div",{key:d,style:{width:c}},f)):u.push(r.default.createElement("div",{key:d},f))}if("unslick"===e){var g="regular slider "+(this.props.className||"");return r.default.createElement("div",{className:g},a)}return u.length<=e.slidesToShow&&!e.infinite&&(e.unslick=!0),r.default.createElement(o.InnerSlider,s({style:this.props.style,ref:this.innerSliderRefHandler},(0,l.filterSettings)(e)),u)}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),x}(r.default.Component)},5942:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Track=void 0;var r=i(n(6540)),o=i(n(6942)),a=n(9445);function i(e){return e&&e.__esModule?e:{default:e}}function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function u(){return u=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u.apply(this,arguments)}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,g(r.key),r)}}function s(e,t){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},s(e,t)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(p=function(){return!!e})()}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(e,t,n){return(t=g(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e){var t=function(e){if("object"!=l(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=l(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==l(t)?t:String(t)}var y=function(e){var t,n,r,o,a;return r=(a=e.rtl?e.slideCount-1-e.index:e.index)<0||a>=e.slideCount,e.centerMode?(o=Math.floor(e.slidesToShow/2),n=(a-e.currentSlide)%e.slideCount==0,a>e.currentSlide-o-1&&a<=e.currentSlide+o&&(t=!0)):t=e.currentSlide<=a&&a<e.currentSlide+e.slidesToShow,{"slick-slide":!0,"slick-active":t,"slick-center":n,"slick-cloned":r,"slick-current":a===(e.targetSlide<0?e.targetSlide+e.slideCount:e.targetSlide>=e.slideCount?e.targetSlide-e.slideCount:e.targetSlide)}},b=function(e,t){return e.key||t};t.Track=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(A,e);var t,n,i,m,g=(i=A,m=p(),function(){var e,t=f(i);if(m){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return d(e)}(this,e)});function A(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,A);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return v(d(e=g.call.apply(g,[this].concat(n))),"node",null),v(d(e),"handleRef",(function(t){e.node=t})),e}return t=A,(n=[{key:"render",value:function(){var e=function(e){var t,n=[],i=[],l=[],u=r.default.Children.count(e.children),c=(0,a.lazyStartIndex)(e),s=(0,a.lazyEndIndex)(e);return r.default.Children.forEach(e.children,(function(d,p){var f,m={message:"children",index:p,slidesToScroll:e.slidesToScroll,currentSlide:e.currentSlide};f=!e.lazyLoad||e.lazyLoad&&e.lazyLoadedList.indexOf(p)>=0?d:r.default.createElement("div",null);var v=function(e){var t={};return void 0!==e.variableWidth&&!1!==e.variableWidth||(t.width=e.slideWidth),e.fade&&(t.position="relative",e.vertical?t.top=-e.index*parseInt(e.slideHeight):t.left=-e.index*parseInt(e.slideWidth),t.opacity=e.currentSlide===e.index?1:0,t.zIndex=e.currentSlide===e.index?999:998,e.useCSS&&(t.transition="opacity "+e.speed+"ms "+e.cssEase+", visibility "+e.speed+"ms "+e.cssEase)),t}(h(h({},e),{},{index:p})),g=f.props.className||"",A=y(h(h({},e),{},{index:p}));if(n.push(r.default.cloneElement(f,{key:"original"+b(f,p),"data-index":p,className:(0,o.default)(A,g),tabIndex:"-1","aria-hidden":!A["slick-active"],style:h(h({outline:"none"},f.props.style||{}),v),onClick:function(t){f.props&&f.props.onClick&&f.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(m)}})),e.infinite&&!1===e.fade){var x=u-p;x<=(0,a.getPreClones)(e)&&((t=-x)>=c&&(f=d),A=y(h(h({},e),{},{index:t})),i.push(r.default.cloneElement(f,{key:"precloned"+b(f,t),"data-index":t,tabIndex:"-1",className:(0,o.default)(A,g),"aria-hidden":!A["slick-active"],style:h(h({},f.props.style||{}),v),onClick:function(t){f.props&&f.props.onClick&&f.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(m)}}))),(t=u+p)<s&&(f=d),A=y(h(h({},e),{},{index:t})),l.push(r.default.cloneElement(f,{key:"postcloned"+b(f,t),"data-index":t,tabIndex:"-1",className:(0,o.default)(A,g),"aria-hidden":!A["slick-active"],style:h(h({},f.props.style||{}),v),onClick:function(t){f.props&&f.props.onClick&&f.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(m)}}))}})),e.rtl?i.concat(n,l).reverse():i.concat(n,l)}(this.props),t=this.props,n={onMouseEnter:t.onMouseEnter,onMouseOver:t.onMouseOver,onMouseLeave:t.onMouseLeave};return r.default.createElement("div",u({ref:this.handleRef,className:"slick-track",style:this.props.trackStyle},n),e)}}])&&c(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),A}(r.default.PureComponent)},9445:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkSpecKeys=t.checkNavigable=t.changeSlide=t.canUseDOM=t.canGoNext=void 0,t.clamp=c,t.extractObject=void 0,t.filterSettings=function(e){return _.reduce((function(t,n){return e.hasOwnProperty(n)&&(t[n]=e[n]),t}),{})},t.validSettings=t.swipeStart=t.swipeMove=t.swipeEnd=t.slidesOnRight=t.slidesOnLeft=t.slideHandler=t.siblingDirection=t.safePreventDefault=t.lazyStartIndex=t.lazySlidesOnRight=t.lazySlidesOnLeft=t.lazyEndIndex=t.keyHandler=t.initializedState=t.getWidth=t.getTrackLeft=t.getTrackCSS=t.getTrackAnimateCSS=t.getTotalSlides=t.getSwipeDirection=t.getSlideCount=t.getRequiredLazySlides=t.getPreClones=t.getPostClones=t.getOnDemandLazySlides=t.getNavigableIndexes=t.getHeight=void 0;var r=a(n(6540)),o=a(n(1327));function a(e){return e&&e.__esModule?e:{default:e}}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){var r,o,a,l;r=e,o=t,a=n[t],l=function(e){if("object"!=i(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o),(o="symbol"==i(l)?l:String(l))in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t,n){return Math.max(t,Math.min(e,n))}var s=t.safePreventDefault=function(e){["onTouchStart","onTouchMove","onWheel"].includes(e._reactName)||e.preventDefault()},d=t.getOnDemandLazySlides=function(e){for(var t=[],n=p(e),r=f(e),o=n;o<r;o++)e.lazyLoadedList.indexOf(o)<0&&t.push(o);return t},p=(t.getRequiredLazySlides=function(e){for(var t=[],n=p(e),r=f(e),o=n;o<r;o++)t.push(o);return t},t.lazyStartIndex=function(e){return e.currentSlide-m(e)}),f=t.lazyEndIndex=function(e){return e.currentSlide+h(e)},m=t.lazySlidesOnLeft=function(e){return e.centerMode?Math.floor(e.slidesToShow/2)+(parseInt(e.centerPadding)>0?1:0):0},h=t.lazySlidesOnRight=function(e){return e.centerMode?Math.floor((e.slidesToShow-1)/2)+1+(parseInt(e.centerPadding)>0?1:0):e.slidesToShow},v=t.getWidth=function(e){return e&&e.offsetWidth||0},g=t.getHeight=function(e){return e&&e.offsetHeight||0},y=t.getSwipeDirection=function(e){var t,n,r,o,a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t=e.startX-e.curX,n=e.startY-e.curY,r=Math.atan2(n,t),(o=Math.round(180*r/Math.PI))<0&&(o=360-Math.abs(o)),o<=45&&o>=0||o<=360&&o>=315?"left":o>=135&&o<=225?"right":!0===a?o>=35&&o<=135?"up":"down":"vertical"},b=t.canGoNext=function(e){var t=!0;return e.infinite||(e.centerMode&&e.currentSlide>=e.slideCount-1||e.slideCount<=e.slidesToShow||e.currentSlide>=e.slideCount-e.slidesToShow)&&(t=!1),t},A=(t.extractObject=function(e,t){var n={};return t.forEach((function(t){return n[t]=e[t]})),n},t.initializedState=function(e){var t,n=r.default.Children.count(e.children),o=e.listRef,a=Math.ceil(v(o)),i=e.trackRef&&e.trackRef.node,l=Math.ceil(v(i));if(e.vertical)t=a;else{var c=e.centerMode&&2*parseInt(e.centerPadding);"string"==typeof e.centerPadding&&"%"===e.centerPadding.slice(-1)&&(c*=a/100),t=Math.ceil((a-c)/e.slidesToShow)}var s=o&&g(o.querySelector('[data-index="0"]')),p=s*e.slidesToShow,f=void 0===e.currentSlide?e.initialSlide:e.currentSlide;e.rtl&&void 0===e.currentSlide&&(f=n-1-e.initialSlide);var m=e.lazyLoadedList||[],h=d(u(u({},e),{},{currentSlide:f,lazyLoadedList:m})),y={slideCount:n,slideWidth:t,listWidth:a,trackWidth:l,currentSlide:f,slideHeight:s,listHeight:p,lazyLoadedList:m=m.concat(h)};return null===e.autoplaying&&e.autoplay&&(y.autoplaying="playing"),y},t.slideHandler=function(e){var t=e.waitForAnimate,n=e.animating,r=e.fade,o=e.infinite,a=e.index,i=e.slideCount,l=e.lazyLoad,s=e.currentSlide,p=e.centerMode,f=e.slidesToScroll,m=e.slidesToShow,h=e.useCSS,v=e.lazyLoadedList;if(t&&n)return{};var g,y,A,x=a,w={},C={},B=o?a:c(a,0,i-1);if(r){if(!o&&(a<0||a>=i))return{};a<0?x=a+i:a>=i&&(x=a-i),l&&v.indexOf(x)<0&&(v=v.concat(x)),w={animating:!0,currentSlide:x,lazyLoadedList:v,targetSlide:x},C={animating:!1,targetSlide:x}}else g=x,x<0?(g=x+i,o?i%f!=0&&(g=i-i%f):g=0):!b(e)&&x>s?x=g=s:p&&x>=i?(x=o?i:i-1,g=o?0:i-1):x>=i&&(g=x-i,o?i%f!=0&&(g=0):g=i-m),!o&&x+m>=i&&(g=i-m),y=k(u(u({},e),{},{slideIndex:x})),A=k(u(u({},e),{},{slideIndex:g})),o||(y===A&&(x=g),y=A),l&&(v=v.concat(d(u(u({},e),{},{currentSlide:x})))),h?(w={animating:!0,currentSlide:g,trackStyle:E(u(u({},e),{},{left:y})),lazyLoadedList:v,targetSlide:B},C={animating:!1,currentSlide:g,trackStyle:S(u(u({},e),{},{left:A})),swipeLeft:null,targetSlide:B}):w={currentSlide:g,trackStyle:S(u(u({},e),{},{left:A})),lazyLoadedList:v,targetSlide:B};return{state:w,nextState:C}},t.changeSlide=function(e,t){var n,r,o,a,i=e.slidesToScroll,l=e.slidesToShow,c=e.slideCount,s=e.currentSlide,d=e.targetSlide,p=e.lazyLoad,f=e.infinite;if(n=c%i!=0?0:(c-s)%i,"previous"===t.message)a=s-(o=0===n?i:l-n),p&&!f&&(a=-1==(r=s-o)?c-1:r),f||(a=d-i);else if("next"===t.message)a=s+(o=0===n?i:n),p&&!f&&(a=(s+i)%c+n),f||(a=d+i);else if("dots"===t.message)a=t.index*t.slidesToScroll;else if("children"===t.message){if(a=t.index,f){var m=N(u(u({},e),{},{targetSlide:a}));a>t.currentSlide&&"left"===m?a-=c:a<t.currentSlide&&"right"===m&&(a+=c)}}else"index"===t.message&&(a=Number(t.index));return a},t.keyHandler=function(e,t,n){return e.target.tagName.match("TEXTAREA|INPUT|SELECT")||!t?"":37===e.keyCode?n?"next":"previous":39===e.keyCode?n?"previous":"next":""},t.swipeStart=function(e,t,n){return"IMG"===e.target.tagName&&s(e),!t||!n&&-1!==e.type.indexOf("mouse")?"":{dragging:!0,touchObject:{startX:e.touches?e.touches[0].pageX:e.clientX,startY:e.touches?e.touches[0].pageY:e.clientY,curX:e.touches?e.touches[0].pageX:e.clientX,curY:e.touches?e.touches[0].pageY:e.clientY}}},t.swipeMove=function(e,t){var n=t.scrolling,r=t.animating,o=t.vertical,a=t.swipeToSlide,i=t.verticalSwiping,l=t.rtl,c=t.currentSlide,d=t.edgeFriction,p=t.edgeDragged,f=t.onEdge,m=t.swiped,h=t.swiping,v=t.slideCount,g=t.slidesToScroll,A=t.infinite,x=t.touchObject,w=t.swipeEvent,C=t.listHeight,E=t.listWidth;if(!n){if(r)return s(e);o&&a&&i&&s(e);var B,M={},O=k(t);x.curX=e.touches?e.touches[0].pageX:e.clientX,x.curY=e.touches?e.touches[0].pageY:e.clientY,x.swipeLength=Math.round(Math.sqrt(Math.pow(x.curX-x.startX,2)));var N=Math.round(Math.sqrt(Math.pow(x.curY-x.startY,2)));if(!i&&!h&&N>10)return{scrolling:!0};i&&(x.swipeLength=N);var T=(l?-1:1)*(x.curX>x.startX?1:-1);i&&(T=x.curY>x.startY?1:-1);var j=Math.ceil(v/g),_=y(t.touchObject,i),P=x.swipeLength;return A||(0===c&&("right"===_||"down"===_)||c+1>=j&&("left"===_||"up"===_)||!b(t)&&("left"===_||"up"===_))&&(P=x.swipeLength*d,!1===p&&f&&(f(_),M.edgeDragged=!0)),!m&&w&&(w(_),M.swiped=!0),B=o?O+P*(C/E)*T:l?O-P*T:O+P*T,i&&(B=O+P*T),M=u(u({},M),{},{touchObject:x,swipeLeft:B,trackStyle:S(u(u({},t),{},{left:B}))}),Math.abs(x.curX-x.startX)<.8*Math.abs(x.curY-x.startY)||x.swipeLength>10&&(M.swiping=!0,s(e)),M}},t.swipeEnd=function(e,t){var n=t.dragging,r=t.swipe,o=t.touchObject,a=t.listWidth,i=t.touchThreshold,l=t.verticalSwiping,c=t.listHeight,d=t.swipeToSlide,p=t.scrolling,f=t.onSwipe,m=t.targetSlide,h=t.currentSlide,v=t.infinite;if(!n)return r&&s(e),{};var g=l?c/i:a/i,b=y(o,l),A={dragging:!1,edgeDragged:!1,scrolling:!1,swiping:!1,swiped:!1,swipeLeft:null,touchObject:{}};if(p)return A;if(!o.swipeLength)return A;if(o.swipeLength>g){var C,S;s(e),f&&f(b);var B=v?h:m;switch(b){case"left":case"up":S=B+w(t),C=d?x(t,S):S,A.currentDirection=0;break;case"right":case"down":S=B-w(t),C=d?x(t,S):S,A.currentDirection=1;break;default:C=B}A.triggerSlideHandler=C}else{var M=k(t);A.trackStyle=E(u(u({},t),{},{left:M}))}return A},t.getNavigableIndexes=function(e){for(var t=e.infinite?2*e.slideCount:e.slideCount,n=e.infinite?-1*e.slidesToShow:0,r=e.infinite?-1*e.slidesToShow:0,o=[];n<t;)o.push(n),n=r+e.slidesToScroll,r+=Math.min(e.slidesToScroll,e.slidesToShow);return o}),x=t.checkNavigable=function(e,t){var n=A(e),r=0;if(t>n[n.length-1])t=n[n.length-1];else for(var o in n){if(t<n[o]){t=r;break}r=n[o]}return t},w=t.getSlideCount=function(e){var t=e.centerMode?e.slideWidth*Math.floor(e.slidesToShow/2):0;if(e.swipeToSlide){var n,r=e.listRef,o=r.querySelectorAll&&r.querySelectorAll(".slick-slide")||[];if(Array.from(o).every((function(r){if(e.vertical){if(r.offsetTop+g(r)/2>-1*e.swipeLeft)return n=r,!1}else if(r.offsetLeft-t+v(r)/2>-1*e.swipeLeft)return n=r,!1;return!0})),!n)return 0;var a=!0===e.rtl?e.slideCount-e.currentSlide:e.currentSlide;return Math.abs(n.dataset.index-a)||1}return e.slidesToScroll},C=t.checkSpecKeys=function(e,t){return t.reduce((function(t,n){return t&&e.hasOwnProperty(n)}),!0)?null:console.error("Keys Missing:",e)},S=t.getTrackCSS=function(e){var t,n;C(e,["left","variableWidth","slideCount","slidesToShow","slideWidth"]);var r=e.slideCount+2*e.slidesToShow;e.vertical?n=r*e.slideHeight:t=O(e)*e.slideWidth;var o={opacity:1,transition:"",WebkitTransition:""};if(e.useTransform){var a=e.vertical?"translate3d(0px, "+e.left+"px, 0px)":"translate3d("+e.left+"px, 0px, 0px)",i=e.vertical?"translate3d(0px, "+e.left+"px, 0px)":"translate3d("+e.left+"px, 0px, 0px)",l=e.vertical?"translateY("+e.left+"px)":"translateX("+e.left+"px)";o=u(u({},o),{},{WebkitTransform:a,transform:i,msTransform:l})}else e.vertical?o.top=e.left:o.left=e.left;return e.fade&&(o={opacity:1}),t&&(o.width=t),n&&(o.height=n),window&&!window.addEventListener&&window.attachEvent&&(e.vertical?o.marginTop=e.left+"px":o.marginLeft=e.left+"px"),o},E=t.getTrackAnimateCSS=function(e){C(e,["left","variableWidth","slideCount","slidesToShow","slideWidth","speed","cssEase"]);var t=S(e);return e.useTransform?(t.WebkitTransition="-webkit-transform "+e.speed+"ms "+e.cssEase,t.transition="transform "+e.speed+"ms "+e.cssEase):e.vertical?t.transition="top "+e.speed+"ms "+e.cssEase:t.transition="left "+e.speed+"ms "+e.cssEase,t},k=t.getTrackLeft=function(e){if(e.unslick)return 0;C(e,["slideIndex","trackRef","infinite","centerMode","slideCount","slidesToShow","slidesToScroll","slideWidth","listWidth","variableWidth","slideHeight"]);var t,n,r=e.slideIndex,o=e.trackRef,a=e.infinite,i=e.centerMode,l=e.slideCount,u=e.slidesToShow,c=e.slidesToScroll,s=e.slideWidth,d=e.listWidth,p=e.variableWidth,f=e.slideHeight,m=e.fade,h=e.vertical;if(m||1===e.slideCount)return 0;var v=0;if(a?(v=-B(e),l%c!=0&&r+c>l&&(v=-(r>l?u-(r-l):l%c)),i&&(v+=parseInt(u/2))):(l%c!=0&&r+c>l&&(v=u-l%c),i&&(v=parseInt(u/2))),t=h?r*f*-1+v*f:r*s*-1+v*s,!0===p){var g,y=o&&o.node;if(g=r+B(e),t=(n=y&&y.childNodes[g])?-1*n.offsetLeft:0,!0===i){g=a?r+B(e):r,n=y&&y.children[g],t=0;for(var b=0;b<g;b++)t-=y&&y.children[b]&&y.children[b].offsetWidth;t-=parseInt(e.centerPadding),t+=n&&(d-n.offsetWidth)/2}}return t},B=t.getPreClones=function(e){return e.unslick||!e.infinite?0:e.variableWidth?e.slideCount:e.slidesToShow+(e.centerMode?1:0)},M=t.getPostClones=function(e){return e.unslick||!e.infinite?0:e.slideCount},O=t.getTotalSlides=function(e){return 1===e.slideCount?1:B(e)+e.slideCount+M(e)},N=t.siblingDirection=function(e){return e.targetSlide>e.currentSlide?e.targetSlide>e.currentSlide+T(e)?"left":"right":e.targetSlide<e.currentSlide-j(e)?"right":"left"},T=t.slidesOnRight=function(e){var t=e.slidesToShow,n=e.centerMode,r=e.rtl,o=e.centerPadding;if(n){var a=(t-1)/2+1;return parseInt(o)>0&&(a+=1),r&&t%2==0&&(a+=1),a}return r?0:t-1},j=t.slidesOnLeft=function(e){var t=e.slidesToShow,n=e.centerMode,r=e.rtl,o=e.centerPadding;if(n){var a=(t-1)/2+1;return parseInt(o)>0&&(a+=1),r||t%2!=0||(a+=1),a}return r?t-1:0},_=(t.canUseDOM=function(){return!("undefined"==typeof window||!window.document||!window.document.createElement)},t.validSettings=Object.keys(o.default))},1020:(e,t,n)=>{"use strict";var r=n(6540),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,s=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(s=t.ref),t)i.call(t,r)&&!u.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:s,props:a,_owner:l.current}}t.Fragment=a,t.jsx=c,t.jsxs=c},5287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||m}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var A=b.prototype=new y;A.constructor=b,h(A,g.prototype),A.isPureReactComponent=!0;var x=Array.isArray,w=Object.prototype.hasOwnProperty,C={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,o)&&!S.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:C.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var B=/\/+/g;function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===a?"."+M(u,0):a,x(i)?(o="",null!=e&&(o=e.replace(B,"$&/")+"/"),O(i,t,o,"",(function(e){return e}))):null!=i&&(k(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(B,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",x(e))for(var c=0;c<e.length;c++){var s=a+M(l=e[c],c);u+=O(l,t,o,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(l=e.next()).done;)u+=O(l=l.value,t,o,s=a+M(l,c++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var j={current:null},_={transition:null},P={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:_,ReactCurrentOwner:C};function z(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.act=z,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=h({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=C.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)w.call(t,c)&&!S.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=_.transition;_.transition={};try{e()}finally{_.transition=t}},t.unstable_act=z,t.useCallback=function(e,t){return j.current.useCallback(e,t)},t.useContext=function(e){return j.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return j.current.useDeferredValue(e)},t.useEffect=function(e,t){return j.current.useEffect(e,t)},t.useId=function(){return j.current.useId()},t.useImperativeHandle=function(e,t,n){return j.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return j.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return j.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return j.current.useMemo(e,t)},t.useReducer=function(e,t,n){return j.current.useReducer(e,t,n)},t.useRef=function(e){return j.current.useRef(e)},t.useState=function(e){return j.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return j.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return j.current.useTransition()},t.version="18.3.1"},6540:(e,t,n)=>{"use strict";e.exports=n(5287)},4848:(e,t,n)=>{"use strict";e.exports=n(1020)},3591:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>C});var r=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some((function(e,r){return e[0]===t&&(n=r,!0)})),n}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var n=e(this.__entries__,t),r=this.__entries__[n];return r&&r[1]},t.prototype.set=function(t,n){var r=e(this.__entries__,t);~r?this.__entries__[r][1]=n:this.__entries__.push([t,n])},t.prototype.delete=function(t){var n=this.__entries__,r=e(n,t);~r&&n.splice(r,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,r=this.__entries__;n<r.length;n++){var o=r[n];e.call(t,o[1],o[0])}},t}()}(),o="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,a=void 0!==n.g&&n.g.Math===Math?n.g:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),i="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(a):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)},l=["top","right","bottom","left","width","height","size","weight"],u="undefined"!=typeof MutationObserver,c=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e){var t=!1,n=!1,r=0;function o(){t&&(t=!1,e()),n&&l()}function a(){i(o)}function l(){var e=Date.now();if(t){if(e-r<2)return;n=!0}else t=!0,n=!1,setTimeout(a,20);r=e}return l}(this.refresh.bind(this))}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){o&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),u?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){o&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,n=void 0===t?"":t;l.some((function(e){return!!~n.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),s=function(e,t){for(var n=0,r=Object.keys(t);n<r.length;n++){var o=r[n];Object.defineProperty(e,o,{value:t[o],enumerable:!1,writable:!1,configurable:!0})}return e},d=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||a},p=g(0,0,0,0);function f(e){return parseFloat(e)||0}function m(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.reduce((function(t,n){return t+f(e["border-"+n+"-width"])}),0)}var h="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof d(e).SVGGraphicsElement}:function(e){return e instanceof d(e).SVGElement&&"function"==typeof e.getBBox};function v(e){return o?h(e)?function(e){var t=e.getBBox();return g(0,0,t.width,t.height)}(e):function(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return p;var r=d(e).getComputedStyle(e),o=function(e){for(var t={},n=0,r=["top","right","bottom","left"];n<r.length;n++){var o=r[n],a=e["padding-"+o];t[o]=f(a)}return t}(r),a=o.left+o.right,i=o.top+o.bottom,l=f(r.width),u=f(r.height);if("border-box"===r.boxSizing&&(Math.round(l+a)!==t&&(l-=m(r,"left","right")+a),Math.round(u+i)!==n&&(u-=m(r,"top","bottom")+i)),!function(e){return e===d(e).document.documentElement}(e)){var c=Math.round(l+a)-t,s=Math.round(u+i)-n;1!==Math.abs(c)&&(l-=c),1!==Math.abs(s)&&(u-=s)}return g(o.left,o.top,l,u)}(e):p}function g(e,t,n,r){return{x:e,y:t,width:n,height:r}}var y=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=g(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=v(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),b=function(e,t){var n,r,o,a,i,l,u,c=(r=(n=t).x,o=n.y,a=n.width,i=n.height,l="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,u=Object.create(l.prototype),s(u,{x:r,y:o,width:a,height:i,top:o,right:r+a,bottom:i+o,left:r}),u);s(this,{target:e,contentRect:c})},A=function(){function e(e,t,n){if(this.activeObservations_=[],this.observations_=new r,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=n}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof d(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new y(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof d(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new b(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),x="undefined"!=typeof WeakMap?new WeakMap:new r,w=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=c.getInstance(),r=new A(t,n,this);x.set(this,r)};["observe","unobserve","disconnect"].forEach((function(e){w.prototype[e]=function(){var t;return(t=x.get(this))[e].apply(t,arguments)}}));const C=void 0!==a.ResizeObserver?a.ResizeObserver:w},7463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],c=l+1,s=e[c];if(0>a(u,n))c<o&&0>a(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[l]=n,r=l);else{if(!(c<o&&0>a(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var c=[],s=[],d=1,p=null,f=3,m=!1,h=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function x(e){if(v=!1,A(e),!h)if(null!==r(c))h=!0,_(w);else{var t=r(s);null!==t&&P(x,t.startTime-e)}}function w(e,n){h=!1,v&&(v=!1,y(k),k=-1),m=!0;var a=f;try{for(A(n),p=r(c);null!==p&&(!(p.expirationTime>n)||e&&!O());){var i=p.callback;if("function"==typeof i){p.callback=null,f=p.priorityLevel;var l=i(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===r(c)&&o(c),A(n)}else o(c);p=r(c)}if(null!==p)var u=!0;else{var d=r(s);null!==d&&P(x,d.startTime-n),u=!1}return u}finally{p=null,f=a,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var C,S=!1,E=null,k=-1,B=5,M=-1;function O(){return!(t.unstable_now()-M<B)}function N(){if(null!==E){var e=t.unstable_now();M=e;var n=!0;try{n=E(!0,e)}finally{n?C():(S=!1,E=null)}}else S=!1}if("function"==typeof b)C=function(){b(N)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,j=T.port2;T.port1.onmessage=N,C=function(){j.postMessage(null)}}else C=function(){g(N,0)};function _(e){E=e,S||(S=!0,C())}function P(e,n){k=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,_(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):B=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(s,e),null===r(c)&&e===r(s)&&(v?(y(k),k=-1):v=!0,P(x,a-i))):(e.sortIndex=l,n(c,e),h||m||(h=!0,_(w))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},9982:(e,t,n)=>{"use strict";e.exports=n(7463)},8028:e=>{e.exports=function(e){return e.replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()})).toLowerCase()}},5072:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var u=e[l],c=r.base?u[0]+r.base:u[0],s=a[c]||0,d="".concat(c," ").concat(s);a[c]=s+1;var p=n(d),f={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=o(f,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var u=r(e,o),c=0;c<a.length;c++){var s=n(a[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=u}}},7659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},5056:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},1113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},3003:(e,t,n)=>{"use strict";e.exports=n.p+"1cfb316a9342cf5541b5.ttf"},4634:e=>{function t(){return e.exports=t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.__esModule=!0,e.exports.default=e.exports,t.apply(null,arguments)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},4994:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},4893:e=>{e.exports=function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n},e.exports.__esModule=!0,e.exports.default=e.exports},6942:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e="",t=0;t<arguments.length;t++){var n=arguments[t];n&&(e=i(e,a(n)))}return e}function a(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return o.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var n in e)r.call(e,n)&&e[n]&&(t=i(t,n));return t}function i(e,t){return t?e?e+" "+t:e+t:e}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},8168:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(null,arguments)}n.d(t,{A:()=>r})},8587:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}n.d(t,{A:()=>r})},4164:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e)){var a=e.length;for(t=0;t<a;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n)}else for(n in e)e[n]&&(o&&(o+=" "),o+=n);return o}n.d(t,{A:()=>o});const o=function(){for(var e,t,n=0,o="",a=arguments.length;n<a;n++)(e=arguments[n])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,loaded:!1,exports:{}};return n[e].call(a.exports,a,a.exports,o),a.loaded=!0,a.exports}o.m=n,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),o.b=document.baseURI||self.location.href,o.nc=void 0,(()=>{"use strict";var e={};o.r(e),o.d(e,{hasBrowserEnv:()=>or,hasStandardBrowserEnv:()=>ir,hasStandardBrowserWebWorkerEnv:()=>lr,navigator:()=>ar,origin:()=>ur});var t=o(6540),n=o.t(t,2),r=o(5338),a=o(5072),i=o.n(a),l=o(7825),u=o.n(l),c=o(7659),s=o.n(c),d=o(5056),p=o.n(d),f=o(540),m=o.n(f),h=o(1113),v=o.n(h),g=o(386),y={};y.styleTagTransform=v(),y.setAttributes=p(),y.insert=s().bind(null,"head"),y.domAPI=u(),y.insertStyleElement=m(),i()(g.A,y),g.A&&g.A.locals&&g.A.locals;var b=o(5314),A=o(3542);var x=o(8587),w=o(8168),C=o(4164);function S(e,t){const n=(0,w.A)({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=(0,w.A)({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const o=e[r]||{},a=t[r];n[r]={},a&&Object.keys(a)?o&&Object.keys(o)?(n[r]=(0,w.A)({},a),Object.keys(o).forEach((e=>{n[r][e]=S(o[e],a[e])}))):n[r]=a:n[r]=o}else void 0===n[r]&&(n[r]=e[r])})),n}var E=o(9854),k=o(771),B=o(1848),M=o(3431),O=o(3666),N=o(6852),T=o(6205),j=o(7992);function _(e,t){return _=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_(e,t)}function P(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,_(e,t)}const z=t.createContext(null);function D(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function R(e,t,n){return null!=n[t]?n[t]:e.props[t]}function L(e,n,r){var o=D(e.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var c=o[u][r];l[o[u][r]]=n(c)}l[u]=n(u)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(n,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,t.isValidElement)(l)){var u=i in n,c=i in o,s=n[i],d=(0,t.isValidElement)(s)&&!s.props.in;!c||u&&!d?c||!u||d?c&&u&&(0,t.isValidElement)(s)&&(a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:s.props.in,exit:R(l,"exit",e),enter:R(l,"enter",e)})):a[i]=(0,t.cloneElement)(l,{in:!1}):a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:R(l,"exit",e),enter:R(l,"enter",e)})}})),a}var I=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},F=function(e){function n(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}P(n,e);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(e,n){var r,o,a=n.children,i=n.handleExited;return{children:n.firstRender?(r=e,o=i,D(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:R(e,"appear",r),enter:R(e,"enter",r),exit:R(e,"exit",r)})}))):L(e,a,i),firstRender:!1}},r.handleExited=function(e,t){var n=D(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,w.A)({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var e=this.props,n=e.component,r=e.childFactory,o=(0,x.A)(e,["component","childFactory"]),a=this.state.contextValue,i=I(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?t.createElement(z.Provider,{value:a},i):t.createElement(z.Provider,{value:a},t.createElement(n,o,i))},n}(t.Component);F.propTypes={},F.defaultProps={component:"div",childFactory:function(e){return e}};const q=F;var U=o(7437),G=o(5487),$=o(4848);var W=o(7104);const Y=(0,W.A)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),H=["center","classes","className"];let V,Q,K,Z,X=e=>e;const J=(0,U.i7)(V||(V=X`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),ee=(0,U.i7)(Q||(Q=X`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),te=(0,U.i7)(K||(K=X`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),ne=(0,B.Ay)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),re=(0,B.Ay)((function(e){const{className:n,classes:r,pulsate:o=!1,rippleX:a,rippleY:i,rippleSize:l,in:u,onExited:c,timeout:s}=e,[d,p]=t.useState(!1),f=(0,C.A)(n,r.ripple,r.rippleVisible,o&&r.ripplePulsate),m={width:l,height:l,top:-l/2+i,left:-l/2+a},h=(0,C.A)(r.child,d&&r.childLeaving,o&&r.childPulsate);return u||d||p(!0),t.useEffect((()=>{if(!u&&null!=c){const e=setTimeout(c,s);return()=>{clearTimeout(e)}}}),[c,u,s]),(0,$.jsx)("span",{className:f,style:m,children:(0,$.jsx)("span",{className:h})})}),{name:"MuiTouchRipple",slot:"Ripple"})(Z||(Z=X`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Y.rippleVisible,J,550,(({theme:e})=>e.transitions.easing.easeInOut),Y.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),Y.child,Y.childLeaving,ee,550,(({theme:e})=>e.transitions.easing.easeInOut),Y.childPulsate,te,(({theme:e})=>e.transitions.easing.easeInOut)),oe=t.forwardRef((function(e,n){const r=(0,O.b)({props:e,name:"MuiTouchRipple"}),{center:o=!1,classes:a={},className:i}=r,l=(0,x.A)(r,H),[u,c]=t.useState([]),s=t.useRef(0),d=t.useRef(null);t.useEffect((()=>{d.current&&(d.current(),d.current=null)}),[u]);const p=t.useRef(!1),f=(0,G.A)(),m=t.useRef(null),h=t.useRef(null),v=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:i}=e;c((e=>[...e,(0,$.jsx)(re,{classes:{ripple:(0,C.A)(a.ripple,Y.ripple),rippleVisible:(0,C.A)(a.rippleVisible,Y.rippleVisible),ripplePulsate:(0,C.A)(a.ripplePulsate,Y.ripplePulsate),child:(0,C.A)(a.child,Y.child),childLeaving:(0,C.A)(a.childLeaving,Y.childLeaving),childPulsate:(0,C.A)(a.childPulsate,Y.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},s.current)])),s.current+=1,d.current=i}),[a]),g=t.useCallback(((e={},t={},n=()=>{})=>{const{pulsate:r=!1,center:a=o||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&p.current)return void(p.current=!1);"touchstart"===(null==e?void 0:e.type)&&(p.current=!0);const l=i?null:h.current,u=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let c,s,d;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(u.width/2),s=Math.round(u.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;c=Math.round(t-u.left),s=Math.round(n-u.top)}if(a)d=Math.sqrt((2*u.width**2+u.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-c),c)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-s),s)+2;d=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===m.current&&(m.current=()=>{v({pulsate:r,rippleX:c,rippleY:s,rippleSize:d,cb:n})},f.start(80,(()=>{m.current&&(m.current(),m.current=null)}))):v({pulsate:r,rippleX:c,rippleY:s,rippleSize:d,cb:n})}),[o,v,f]),y=t.useCallback((()=>{g({},{pulsate:!0})}),[g]),b=t.useCallback(((e,t)=>{if(f.clear(),"touchend"===(null==e?void 0:e.type)&&m.current)return m.current(),m.current=null,void f.start(0,(()=>{b(e,t)}));m.current=null,c((e=>e.length>0?e.slice(1):e)),d.current=t}),[f]);return t.useImperativeHandle(n,(()=>({pulsate:y,start:g,stop:b})),[y,g,b]),(0,$.jsx)(ne,(0,w.A)({className:(0,C.A)(Y.root,a.root,i),ref:h},l,{children:(0,$.jsx)(q,{component:null,exit:!0,children:u})}))}));var ae=o(9776);function ie(e){return(0,ae.Ay)("MuiButtonBase",e)}const le=(0,W.A)("MuiButtonBase",["root","disabled","focusVisible"]),ue=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],ce=(0,B.Ay)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${le.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),se=t.forwardRef((function(e,n){const r=(0,O.b)({props:e,name:"MuiButtonBase"}),{action:o,centerRipple:a=!1,children:i,className:l,component:u="button",disabled:c=!1,disableRipple:s=!1,disableTouchRipple:d=!1,focusRipple:p=!1,LinkComponent:f="a",onBlur:m,onClick:h,onContextMenu:v,onDragLeave:g,onFocus:y,onFocusVisible:b,onKeyDown:A,onKeyUp:S,onMouseDown:k,onMouseLeave:B,onMouseUp:M,onTouchEnd:_,onTouchMove:P,onTouchStart:z,tabIndex:D=0,TouchRippleProps:R,touchRippleRef:L,type:I}=r,F=(0,x.A)(r,ue),q=t.useRef(null),U=t.useRef(null),G=(0,N.A)(U,L),{isFocusVisibleRef:W,onFocus:Y,onBlur:H,ref:V}=(0,j.A)(),[Q,K]=t.useState(!1);c&&Q&&K(!1),t.useImperativeHandle(o,(()=>({focusVisible:()=>{K(!0),q.current.focus()}})),[]);const[Z,X]=t.useState(!1);t.useEffect((()=>{X(!0)}),[]);const J=Z&&!s&&!c;function ee(e,t,n=d){return(0,T.A)((r=>(t&&t(r),!n&&U.current&&U.current[e](r),!0)))}t.useEffect((()=>{Q&&p&&!s&&Z&&U.current.pulsate()}),[s,p,Q,Z]);const te=ee("start",k),ne=ee("stop",v),re=ee("stop",g),ae=ee("stop",M),le=ee("stop",(e=>{Q&&e.preventDefault(),B&&B(e)})),se=ee("start",z),de=ee("stop",_),pe=ee("stop",P),fe=ee("stop",(e=>{H(e),!1===W.current&&K(!1),m&&m(e)}),!1),me=(0,T.A)((e=>{q.current||(q.current=e.currentTarget),Y(e),!0===W.current&&(K(!0),b&&b(e)),y&&y(e)})),he=()=>{const e=q.current;return u&&"button"!==u&&!("A"===e.tagName&&e.href)},ve=t.useRef(!1),ge=(0,T.A)((e=>{p&&!ve.current&&Q&&U.current&&" "===e.key&&(ve.current=!0,U.current.stop(e,(()=>{U.current.start(e)}))),e.target===e.currentTarget&&he()&&" "===e.key&&e.preventDefault(),A&&A(e),e.target===e.currentTarget&&he()&&"Enter"===e.key&&!c&&(e.preventDefault(),h&&h(e))})),ye=(0,T.A)((e=>{p&&" "===e.key&&U.current&&Q&&!e.defaultPrevented&&(ve.current=!1,U.current.stop(e,(()=>{U.current.pulsate(e)}))),S&&S(e),h&&e.target===e.currentTarget&&he()&&" "===e.key&&!e.defaultPrevented&&h(e)}));let be=u;"button"===be&&(F.href||F.to)&&(be=f);const Ae={};"button"===be?(Ae.type=void 0===I?"button":I,Ae.disabled=c):(F.href||F.to||(Ae.role="button"),c&&(Ae["aria-disabled"]=c));const xe=(0,N.A)(n,V,q),we=(0,w.A)({},r,{centerRipple:a,component:u,disabled:c,disableRipple:s,disableTouchRipple:d,focusRipple:p,tabIndex:D,focusVisible:Q}),Ce=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a={root:["root",t&&"disabled",n&&"focusVisible"]},i=(0,E.A)(a,ie,o);return n&&r&&(i.root+=` ${r}`),i})(we);return(0,$.jsxs)(ce,(0,w.A)({as:be,className:(0,C.A)(Ce.root,l),ownerState:we,onBlur:fe,onClick:h,onContextMenu:ne,onFocus:me,onKeyDown:ge,onKeyUp:ye,onMouseDown:te,onMouseLeave:le,onMouseUp:ae,onDragLeave:re,onTouchEnd:de,onTouchMove:pe,onTouchStart:se,ref:xe,tabIndex:c?-1:D,type:I},Ae,F,{children:[i,J?(0,$.jsx)(oe,(0,w.A)({ref:G,center:a},R)):null]}))}));var de=o(3991);function pe(e){return(0,ae.Ay)("MuiButton",e)}const fe=(0,W.A)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","colorPrimary","colorSecondary","colorSuccess","colorError","colorInfo","colorWarning","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","icon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),me=t.createContext({}),he=t.createContext(void 0),ve=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],ge=e=>(0,w.A)({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),ye=(0,B.Ay)(se,{shouldForwardProp:e=>(0,M.A)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${(0,de.A)(n.color)}`],t[`size${(0,de.A)(n.size)}`],t[`${n.variant}Size${(0,de.A)(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})((({theme:e,ownerState:t})=>{var n,r;const o="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],a="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return(0,w.A)({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":(0,w.A)({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,k.X4)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,k.X4)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,k.X4)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:e.vars?e.vars.palette.Button.inheritContainedHoverBg:a,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":(0,w.A)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${fe.focusVisible}`]:(0,w.A)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${fe.disabled}`]:(0,w.A)({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${(0,k.X4)(e.palette[t.color].main,.5)}`},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(n=(r=e.palette).getContrastText)?void 0:n.call(r,e.palette.grey[300]),backgroundColor:e.vars?e.vars.palette.Button.inheritContainedBg:o,boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${fe.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${fe.disabled}`]:{boxShadow:"none"}})),be=(0,B.Ay)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${(0,de.A)(n.size)}`]]}})((({ownerState:e})=>(0,w.A)({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},ge(e)))),Ae=(0,B.Ay)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${(0,de.A)(n.size)}`]]}})((({ownerState:e})=>(0,w.A)({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},ge(e)))),xe=t.forwardRef((function(e,n){const r=t.useContext(me),o=t.useContext(he),a=S(r,e),i=(0,O.b)({props:a,name:"MuiButton"}),{children:l,color:u="primary",component:c="button",className:s,disabled:d=!1,disableElevation:p=!1,disableFocusRipple:f=!1,endIcon:m,focusVisibleClassName:h,fullWidth:v=!1,size:g="medium",startIcon:y,type:b,variant:A="text"}=i,k=(0,x.A)(i,ve),B=(0,w.A)({},i,{color:u,component:c,disabled:d,disableElevation:p,disableFocusRipple:f,fullWidth:v,size:g,type:b,variant:A}),M=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:a,classes:i}=e,l={root:["root",a,`${a}${(0,de.A)(t)}`,`size${(0,de.A)(o)}`,`${a}Size${(0,de.A)(o)}`,`color${(0,de.A)(t)}`,n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["icon","startIcon",`iconSize${(0,de.A)(o)}`],endIcon:["icon","endIcon",`iconSize${(0,de.A)(o)}`]},u=(0,E.A)(l,pe,i);return(0,w.A)({},i,u)})(B),N=y&&(0,$.jsx)(be,{className:M.startIcon,ownerState:B,children:y}),T=m&&(0,$.jsx)(Ae,{className:M.endIcon,ownerState:B,children:m}),j=o||"";return(0,$.jsxs)(ye,(0,w.A)({ownerState:B,className:(0,C.A)(r.className,M.root,s,j),component:c,disabled:d,focusRipple:!f,focusVisibleClassName:(0,C.A)(M.focusVisible,h),ref:n,type:b},k,{classes:M,children:[N,l,T]}))}));var we,Ce,Se=o(961),Ee=o.t(Se,2);function ke(){return ke=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ke.apply(this,arguments)}(Ce=we||(we={})).Pop="POP",Ce.Push="PUSH",Ce.Replace="REPLACE";const Be="popstate";function Me(e,t){if(!1===e||null==e)throw new Error(t)}function Oe(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function Ne(e,t){return{usr:e.state,key:e.key,idx:t}}function Te(e,t,n,r){return void 0===n&&(n=null),ke({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?_e(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function je(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function _e(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var Pe,ze;function De(e,t,n){return void 0===n&&(n="/"),function(e,t,n,r){let o=Ke(("string"==typeof t?_e(t):t).pathname||"/",n);if(null==o)return null;let a=Re(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let i=null;for(let e=0;null==i&&e<a.length;++e){let t=Qe(o);i=He(a[e],t,r)}return i}(e,t,n,!1)}function Re(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(Me(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=et([r,i.relativePath]),u=n.concat(i);e.children&&e.children.length>0&&(Me(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),Re(e.children,t,u,l)),(null!=e.path||e.index)&&t.push({path:l,score:Ye(l,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of Le(e.path))o(e,t,n);else o(e,t)})),t}function Le(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=Le(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}(ze=Pe||(Pe={})).data="data",ze.deferred="deferred",ze.redirect="redirect",ze.error="error",new Set(["lazy","caseSensitive","path","id","index","children"]);const Ie=/^:[\w-]+$/,Fe=3,qe=2,Ue=1,Ge=10,$e=-2,We=e=>"*"===e;function Ye(e,t){let n=e.split("/"),r=n.length;return n.some(We)&&(r+=$e),t&&(r+=qe),n.filter((e=>!We(e))).reduce(((e,t)=>e+(Ie.test(t)?Fe:""===t?Ue:Ge)),r)}function He(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,o={},a="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],u=e===r.length-1,c="/"===a?t:t.slice(a.length)||"/",s=Ve({path:l.relativePath,caseSensitive:l.caseSensitive,end:u},c),d=l.route;if(!s&&u&&n&&!r[r.length-1].route.index&&(s=Ve({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},c)),!s)return null;Object.assign(o,s.params),i.push({params:o,pathname:et([a,s.pathname]),pathnameBase:tt(et([a,s.pathnameBase])),route:d}),"/"!==s.pathnameBase&&(a=et([a,s.pathnameBase]))}return i}function Ve(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),Oe("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:o}=t;if("*"===r){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const u=l[n];return e[r]=o&&!u?void 0:(u||"").replace(/%2F/g,"/"),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function Qe(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return Oe(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function Ke(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function Ze(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function Xe(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}function Je(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=_e(e):(o=ke({},e),Me(!o.pathname||!o.pathname.includes("?"),Ze("?","pathname","search",o)),Me(!o.pathname||!o.pathname.includes("#"),Ze("#","pathname","hash",o)),Me(!o.search||!o.search.includes("#"),Ze("#","search","hash",o)));let a,i=""===e||""===o.pathname,l=i?"/":o.pathname;if(null==l)a=n;else{let e=t.length-1;if(!r&&l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let u=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?_e(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:nt(r),hash:rt(o)}}(o,a),c=l&&"/"!==l&&l.endsWith("/"),s=(i||"."===l)&&n.endsWith("/");return u.pathname.endsWith("/")||!c&&!s||(u.pathname+="/"),u}const et=e=>e.join("/").replace(/\/\/+/g,"/"),tt=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),nt=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",rt=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const ot=["post","put","patch","delete"],at=(new Set(ot),["get",...ot]);function it(){return it=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},it.apply(this,arguments)}new Set(at),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const lt=t.createContext(null),ut=t.createContext(null),ct=t.createContext(null),st=t.createContext(null),dt=t.createContext({outlet:null,matches:[],isDataRoute:!1}),pt=t.createContext(null);function ft(){return null!=t.useContext(st)}function mt(){return ft()||Me(!1),t.useContext(st).location}function ht(e){t.useContext(ct).static||t.useLayoutEffect(e)}function vt(){let{isDataRoute:e}=t.useContext(dt);return e?function(){let{router:e}=function(){let e=t.useContext(lt);return e||Me(!1),e}(St.UseNavigateStable),n=kt(Et.UseNavigateStable),r=t.useRef(!1);return ht((()=>{r.current=!0})),t.useCallback((function(t,o){void 0===o&&(o={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,it({fromRouteId:n},o)))}),[e,n])}():function(){ft()||Me(!1);let e=t.useContext(lt),{basename:n,future:r,navigator:o}=t.useContext(ct),{matches:a}=t.useContext(dt),{pathname:i}=mt(),l=JSON.stringify(Xe(a,r.v7_relativeSplatPath)),u=t.useRef(!1);return ht((()=>{u.current=!0})),t.useCallback((function(t,r){if(void 0===r&&(r={}),!u.current)return;if("number"==typeof t)return void o.go(t);let a=Je(t,JSON.parse(l),i,"path"===r.relative);null==e&&"/"!==n&&(a.pathname="/"===a.pathname?n:et([n,a.pathname])),(r.replace?o.replace:o.push)(a,r.state,r)}),[n,o,l,i,e])}()}function gt(){let{matches:e}=t.useContext(dt),n=e[e.length-1];return n?n.params:{}}function yt(e,n){let{relative:r}=void 0===n?{}:n,{future:o}=t.useContext(ct),{matches:a}=t.useContext(dt),{pathname:i}=mt(),l=JSON.stringify(Xe(a,o.v7_relativeSplatPath));return t.useMemo((()=>Je(e,JSON.parse(l),i,"path"===r)),[e,l,i,r])}function bt(e,n,r,o){ft()||Me(!1);let{navigator:a}=t.useContext(ct),{matches:i}=t.useContext(dt),l=i[i.length-1],u=l?l.params:{},c=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let s,d=mt();if(n){var p;let e="string"==typeof n?_e(n):n;"/"===c||(null==(p=e.pathname)?void 0:p.startsWith(c))||Me(!1),s=e}else s=d;let f=s.pathname||"/",m=f;if("/"!==c){let e=c.replace(/^\//,"").split("/");m="/"+f.replace(/^\//,"").split("/").slice(e.length).join("/")}let h=De(e,{pathname:m}),v=function(e,n,r,o){var a;if(void 0===n&&(n=[]),void 0===r&&(r=null),void 0===o&&(o=null),null==e){var i;if(!r)return null;if(r.errors)e=r.matches;else{if(!(null!=(i=o)&&i.v7_partialHydration&&0===n.length&&!r.initialized&&r.matches.length>0))return null;e=r.matches}}let l=e,u=null==(a=r)?void 0:a.errors;if(null!=u){let e=l.findIndex((e=>e.route.id&&void 0!==(null==u?void 0:u[e.route.id])));e>=0||Me(!1),l=l.slice(0,Math.min(l.length,e+1))}let c=!1,s=-1;if(r&&o&&o.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(s=e),t.route.id){let{loaderData:e,errors:n}=r,o=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||o){c=!0,l=s>=0?l.slice(0,s+1):[l[0]];break}}}return l.reduceRight(((e,o,a)=>{let i,d=!1,p=null,f=null;var m;r&&(i=u&&o.route.id?u[o.route.id]:void 0,p=o.route.errorElement||xt,c&&(s<0&&0===a?(Bt[m="route-fallback"]||(Bt[m]=!0),d=!0,f=null):s===a&&(d=!0,f=o.route.hydrateFallbackElement||null)));let h=n.concat(l.slice(0,a+1)),v=()=>{let n;return n=i?p:d?f:o.route.Component?t.createElement(o.route.Component,null):o.route.element?o.route.element:e,t.createElement(Ct,{match:o,routeContext:{outlet:e,matches:h,isDataRoute:null!=r},children:n})};return r&&(o.route.ErrorBoundary||o.route.errorElement||0===a)?t.createElement(wt,{location:r.location,revalidation:r.revalidation,component:p,error:i,children:v(),routeContext:{outlet:null,matches:h,isDataRoute:!0}}):v()}),null)}(h&&h.map((e=>Object.assign({},e,{params:Object.assign({},u,e.params),pathname:et([c,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:et([c,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,r,o);return n&&v?t.createElement(st.Provider,{value:{location:it({pathname:"/",search:"",hash:"",state:null,key:"default"},s),navigationType:we.Pop}},v):v}function At(){let e=function(){var e;let n=t.useContext(pt),r=function(){let e=t.useContext(ut);return e||Me(!1),e}(Et.UseRouteError),o=kt(Et.UseRouteError);return void 0!==n?n:null==(e=r.errors)?void 0:e[o]}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,null)}const xt=t.createElement(At,null);class wt extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement(dt.Provider,{value:this.props.routeContext},t.createElement(pt.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Ct(e){let{routeContext:n,match:r,children:o}=e,a=t.useContext(lt);return a&&a.static&&a.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(dt.Provider,{value:n},o)}var St=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(St||{}),Et=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Et||{});function kt(e){let n=function(){let e=t.useContext(dt);return e||Me(!1),e}(),r=n.matches[n.matches.length-1];return r.route.id||Me(!1),r.route.id}const Bt={},Mt={},Ot=(e,t,n)=>{var r;Mt[r="⚠️ React Router Future Flag Warning: "+t+". You can use the `"+e+"` future flag to opt-in early. For more information, see "+n+"."]||(Mt[r]=!0,console.warn(r))};function Nt(e){Me(!1)}function Tt(e){let{basename:n="/",children:r=null,location:o,navigationType:a=we.Pop,navigator:i,static:l=!1,future:u}=e;ft()&&Me(!1);let c=n.replace(/^\/*/,"/"),s=t.useMemo((()=>({basename:c,navigator:i,static:l,future:it({v7_relativeSplatPath:!1},u)})),[c,u,i,l]);"string"==typeof o&&(o=_e(o));let{pathname:d="/",search:p="",hash:f="",state:m=null,key:h="default"}=o,v=t.useMemo((()=>{let e=Ke(d,c);return null==e?null:{location:{pathname:e,search:p,hash:f,state:m,key:h},navigationType:a}}),[c,d,p,f,m,h,a]);return null==v?null:t.createElement(ct.Provider,{value:s},t.createElement(st.Provider,{children:r,value:v}))}function jt(e){let{children:t,location:n}=e;return bt(_t(t),n)}function _t(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,o)=>{if(!t.isValidElement(e))return;let a=[...n,o];if(e.type===t.Fragment)return void r.push.apply(r,_t(e.props.children,a));e.type!==Nt&&Me(!1),e.props.index&&e.props.children&&Me(!1);let i={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=_t(e.props.children,a)),r.push(i)})),r}function Pt(){return Pt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Pt.apply(this,arguments)}function zt(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Dt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"],Rt=["aria-current","caseSensitive","className","end","style","to","viewTransition","children"];try{window.__reactRouterVersion="6"}catch(e){}const Lt=t.createContext({isTransitioning:!1});new Map;const It=n.startTransition;function Ft(e){let{basename:n,children:r,future:o,window:a}=e,i=t.useRef();var l;null==i.current&&(i.current=(void 0===(l={window:a,v5Compat:!0})&&(l={}),function(e,t,n,r){void 0===r&&(r={});let{window:o=document.defaultView,v5Compat:a=!1}=r,i=o.history,l=we.Pop,u=null,c=s();function s(){return(i.state||{idx:null}).idx}function d(){l=we.Pop;let e=s(),t=null==e?null:e-c;c=e,u&&u({action:l,location:f.location,delta:t})}function p(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:je(e);return n=n.replace(/ $/,"%20"),Me(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==c&&(c=0,i.replaceState(ke({},i.state,{idx:c}),""));let f={get action(){return l},get location(){return e(o,i)},listen(e){if(u)throw new Error("A history only accepts one active listener");return o.addEventListener(Be,d),u=e,()=>{o.removeEventListener(Be,d),u=null}},createHref:e=>t(o,e),createURL:p,encodeLocation(e){let t=p(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l=we.Push;let r=Te(f.location,e,t);n&&n(r,e),c=s()+1;let d=Ne(r,c),p=f.createHref(r);try{i.pushState(d,"",p)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(p)}a&&u&&u({action:l,location:f.location,delta:1})},replace:function(e,t){l=we.Replace;let r=Te(f.location,e,t);n&&n(r,e),c=s();let o=Ne(r,c),d=f.createHref(r);i.replaceState(o,"",d),a&&u&&u({action:l,location:f.location,delta:0})},go:e=>i.go(e)};return f}((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=_e(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),Te("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:je(t))}),(function(e,t){Oe("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),l)));let u=i.current,[c,s]=t.useState({action:u.action,location:u.location}),{v7_startTransition:d}=o||{},p=t.useCallback((e=>{d&&It?It((()=>s(e))):s(e)}),[s,d]);return t.useLayoutEffect((()=>u.listen(p)),[u,p]),t.useEffect((()=>{return null!=(e=o)&&e.v7_startTransition||Ot("v7_startTransition","React Router will begin wrapping state updates in `React.startTransition` in v7","https://reactrouter.com/v6/upgrading/future#v7_starttransition"),null!=e&&e.v7_relativeSplatPath||t&&t.v7_relativeSplatPath||Ot("v7_relativeSplatPath","Relative route resolution within Splat routes is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath"),void(t&&(t.v7_fetcherPersist||Ot("v7_fetcherPersist","The persistence behavior of fetchers is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist"),t.v7_normalizeFormMethod||Ot("v7_normalizeFormMethod","Casing of `formMethod` fields is being normalized to uppercase in v7","https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod"),t.v7_partialHydration||Ot("v7_partialHydration","`RouterProvider` hydration behavior is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_partialhydration"),t.v7_skipActionErrorRevalidation||Ot("v7_skipActionErrorRevalidation","The revalidation behavior after 4xx/5xx `action` responses is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation")));var e,t}),[o]),t.createElement(Tt,{basename:n,children:r,location:c.location,navigationType:c.action,navigator:u,future:o})}Ee.flushSync,n.useId;const qt="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Ut=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Gt=t.forwardRef((function(e,n){let r,{onClick:o,relative:a,reloadDocument:i,replace:l,state:u,target:c,to:s,preventScrollReset:d,viewTransition:p}=e,f=zt(e,Dt),{basename:m}=t.useContext(ct),h=!1;if("string"==typeof s&&Ut.test(s)&&(r=s,qt))try{let e=new URL(window.location.href),t=s.startsWith("//")?new URL(e.protocol+s):new URL(s),n=Ke(t.pathname,m);t.origin===e.origin&&null!=n?s=n+t.search+t.hash:h=!0}catch(e){}let v=function(e,n){let{relative:r}=void 0===n?{}:n;ft()||Me(!1);let{basename:o,navigator:a}=t.useContext(ct),{hash:i,pathname:l,search:u}=yt(e,{relative:r}),c=l;return"/"!==o&&(c="/"===l?o:et([o,l])),a.createHref({pathname:c,search:u,hash:i})}(s,{relative:a}),g=function(e,n){let{target:r,replace:o,state:a,preventScrollReset:i,relative:l,viewTransition:u}=void 0===n?{}:n,c=vt(),s=mt(),d=yt(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==o?o:je(s)===je(d);c(e,{replace:n,state:a,preventScrollReset:i,relative:l,viewTransition:u})}}),[s,c,d,o,a,r,e,i,l,u])}(s,{replace:l,state:u,target:c,preventScrollReset:d,relative:a,viewTransition:p});return t.createElement("a",Pt({},f,{href:r||v,onClick:h||i?o:function(e){o&&o(e),e.defaultPrevented||g(e)},ref:n,target:c}))})),$t=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:o=!1,className:a="",end:i=!1,style:l,to:u,viewTransition:c,children:s}=e,d=zt(e,Rt),p=yt(u,{relative:d.relative}),f=mt(),m=t.useContext(ut),{navigator:h,basename:v}=t.useContext(ct),g=null!=m&&function(e,n){void 0===n&&(n={});let r=t.useContext(Lt);null==r&&Me(!1);let{basename:o}=function(){let e=t.useContext(lt);return e||Me(!1),e}(Wt.useViewTransitionState),a=yt(e,{relative:n.relative});if(!r.isTransitioning)return!1;let i=Ke(r.currentLocation.pathname,o)||r.currentLocation.pathname,l=Ke(r.nextLocation.pathname,o)||r.nextLocation.pathname;return null!=Ve(a.pathname,l)||null!=Ve(a.pathname,i)}(p)&&!0===c,y=h.encodeLocation?h.encodeLocation(p).pathname:p.pathname,b=f.pathname,A=m&&m.navigation&&m.navigation.location?m.navigation.location.pathname:null;o||(b=b.toLowerCase(),A=A?A.toLowerCase():null,y=y.toLowerCase()),A&&v&&(A=Ke(A,v)||A);const x="/"!==y&&y.endsWith("/")?y.length-1:y.length;let w,C=b===y||!i&&b.startsWith(y)&&"/"===b.charAt(x),S=null!=A&&(A===y||!i&&A.startsWith(y)&&"/"===A.charAt(y.length)),E={isActive:C,isPending:S,isTransitioning:g},k=C?r:void 0;w="function"==typeof a?a(E):[a,C?"active":null,S?"pending":null,g?"transitioning":null].filter(Boolean).join(" ");let B="function"==typeof l?l(E):l;return t.createElement(Gt,Pt({},d,{"aria-current":k,className:w,ref:n,style:B,to:u,viewTransition:c}),"function"==typeof s?s(E):s)}));var Wt,Yt,Ht,Vt;function Qt(e,t){return function(){return e.apply(t,arguments)}}(Yt=Wt||(Wt={})).UseScrollRestoration="useScrollRestoration",Yt.UseSubmit="useSubmit",Yt.UseSubmitFetcher="useSubmitFetcher",Yt.UseFetcher="useFetcher",Yt.useViewTransitionState="useViewTransitionState",(Vt=Ht||(Ht={})).UseFetcher="useFetcher",Vt.UseFetchers="useFetchers",Vt.UseScrollRestoration="useScrollRestoration";const{toString:Kt}=Object.prototype,{getPrototypeOf:Zt}=Object,{iterator:Xt,toStringTag:Jt}=Symbol,en=(tn=Object.create(null),e=>{const t=Kt.call(e);return tn[t]||(tn[t]=t.slice(8,-1).toLowerCase())});var tn;const nn=e=>(e=e.toLowerCase(),t=>en(t)===e),rn=e=>t=>typeof t===e,{isArray:on}=Array,an=rn("undefined"),ln=nn("ArrayBuffer"),un=rn("string"),cn=rn("function"),sn=rn("number"),dn=e=>null!==e&&"object"==typeof e,pn=e=>{if("object"!==en(e))return!1;const t=Zt(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Jt in e||Xt in e)},fn=nn("Date"),mn=nn("File"),hn=nn("Blob"),vn=nn("FileList"),gn=nn("URLSearchParams"),[yn,bn,An,xn]=["ReadableStream","Request","Response","Headers"].map(nn);function wn(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),on(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(r=0;r<a;r++)i=o[r],t.call(null,e[i],i,e)}}function Cn(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const Sn="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,En=e=>!an(e)&&e!==Sn,kn=(Bn="undefined"!=typeof Uint8Array&&Zt(Uint8Array),e=>Bn&&e instanceof Bn);var Bn;const Mn=nn("HTMLFormElement"),On=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Nn=nn("RegExp"),Tn=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};wn(n,((n,o)=>{let a;!1!==(a=t(n,o,e))&&(r[o]=a||n)})),Object.defineProperties(e,r)},jn=nn("AsyncFunction"),_n=(Pn="function"==typeof setImmediate,zn=cn(Sn.postMessage),Pn?setImmediate:zn?(Dn=`axios@${Math.random()}`,Rn=[],Sn.addEventListener("message",(({source:e,data:t})=>{e===Sn&&t===Dn&&Rn.length&&Rn.shift()()}),!1),e=>{Rn.push(e),Sn.postMessage(Dn,"*")}):e=>setTimeout(e));var Pn,zn,Dn,Rn;const Ln="undefined"!=typeof queueMicrotask?queueMicrotask.bind(Sn):"undefined"!=typeof process&&process.nextTick||_n,In={isArray:on,isArrayBuffer:ln,isBuffer:function(e){return null!==e&&!an(e)&&null!==e.constructor&&!an(e.constructor)&&cn(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||cn(e.append)&&("formdata"===(t=en(e))||"object"===t&&cn(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&ln(e.buffer),t},isString:un,isNumber:sn,isBoolean:e=>!0===e||!1===e,isObject:dn,isPlainObject:pn,isReadableStream:yn,isRequest:bn,isResponse:An,isHeaders:xn,isUndefined:an,isDate:fn,isFile:mn,isBlob:hn,isRegExp:Nn,isFunction:cn,isStream:e=>dn(e)&&cn(e.pipe),isURLSearchParams:gn,isTypedArray:kn,isFileList:vn,forEach:wn,merge:function e(){const{caseless:t}=En(this)&&this||{},n={},r=(r,o)=>{const a=t&&Cn(n,o)||o;pn(n[a])&&pn(r)?n[a]=e(n[a],r):pn(r)?n[a]=e({},r):on(r)?n[a]=r.slice():n[a]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&wn(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(wn(t,((t,r)=>{n&&cn(t)?e[r]=Qt(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,a,i;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),a=o.length;a-- >0;)i=o[a],r&&!r(i,e,t)||l[i]||(t[i]=e[i],l[i]=!0);e=!1!==n&&Zt(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:en,kindOfTest:nn,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(on(e))return e;let t=e.length;if(!sn(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Xt]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Mn,hasOwnProperty:On,hasOwnProp:On,reduceDescriptors:Tn,freezeMethods:e=>{Tn(e,((t,n)=>{if(cn(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];cn(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return on(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:Cn,global:Sn,isContextDefined:En,isSpecCompliantForm:function(e){return!!(e&&cn(e.append)&&"FormData"===e[Jt]&&e[Xt])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(dn(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=on(e)?[]:{};return wn(e,((e,t)=>{const a=n(e,r+1);!an(a)&&(o[t]=a)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:jn,isThenable:e=>e&&(dn(e)||cn(e))&&cn(e.then)&&cn(e.catch),setImmediate:_n,asap:Ln,isIterable:e=>null!=e&&cn(e[Xt])};function Fn(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o,this.status=o.status?o.status:null)}In.inherits(Fn,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:In.toJSONObject(this.config),code:this.code,status:this.status}}});const qn=Fn.prototype,Un={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{Un[e]={value:e}})),Object.defineProperties(Fn,Un),Object.defineProperty(qn,"isAxiosError",{value:!0}),Fn.from=(e,t,n,r,o,a)=>{const i=Object.create(qn);return In.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),Fn.call(i,e.message,t,n,r,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const Gn=Fn;function $n(e){return In.isPlainObject(e)||In.isArray(e)}function Wn(e){return In.endsWith(e,"[]")?e.slice(0,-2):e}function Yn(e,t,n){return e?e.concat(t).map((function(e,t){return e=Wn(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Hn=In.toFlatObject(In,{},null,(function(e){return/^is[A-Z]/.test(e)})),Vn=function(e,t,n){if(!In.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=In.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!In.isUndefined(t[e])}))).metaTokens,o=n.visitor||c,a=n.dots,i=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&In.isSpecCompliantForm(t);if(!In.isFunction(o))throw new TypeError("visitor must be a function");function u(e){if(null===e)return"";if(In.isDate(e))return e.toISOString();if(In.isBoolean(e))return e.toString();if(!l&&In.isBlob(e))throw new Gn("Blob is not supported. Use a Buffer instead.");return In.isArrayBuffer(e)||In.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(In.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(In.isArray(e)&&function(e){return In.isArray(e)&&!e.some($n)}(e)||(In.isFileList(e)||In.endsWith(n,"[]"))&&(l=In.toArray(e)))return n=Wn(n),l.forEach((function(e,r){!In.isUndefined(e)&&null!==e&&t.append(!0===i?Yn([n],r,a):null===i?n:n+"[]",u(e))})),!1;return!!$n(e)||(t.append(Yn(o,n,a),u(e)),!1)}const s=[],d=Object.assign(Hn,{defaultVisitor:c,convertValue:u,isVisitable:$n});if(!In.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!In.isUndefined(n)){if(-1!==s.indexOf(n))throw Error("Circular reference detected in "+r.join("."));s.push(n),In.forEach(n,(function(n,a){!0===(!(In.isUndefined(n)||null===n)&&o.call(t,n,In.isString(a)?a.trim():a,r,d))&&e(n,r?r.concat(a):[a])})),s.pop()}}(e),t};function Qn(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Kn(e,t){this._pairs=[],e&&Vn(e,this,t)}const Zn=Kn.prototype;Zn.append=function(e,t){this._pairs.push([e,t])},Zn.toString=function(e){const t=e?function(t){return e.call(this,t,Qn)}:Qn;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Xn=Kn;function Jn(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function er(e,t,n){if(!t)return e;const r=n&&n.encode||Jn;In.isFunction(n)&&(n={serialize:n});const o=n&&n.serialize;let a;if(a=o?o(t,n):In.isURLSearchParams(t)?t.toString():new Xn(t,n).toString(r),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}const tr=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){In.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},nr={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},rr={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Xn,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},or="undefined"!=typeof window&&"undefined"!=typeof document,ar="object"==typeof navigator&&navigator||void 0,ir=or&&(!ar||["ReactNative","NativeScript","NS"].indexOf(ar.product)<0),lr="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,ur=or&&window.location.href||"http://localhost",cr={...e,...rr},sr=function(e){function t(e,n,r,o){let a=e[o++];if("__proto__"===a)return!0;const i=Number.isFinite(+a),l=o>=e.length;return a=!a&&In.isArray(r)?r.length:a,l?(In.hasOwnProp(r,a)?r[a]=[r[a],n]:r[a]=n,!i):(r[a]&&In.isObject(r[a])||(r[a]=[]),t(e,n,r[a],o)&&In.isArray(r[a])&&(r[a]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let a;for(r=0;r<o;r++)a=n[r],t[a]=e[a];return t}(r[a])),!i)}if(In.isFormData(e)&&In.isFunction(e.entries)){const n={};return In.forEachEntry(e,((e,r)=>{t(function(e){return In.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},dr={transitional:nr,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=In.isObject(e);if(o&&In.isHTMLForm(e)&&(e=new FormData(e)),In.isFormData(e))return r?JSON.stringify(sr(e)):e;if(In.isArrayBuffer(e)||In.isBuffer(e)||In.isStream(e)||In.isFile(e)||In.isBlob(e)||In.isReadableStream(e))return e;if(In.isArrayBufferView(e))return e.buffer;if(In.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Vn(e,new cr.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return cr.isNode&&In.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=In.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Vn(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e){if(In.isString(e))try{return(0,JSON.parse)(e),In.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||dr.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(In.isResponse(e)||In.isReadableStream(e))return e;if(e&&In.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw Gn.from(e,Gn.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:cr.classes.FormData,Blob:cr.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};In.forEach(["delete","get","head","post","put","patch"],(e=>{dr.headers[e]={}}));const pr=dr,fr=In.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),mr=Symbol("internals");function hr(e){return e&&String(e).trim().toLowerCase()}function vr(e){return!1===e||null==e?e:In.isArray(e)?e.map(vr):String(e)}function gr(e,t,n,r,o){return In.isFunction(r)?r.call(this,t,n):(o&&(t=n),In.isString(t)?In.isString(r)?-1!==t.indexOf(r):In.isRegExp(r)?r.test(t):void 0:void 0)}class yr{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=hr(t);if(!o)throw new Error("header name must be a non-empty string");const a=In.findKey(r,o);(!a||void 0===r[a]||!0===n||void 0===n&&!1!==r[a])&&(r[a||t]=vr(e))}const a=(e,t)=>In.forEach(e,((e,n)=>o(e,n,t)));if(In.isPlainObject(e)||e instanceof this.constructor)a(e,t);else if(In.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))a((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&fr[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t);else if(In.isObject(e)&&In.isIterable(e)){let n,r,o={};for(const t of e){if(!In.isArray(t))throw TypeError("Object iterator must return a key-value pair");o[r=t[0]]=(n=o[r])?In.isArray(n)?[...n,t[1]]:[n,t[1]]:t[1]}a(o,t)}else null!=e&&o(t,e,n);return this}get(e,t){if(e=hr(e)){const n=In.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(In.isFunction(t))return t.call(this,e,n);if(In.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=hr(e)){const n=In.findKey(this,e);return!(!n||void 0===this[n]||t&&!gr(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=hr(e)){const o=In.findKey(n,e);!o||t&&!gr(0,n[o],o,t)||(delete n[o],r=!0)}}return In.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!gr(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return In.forEach(this,((r,o)=>{const a=In.findKey(n,o);if(a)return t[a]=vr(r),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();i!==o&&delete t[o],t[i]=vr(r),n[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return In.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&In.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}getSetCookie(){return this.get("set-cookie")||[]}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[mr]=this[mr]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=hr(e);t[r]||(function(e,t){const n=In.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return In.isArray(e)?e.forEach(r):r(e),this}}yr.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),In.reduceDescriptors(yr.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),In.freezeMethods(yr);const br=yr;function Ar(e,t){const n=this||pr,r=t||n,o=br.from(r.headers);let a=r.data;return In.forEach(e,(function(e){a=e.call(n,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function xr(e){return!(!e||!e.__CANCEL__)}function wr(e,t,n){Gn.call(this,null==e?"canceled":e,Gn.ERR_CANCELED,t,n),this.name="CanceledError"}In.inherits(wr,Gn,{__CANCEL__:!0});const Cr=wr;function Sr(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Gn("Request failed with status code "+n.status,[Gn.ERR_BAD_REQUEST,Gn.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}const Er=(e,t,n=3)=>{let r=0;const o=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const u=Date.now(),c=r[i];o||(o=u),n[a]=l,r[a]=u;let s=i,d=0;for(;s!==a;)d+=n[s++],s%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),u-o<t)return;const p=c&&u-c;return p?Math.round(1e3*d/p):void 0}}(50,250);return function(e,t){let n,r,o=0,a=1e3/t;const i=(t,a=Date.now())=>{o=a,n=null,r&&(clearTimeout(r),r=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),l=t-o;l>=a?i(e,t):(n=e,r||(r=setTimeout((()=>{r=null,i(n)}),a-l)))},()=>n&&i(n)]}((n=>{const a=n.loaded,i=n.lengthComputable?n.total:void 0,l=a-r,u=o(l);r=a,e({loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:u||void 0,estimated:u&&i&&a<=i?(i-a)/u:void 0,event:n,lengthComputable:null!=i,[t?"download":"upload"]:!0})}),n)},kr=(e,t)=>{const n=null!=e;return[r=>t[0]({lengthComputable:n,total:e,loaded:r}),t[1]]},Br=e=>(...t)=>In.asap((()=>e(...t))),Mr=cr.hasStandardBrowserEnv?(Or=new URL(cr.origin),Nr=cr.navigator&&/(msie|trident)/i.test(cr.navigator.userAgent),e=>(e=new URL(e,cr.origin),Or.protocol===e.protocol&&Or.host===e.host&&(Nr||Or.port===e.port))):()=>!0;var Or,Nr;const Tr=cr.hasStandardBrowserEnv?{write(e,t,n,r,o,a){const i=[e+"="+encodeURIComponent(t)];In.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),In.isString(r)&&i.push("path="+r),In.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function jr(e,t,n){let r=!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t);return e&&(r||0==n)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const _r=e=>e instanceof br?{...e}:e;function Pr(e,t){t=t||{};const n={};function r(e,t,n,r){return In.isPlainObject(e)&&In.isPlainObject(t)?In.merge.call({caseless:r},e,t):In.isPlainObject(t)?In.merge({},t):In.isArray(t)?t.slice():t}function o(e,t,n,o){return In.isUndefined(t)?In.isUndefined(e)?void 0:r(void 0,e,0,o):r(e,t,0,o)}function a(e,t){if(!In.isUndefined(t))return r(void 0,t)}function i(e,t){return In.isUndefined(t)?In.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,a){return a in t?r(n,o):a in e?r(void 0,n):void 0}const u={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t,n)=>o(_r(e),_r(t),0,!0)};return In.forEach(Object.keys(Object.assign({},e,t)),(function(r){const a=u[r]||o,i=a(e[r],t[r],r);In.isUndefined(i)&&a!==l||(n[r]=i)})),n}const zr=e=>{const t=Pr({},e);let n,{data:r,withXSRFToken:o,xsrfHeaderName:a,xsrfCookieName:i,headers:l,auth:u}=t;if(t.headers=l=br.from(l),t.url=er(jr(t.baseURL,t.url,t.allowAbsoluteUrls),e.params,e.paramsSerializer),u&&l.set("Authorization","Basic "+btoa((u.username||"")+":"+(u.password?unescape(encodeURIComponent(u.password)):""))),In.isFormData(r))if(cr.hasStandardBrowserEnv||cr.hasStandardBrowserWebWorkerEnv)l.setContentType(void 0);else if(!1!==(n=l.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];l.setContentType([e||"multipart/form-data",...t].join("; "))}if(cr.hasStandardBrowserEnv&&(o&&In.isFunction(o)&&(o=o(t)),o||!1!==o&&Mr(t.url))){const e=a&&i&&Tr.read(i);e&&l.set(a,e)}return t},Dr="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const r=zr(e);let o=r.data;const a=br.from(r.headers).normalize();let i,l,u,c,s,{responseType:d,onUploadProgress:p,onDownloadProgress:f}=r;function m(){c&&c(),s&&s(),r.cancelToken&&r.cancelToken.unsubscribe(i),r.signal&&r.signal.removeEventListener("abort",i)}let h=new XMLHttpRequest;function v(){if(!h)return;const r=br.from("getAllResponseHeaders"in h&&h.getAllResponseHeaders());Sr((function(e){t(e),m()}),(function(e){n(e),m()}),{data:d&&"text"!==d&&"json"!==d?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h}),h=null}h.open(r.method.toUpperCase(),r.url,!0),h.timeout=r.timeout,"onloadend"in h?h.onloadend=v:h.onreadystatechange=function(){h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))&&setTimeout(v)},h.onabort=function(){h&&(n(new Gn("Request aborted",Gn.ECONNABORTED,e,h)),h=null)},h.onerror=function(){n(new Gn("Network Error",Gn.ERR_NETWORK,e,h)),h=null},h.ontimeout=function(){let t=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const o=r.transitional||nr;r.timeoutErrorMessage&&(t=r.timeoutErrorMessage),n(new Gn(t,o.clarifyTimeoutError?Gn.ETIMEDOUT:Gn.ECONNABORTED,e,h)),h=null},void 0===o&&a.setContentType(null),"setRequestHeader"in h&&In.forEach(a.toJSON(),(function(e,t){h.setRequestHeader(t,e)})),In.isUndefined(r.withCredentials)||(h.withCredentials=!!r.withCredentials),d&&"json"!==d&&(h.responseType=r.responseType),f&&([u,s]=Er(f,!0),h.addEventListener("progress",u)),p&&h.upload&&([l,c]=Er(p),h.upload.addEventListener("progress",l),h.upload.addEventListener("loadend",c)),(r.cancelToken||r.signal)&&(i=t=>{h&&(n(!t||t.type?new Cr(null,e,h):t),h.abort(),h=null)},r.cancelToken&&r.cancelToken.subscribe(i),r.signal&&(r.signal.aborted?i():r.signal.addEventListener("abort",i)));const g=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);g&&-1===cr.protocols.indexOf(g)?n(new Gn("Unsupported protocol "+g+":",Gn.ERR_BAD_REQUEST,e)):h.send(o||null)}))},Rr=(e,t)=>{const{length:n}=e=e?e.filter(Boolean):[];if(t||n){let n,r=new AbortController;const o=function(e){if(!n){n=!0,i();const t=e instanceof Error?e:this.reason;r.abort(t instanceof Gn?t:new Cr(t instanceof Error?t.message:t))}};let a=t&&setTimeout((()=>{a=null,o(new Gn(`timeout ${t} of ms exceeded`,Gn.ETIMEDOUT))}),t);const i=()=>{e&&(a&&clearTimeout(a),a=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(o):e.removeEventListener("abort",o)})),e=null)};e.forEach((e=>e.addEventListener("abort",o)));const{signal:l}=r;return l.unsubscribe=()=>In.asap(i),l}},Lr=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,o=0;for(;o<n;)r=o+t,yield e.slice(o,r),o=r},Ir=(e,t,n,r)=>{const o=async function*(e,t){for await(const n of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)break;yield n}}finally{await t.cancel()}}(e))yield*Lr(n,t)}(e,t);let a,i=0,l=e=>{a||(a=!0,r&&r(e))};return new ReadableStream({async pull(e){try{const{done:t,value:r}=await o.next();if(t)return l(),void e.close();let a=r.byteLength;if(n){let e=i+=a;n(e)}e.enqueue(new Uint8Array(r))}catch(e){throw l(e),e}},cancel:e=>(l(e),o.return())},{highWaterMark:2})},Fr="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,qr=Fr&&"function"==typeof ReadableStream,Ur=Fr&&("function"==typeof TextEncoder?(Gr=new TextEncoder,e=>Gr.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Gr;const $r=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},Wr=qr&&$r((()=>{let e=!1;const t=new Request(cr.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),Yr=qr&&$r((()=>In.isReadableStream(new Response("").body))),Hr={stream:Yr&&(e=>e.body)};var Vr;Fr&&(Vr=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!Hr[e]&&(Hr[e]=In.isFunction(Vr[e])?t=>t[e]():(t,n)=>{throw new Gn(`Response type '${e}' is not supported`,Gn.ERR_NOT_SUPPORT,n)})})));const Qr={http:null,xhr:Dr,fetch:Fr&&(async e=>{let{url:t,method:n,data:r,signal:o,cancelToken:a,timeout:i,onDownloadProgress:l,onUploadProgress:u,responseType:c,headers:s,withCredentials:d="same-origin",fetchOptions:p}=zr(e);c=c?(c+"").toLowerCase():"text";let f,m=Rr([o,a&&a.toAbortSignal()],i);const h=m&&m.unsubscribe&&(()=>{m.unsubscribe()});let v;try{if(u&&Wr&&"get"!==n&&"head"!==n&&0!==(v=await(async(e,t)=>{const n=In.toFiniteNumber(e.getContentLength());return null==n?(async e=>{if(null==e)return 0;if(In.isBlob(e))return e.size;if(In.isSpecCompliantForm(e)){const t=new Request(cr.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return In.isArrayBufferView(e)||In.isArrayBuffer(e)?e.byteLength:(In.isURLSearchParams(e)&&(e+=""),In.isString(e)?(await Ur(e)).byteLength:void 0)})(t):n})(s,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});if(In.isFormData(r)&&(e=n.headers.get("content-type"))&&s.setContentType(e),n.body){const[e,t]=kr(v,Er(Br(u)));r=Ir(n.body,65536,e,t)}}In.isString(d)||(d=d?"include":"omit");const o="credentials"in Request.prototype;f=new Request(t,{...p,signal:m,method:n.toUpperCase(),headers:s.normalize().toJSON(),body:r,duplex:"half",credentials:o?d:void 0});let a=await fetch(f,p);const i=Yr&&("stream"===c||"response"===c);if(Yr&&(l||i&&h)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=a[t]}));const t=In.toFiniteNumber(a.headers.get("content-length")),[n,r]=l&&kr(t,Er(Br(l),!0))||[];a=new Response(Ir(a.body,65536,n,(()=>{r&&r(),h&&h()})),e)}c=c||"text";let g=await Hr[In.findKey(Hr,c)||"text"](a,e);return!i&&h&&h(),await new Promise(((t,n)=>{Sr(t,n,{data:g,headers:br.from(a.headers),status:a.status,statusText:a.statusText,config:e,request:f})}))}catch(t){if(h&&h(),t&&"TypeError"===t.name&&/Load failed|fetch/i.test(t.message))throw Object.assign(new Gn("Network Error",Gn.ERR_NETWORK,e,f),{cause:t.cause||t});throw Gn.from(t,t&&t.code,e,f)}})};In.forEach(Qr,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Kr=e=>`- ${e}`,Zr=e=>In.isFunction(e)||null===e||!1===e,Xr=e=>{e=In.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let a=0;a<t;a++){let t;if(n=e[a],r=n,!Zr(n)&&(r=Qr[(t=String(n)).toLowerCase()],void 0===r))throw new Gn(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+a]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(Kr).join("\n"):" "+Kr(e[0]):"as no adapter specified";throw new Gn("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function Jr(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Cr(null,e)}function eo(e){return Jr(e),e.headers=br.from(e.headers),e.data=Ar.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Xr(e.adapter||pr.adapter)(e).then((function(t){return Jr(e),t.data=Ar.call(e,e.transformResponse,t),t.headers=br.from(t.headers),t}),(function(t){return xr(t)||(Jr(e),t&&t.response&&(t.response.data=Ar.call(e,e.transformResponse,t.response),t.response.headers=br.from(t.response.headers))),Promise.reject(t)}))}const to="1.10.0",no={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{no[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const ro={};no.transitional=function(e,t,n){function r(e,t){return"[Axios v"+to+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,a)=>{if(!1===e)throw new Gn(r(o," has been removed"+(t?" in "+t:"")),Gn.ERR_DEPRECATED);return t&&!ro[o]&&(ro[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,a)}},no.spelling=function(e){return(t,n)=>(console.warn(`${n} is likely a misspelling of ${e}`),!0)};const oo={assertOptions:function(e,t,n){if("object"!=typeof e)throw new Gn("options must be an object",Gn.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const a=r[o],i=t[a];if(i){const t=e[a],n=void 0===t||i(t,a,e);if(!0!==n)throw new Gn("option "+a+" must be "+n,Gn.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Gn("Unknown option "+a,Gn.ERR_BAD_OPTION)}},validators:no},ao=oo.validators;class io{constructor(e){this.defaults=e||{},this.interceptors={request:new tr,response:new tr}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Pr(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&oo.assertOptions(n,{silentJSONParsing:ao.transitional(ao.boolean),forcedJSONParsing:ao.transitional(ao.boolean),clarifyTimeoutError:ao.transitional(ao.boolean)},!1),null!=r&&(In.isFunction(r)?t.paramsSerializer={serialize:r}:oo.assertOptions(r,{encode:ao.function,serialize:ao.function},!0)),void 0!==t.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?t.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:t.allowAbsoluteUrls=!0),oo.assertOptions(t,{baseUrl:ao.spelling("baseURL"),withXsrfToken:ao.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=o&&In.merge(o.common,o[t.method]);o&&In.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=br.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const u=[];let c;this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)}));let s,d=0;if(!l){const e=[eo.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,u),s=e.length,c=Promise.resolve(t);d<s;)c=c.then(e[d++],e[d++]);return c}s=i.length;let p=t;for(d=0;d<s;){const e=i[d++],t=i[d++];try{p=e(p)}catch(e){t.call(this,e);break}}try{c=eo.call(this,p)}catch(e){return Promise.reject(e)}for(d=0,s=u.length;d<s;)c=c.then(u[d++],u[d++]);return c}getUri(e){return er(jr((e=Pr(this.defaults,e)).baseURL,e.url,e.allowAbsoluteUrls),e.params,e.paramsSerializer)}}In.forEach(["delete","get","head","options"],(function(e){io.prototype[e]=function(t,n){return this.request(Pr(n||{},{method:e,url:t,data:(n||{}).data}))}})),In.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(Pr(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}io.prototype[e]=t(),io.prototype[e+"Form"]=t(!0)}));const lo=io;class uo{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new Cr(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new uo((function(t){e=t})),cancel:e}}}const co=uo,so={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(so).forEach((([e,t])=>{so[t]=e}));const po=so,fo=function e(t){const n=new lo(t),r=Qt(lo.prototype.request,n);return In.extend(r,lo.prototype,n,{allOwnKeys:!0}),In.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Pr(t,n))},r}(pr);fo.Axios=lo,fo.CanceledError=Cr,fo.CancelToken=co,fo.isCancel=xr,fo.VERSION=to,fo.toFormData=Vn,fo.AxiosError=Gn,fo.Cancel=fo.CanceledError,fo.all=function(e){return Promise.all(e)},fo.spread=function(e){return function(t){return e.apply(null,t)}},fo.isAxiosError=function(e){return In.isObject(e)&&!0===e.isAxiosError},fo.mergeConfig=Pr,fo.AxiosHeaders=br,fo.formToJSON=e=>sr(In.isHTMLForm(e)?new FormData(e):e),fo.getAdapter=Xr,fo.HttpStatusCode=po,fo.default=fo;const mo=fo;var ho=o(9118);function vo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function go(){var e,n,r=(e=(0,t.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return vo(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?vo(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return(0,t.useEffect)((function(){var e=function(){window.pageYOffset>300?a(!0):a(!1)};return window.addEventListener("scroll",e),function(){window.removeEventListener("scroll",e)}}),[]),t.createElement("div",null,o&&t.createElement("span",null,t.createElement("div",{onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},className:"back-to-top"},t.createElement("div",{className:"arrowup"},t.createElement(ho.A,null)))))}var yo={cm:!0,mm:!0,in:!0,px:!0,pt:!0,pc:!0,em:!0,ex:!0,ch:!0,rem:!0,vw:!0,vh:!0,vmin:!0,vmax:!0,"%":!0};function bo(e){var t=function(e){if("number"==typeof e)return{value:e,unit:"px"};var t,n=(e.match(/^[0-9.]*/)||"").toString();t=n.includes(".")?parseFloat(n):parseInt(n,10);var r=(e.match(/[^0-9]*$/)||"").toString();return yo[r]?{value:t,unit:r}:(console.warn("React Spinners: ".concat(e," is not a valid css value. Defaulting to ").concat(t,"px.")),{value:t,unit:"px"})}(e);return"".concat(t.value).concat(t.unit)}var Ao=function(e,t,n){var r="react-spinners-".concat(e,"-").concat(n);if("undefined"==typeof window||!window.document)return r;var o=document.createElement("style");document.head.appendChild(o);var a=o.sheet,i="\n    @keyframes ".concat(r," {\n      ").concat(t,"\n    }\n  ");return a&&a.insertRule(i,0),r},xo=function(){return xo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},xo.apply(this,arguments)},wo=[Ao("PuffLoader","0% {transform: scale(0)} 100% {transform: scale(1.0)}","puff-1"),Ao("PuffLoader","0% {opacity: 1} 100% {opacity: 0}","puff-2")];const Co=function(e){var n=e.loading,r=void 0===n||n,o=e.color,a=void 0===o?"#000000":o,i=e.speedMultiplier,l=void 0===i?1:i,u=e.cssOverride,c=void 0===u?{}:u,s=e.size,d=void 0===s?60:s,p=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["loading","color","speedMultiplier","cssOverride","size"]),f=xo({display:"inherit",position:"relative",width:bo(d),height:bo(d)},c),m=function(e){return{position:"absolute",height:bo(d),width:bo(d),border:"thick solid ".concat(a),borderRadius:"50%",opacity:"1",top:"0",left:"0",animationFillMode:"both",animation:"".concat(wo[0],", ").concat(wo[1]),animationDuration:"".concat(2/l,"s"),animationIterationCount:"infinite",animationTimingFunction:"cubic-bezier(0.165, 0.84, 0.44, 1), cubic-bezier(0.3, 0.61, 0.355, 1)",animationDelay:1===e?"-1s":"0s"}};return r?t.createElement("span",xo({style:f},p),t.createElement("span",{style:m(1)}),t.createElement("span",{style:m(2)})):null},So=function(){return t.createElement(t.Fragment,null,t.createElement("div",{className:"loader"},t.createElement("div",null,t.createElement(Co,{size:"170px",color:"dodgerblue",speedMultiplier:"0.3"}))),t.createElement("div",{className:"place"}),t.createElement("div",{className:"place"}),t.createElement("div",{className:"place"}))},Eo=function(){var e=new Date,n=e.getDay(),r=e.getDate(),o=e.getMonth()+1,a=e.getFullYear();return 1==n?n="Мonday":2==n?n="Tuesday":3==n?n="Wednesday":4==n?n="Thursday":5==n?n="Friday":6==n?n="Saturday":7==n&&(n="Sunday"),r<10&&(r="0"+r),o<10&&(o="0"+o),t.createElement(t.Fragment,null,n+" "+r+"."+o+"."+a)};function ko(e){return ko="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ko(e)}function Bo(){var e=_o(),t=e.m(Bo),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Mo(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Bo=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new zo(e,t)},AsyncIterator:jo,async:function(e,t,n,o,i){return(r(t)?To:No)(a(e),t,n,o,i)},keys:Oo,values:Mo}})()}function Mo(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(ko(e)+" is not iterable")}function Oo(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function No(e,t,n,r,o){var a=To(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function To(e,t,n,r,o){return new jo(_o().w(e,t,n,r),o||Promise)}function jo(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof zo?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Po(jo.prototype),Po(jo.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Po(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function _o(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Po(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Po(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Po(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Po(d,"constructor",c),Po(c,"constructor",u),u.displayName="GeneratorFunction",Po(c,o,"GeneratorFunction"),Po(d),Po(d,o,"Generator"),Po(d,r,(function(){return this})),Po(d,"toString",(function(){return"[object Generator]"})),(_o=function(){return{w:a,m:p}})()}function Po(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Po=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Po(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Po(e,t,n,r)}function zo(e,t){this.v=e,this.k=t}function Do(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Ro(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Lo(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Lo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Io=function(){var e=Ro((0,t.useState)(null),2),n=(e[0],e[1]),r=Ro((0,t.useState)([]),2),o=r[0],a=(r[1],Ro((0,t.useState)([]),2)),i=a[0],l=a[1],u=Ro((0,t.useState)(!0),2),c=u[0],s=u[1],d=vt();window.scrollTo({top:0,behavior:"smooth"}),(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Bo().mark((function e(){var t,r,a;return Bo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.tvmaze.com/schedule/web?date=".concat(o),e.prev=2,e.next=5,mo.get(t);case 5:r=e.sent,a=r.data,l(a),s(!1),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(2),n(e.t0);case 14:case"end":return e.stop()}}),e,null,[[2,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Do(a,r,o,i,l,"next",e)}function l(e){Do(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return c?t.createElement(So,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"gridTv",style:{paddingTop:"60px"}},t.createElement("p",{className:"time"},"Series ",t.createElement(Eo,null))),t.createElement("div",{className:"gridTv"},i.map((function(e,n){var r;return t.createElement(t.Fragment,null,t.createElement("div",{key:n,className:"gridItem"},t.createElement("img",{src:null===(r=e._embedded.show.image)||void 0===r?void 0:r.medium,alt:""}),t.createElement("div",{className:"genresTv"},t.createElement("p",{className:"episode"},"S",e.season,"  E",e.number),t.createElement("p",null,e._embedded.show.language),t.createElement("p",null,e._embedded.show.type),e._embedded.show.genres&&t.createElement(t.Fragment,null,e._embedded.show.genres.map((function(e,n){return t.createElement("div",{key:n},t.createElement("p",null,e))}))),e._embedded.show.runtime&&t.createElement("p",{style:{paddingTop:"10px"}},"⏲",e._embedded.show.runtime," min")),t.createElement("p",{className:"showName",onClick:function(){var t,n;t=e._embedded.show.id,n="/showDetails/".concat(t),d(n),window.scrollTo({top:0,behavior:"smooth"})}},e._embedded.show.name)))}))),t.createElement(go,null))},Fo=t.createContext({searchStringValue:"",setSearchStringFn:function(){}}),qo=function(e){var n=e.datum,r=new Date(1e3*n),o=r.getFullYear(),a=r.getMonth(),i=r.getDay();return t.createElement(t.Fragment,null,t.createElement("td",{className:"language"},"Updated: "," "+i+"."+a+"."+o))},Uo=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function Go(e){return(0,ae.Ay)("MuiPaper",e)}(0,W.A)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const $o=["className","component","elevation","square","variant"],Wo=(0,B.Ay)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return(0,w.A)({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&(0,w.A)({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${(0,k.X4)("#fff",Uo(t.elevation))}, ${(0,k.X4)("#fff",Uo(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))})),Yo=t.forwardRef((function(e,t){const n=(0,O.b)({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:a=1,square:i=!1,variant:l="elevation"}=n,u=(0,x.A)(n,$o),c=(0,w.A)({},n,{component:o,elevation:a,square:i,variant:l}),s=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e,a={root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]};return(0,E.A)(a,Go,o)})(c);return(0,$.jsx)(Wo,(0,w.A)({as:o,ownerState:c,className:(0,C.A)(s.root,r),ref:t},u))}));var Ho=o(5048);const Vo=function(e){return"string"==typeof e};var Qo=o(5570),Ko=o(5712),Zo=o(8148),Xo=o(8520);const Jo=["onChange","maxRows","minRows","style","value"];function ea(e){return parseInt(e,10)||0}const ta={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},na=t.forwardRef((function(e,n){const{onChange:r,maxRows:o,minRows:a=1,style:i,value:l}=e,u=(0,x.A)(e,Jo),{current:c}=t.useRef(null!=l),s=t.useRef(null),d=(0,Qo.A)(n,s),p=t.useRef(null),f=t.useRef(null),m=t.useCallback((()=>{const t=s.current,n=(0,Ko.A)(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0,overflowing:!1};const r=f.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const i=n.boxSizing,l=ea(n.paddingBottom)+ea(n.paddingTop),u=ea(n.borderBottomWidth)+ea(n.borderTopWidth),c=r.scrollHeight;r.value="x";const d=r.scrollHeight;let p=c;return a&&(p=Math.max(Number(a)*d,p)),o&&(p=Math.min(Number(o)*d,p)),p=Math.max(p,d),{outerHeightStyle:p+("border-box"===i?l+u:0),overflowing:Math.abs(p-c)<=1}}),[o,a,e.placeholder]),h=t.useCallback((()=>{const e=m();if(null==(t=e)||0===Object.keys(t).length||0===t.outerHeightStyle&&!t.overflowing)return;var t;const n=e.outerHeightStyle,r=s.current;p.current!==n&&(p.current=n,r.style.height=`${n}px`),r.style.overflow=e.overflowing?"hidden":""}),[m]);return(0,Zo.A)((()=>{const e=()=>{h()};const t=(0,Xo.A)(e),n=s.current,r=(0,Ko.A)(n);let o;return r.addEventListener("resize",t),"undefined"!=typeof ResizeObserver&&(o=new ResizeObserver(e),o.observe(n)),()=>{t.clear(),cancelAnimationFrame(undefined),r.removeEventListener("resize",t),o&&o.disconnect()}}),[m,h]),(0,Zo.A)((()=>{h()})),(0,$.jsxs)(t.Fragment,{children:[(0,$.jsx)("textarea",(0,w.A)({value:l,onChange:e=>{c||h(),r&&r(e)},ref:d,rows:a,style:i},u)),(0,$.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:f,tabIndex:-1,style:(0,w.A)({},ta,i,{paddingTop:0,paddingBottom:0})})]})})),ra=t.createContext(void 0);var oa=o(2778),aa=o(9940),ia=o(8749),la=o(9214);const ua=(0,ia.A)(),ca=function(e=ua){return function(e=null){const n=t.useContext(la.T);return n&&(r=n,0!==Object.keys(r).length)?n:e;var r}(e)},sa=function({styles:e,themeId:t,defaultTheme:n={}}){const r=ca(n),o="function"==typeof e?e(t&&r[t]||r):e;return(0,$.jsx)(aa.A,{styles:o})};var da=o(2765),pa=o(8312);const fa=function(e){return(0,$.jsx)(sa,(0,w.A)({},e,{defaultTheme:da.A,themeId:pa.A}))};function ma(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function ha(e){return(0,ae.Ay)("MuiInputBase",e)}const va=(0,W.A)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),ga=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],ya=(0,B.Ay)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${(0,de.A)(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]}})((({theme:e,ownerState:t})=>(0,w.A)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${va.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&(0,w.A)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),ba=(0,B.Ay)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=(0,w.A)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),o={opacity:"0 !important"},a=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return(0,w.A)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${va.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},[`&.${va.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),Aa=(0,$.jsx)(fa,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),xa=t.forwardRef((function(e,n){var r;const o=(0,O.b)({props:e,name:"MuiInputBase"}),{"aria-describedby":a,autoComplete:i,autoFocus:l,className:u,components:c={},componentsProps:s={},defaultValue:d,disabled:p,disableInjectingGlobalStyles:f,endAdornment:m,fullWidth:h=!1,id:v,inputComponent:g="input",inputProps:y={},inputRef:b,maxRows:A,minRows:S,multiline:k=!1,name:B,onBlur:M,onChange:T,onClick:j,onFocus:_,onKeyDown:P,onKeyUp:z,placeholder:D,readOnly:R,renderSuffix:L,rows:I,slotProps:F={},slots:q={},startAdornment:U,type:G="text",value:W}=o,Y=(0,x.A)(o,ga),H=null!=y.value?y.value:W,{current:V}=t.useRef(null!=H),Q=t.useRef(),K=t.useCallback((e=>{}),[]),Z=(0,N.A)(Q,b,y.ref,K),[X,J]=t.useState(!1),ee=t.useContext(ra),te=function({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}({props:o,muiFormControl:ee,states:["color","disabled","error","hiddenLabel","size","required","filled"]});te.focused=ee?ee.focused:X,t.useEffect((()=>{!ee&&p&&X&&(J(!1),M&&M())}),[ee,p,X,M]);const ne=ee&&ee.onFilled,re=ee&&ee.onEmpty,oe=t.useCallback((e=>{!function(e,t=!1){return e&&(ma(e.value)&&""!==e.value||t&&ma(e.defaultValue)&&""!==e.defaultValue)}(e)?re&&re():ne&&ne()}),[ne,re]);(0,oa.A)((()=>{V&&oe({value:H})}),[H,oe,V]),t.useEffect((()=>{oe(Q.current)}),[]);let ae=g,ie=y;k&&"input"===ae&&(ie=I?(0,w.A)({type:void 0,minRows:I,maxRows:I},ie):(0,w.A)({type:void 0,maxRows:A,minRows:S},ie),ae=na),t.useEffect((()=>{ee&&ee.setAdornedStart(Boolean(U))}),[ee,U]);const le=(0,w.A)({},o,{color:te.color||"primary",disabled:te.disabled,endAdornment:m,error:te.error,focused:te.focused,formControl:ee,fullWidth:h,hiddenLabel:te.hiddenLabel,multiline:k,size:te.size,startAdornment:U,type:G}),ue=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:a,focused:i,formControl:l,fullWidth:u,hiddenLabel:c,multiline:s,readOnly:d,size:p,startAdornment:f,type:m}=e,h={root:["root",`color${(0,de.A)(n)}`,r&&"disabled",o&&"error",u&&"fullWidth",i&&"focused",l&&"formControl",p&&"medium"!==p&&`size${(0,de.A)(p)}`,s&&"multiline",f&&"adornedStart",a&&"adornedEnd",c&&"hiddenLabel",d&&"readOnly"],input:["input",r&&"disabled","search"===m&&"inputTypeSearch",s&&"inputMultiline","small"===p&&"inputSizeSmall",c&&"inputHiddenLabel",f&&"inputAdornedStart",a&&"inputAdornedEnd",d&&"readOnly"]};return(0,E.A)(h,ha,t)})(le),ce=q.root||c.Root||ya,se=F.root||s.root||{},pe=q.input||c.Input||ba;return ie=(0,w.A)({},ie,null!=(r=F.input)?r:s.input),(0,$.jsxs)(t.Fragment,{children:[!f&&Aa,(0,$.jsxs)(ce,(0,w.A)({},se,!Vo(ce)&&{ownerState:(0,w.A)({},le,se.ownerState)},{ref:n,onClick:e=>{Q.current&&e.currentTarget===e.target&&Q.current.focus(),j&&j(e)}},Y,{className:(0,C.A)(ue.root,se.className,u,R&&"MuiInputBase-readOnly"),children:[U,(0,$.jsx)(ra.Provider,{value:null,children:(0,$.jsx)(pe,(0,w.A)({ownerState:le,"aria-invalid":te.error,"aria-describedby":a,autoComplete:i,autoFocus:l,defaultValue:d,disabled:te.disabled,id:v,onAnimationStart:e=>{oe("mui-auto-fill-cancel"===e.animationName?Q.current:{value:"x"})},name:B,placeholder:D,readOnly:R,required:te.required,rows:I,value:H,onKeyDown:P,onKeyUp:z,type:G},ie,!Vo(pe)&&{as:ae,ownerState:(0,w.A)({},le,ie.ownerState)},{ref:Z,className:(0,C.A)(ue.input,ie.className,R&&"MuiInputBase-readOnly"),onBlur:e=>{M&&M(e),y.onBlur&&y.onBlur(e),ee&&ee.onBlur?ee.onBlur(e):J(!1)},onChange:(e,...t)=>{if(!V){const t=e.target||Q.current;if(null==t)throw new Error((0,Ho.A)(1));oe({value:t.value})}y.onChange&&y.onChange(e,...t),T&&T(e,...t)},onFocus:e=>{te.disabled?e.stopPropagation():(_&&_(e),y.onFocus&&y.onFocus(e),ee&&ee.onFocus?ee.onFocus(e):J(!0))}}))}),m,L?L((0,w.A)({},te,{startAdornment:U})):null]}))]})}));function wa(e){return(0,ae.Ay)("MuiIconButton",e)}const Ca=(0,W.A)("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),Sa=["edge","children","className","color","disabled","disableFocusRipple","size"],Ea=(0,B.Ay)(se,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${(0,de.A)(n.color)}`],n.edge&&t[`edge${(0,de.A)(n.edge)}`],t[`size${(0,de.A)(n.size)}`]]}})((({theme:e,ownerState:t})=>(0,w.A)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,k.X4)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return(0,w.A)({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&(0,w.A)({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":(0,w.A)({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,k.X4)(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${Ca.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),ka=t.forwardRef((function(e,t){const n=(0,O.b)({props:e,name:"MuiIconButton"}),{edge:r=!1,children:o,className:a,color:i="default",disabled:l=!1,disableFocusRipple:u=!1,size:c="medium"}=n,s=(0,x.A)(n,Sa),d=(0,w.A)({},n,{edge:r,color:i,disabled:l,disableFocusRipple:u,size:c}),p=(e=>{const{classes:t,disabled:n,color:r,edge:o,size:a}=e,i={root:["root",n&&"disabled","default"!==r&&`color${(0,de.A)(r)}`,o&&`edge${(0,de.A)(o)}`,`size${(0,de.A)(a)}`]};return(0,E.A)(i,wa,t)})(d);return(0,$.jsx)(Ea,(0,w.A)({className:(0,C.A)(p.root,a),centerRipple:!0,focusRipple:!u,disabled:l,ref:t},s,{ownerState:d,children:o}))})),Ba=function(e){var n=(0,t.useContext)(Fo),r=vt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo)};return t.createElement(Yo,{className:"paper",component:"form",se:{p:"2px 4px",display:"flex",alignItems:"center",width:"40rem",fontSize:"28px",backgroundColor:"red"}},t.createElement(xa,{className:"base",placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(ka,{type:"button",onClick:a,sx:{p:"10px"},"aria-label":"search"},"📺🎭"))},Ma=function(e){var n=(0,t.useContext)(Fo),r=vt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga po tvGlumcima",o)};return t.createElement(Yo,{className:"paper",component:"form",se:{p:"2px 4px",display:"flex",alignItems:"center",width:"40rem",fontSize:"28px",backgroundColor:"red"}},t.createElement(xa,{className:"base",placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(ka,{type:"button",onClick:a,sx:{p:"10px"},"aria-label":"search"},"🎥"))};function Oa(e){return Oa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Oa(e)}function Na(){var e=Da(),t=e.m(Na),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Ta(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Na=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new La(e,t)},AsyncIterator:za,async:function(e,t,n,o,i){return(r(t)?Pa:_a)(a(e),t,n,o,i)},keys:ja,values:Ta}})()}function Ta(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Oa(e)+" is not iterable")}function ja(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function _a(e,t,n,r,o){var a=Pa(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Pa(e,t,n,r,o){return new za(Da().w(e,t,n,r),o||Promise)}function za(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof La?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Ra(za.prototype),Ra(za.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Ra(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Da(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Ra(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Ra(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Ra(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Ra(d,"constructor",c),Ra(c,"constructor",u),u.displayName="GeneratorFunction",Ra(c,o,"GeneratorFunction"),Ra(d),Ra(d,o,"Generator"),Ra(d,r,(function(){return this})),Ra(d,"toString",(function(){return"[object Generator]"})),(Da=function(){return{w:a,m:p}})()}function Ra(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Ra=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Ra(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Ra(e,t,n,r)}function La(e,t){this.v=e,this.k=t}function Ia(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Fa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return qa(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qa(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Ua=function(){var e=Fa((0,t.useState)(null),2),n=(e[0],e[1]),r=Fa((0,t.useState)([]),2),o=r[0],a=r[1],i=Fa((0,t.useState)([]),2),l=i[0],u=i[1],c=Fa((0,t.useState)([]),2),s=c[0],d=c[1],p=Fa((0,t.useState)([]),2),f=p[0],m=p[1],h=Fa((0,t.useState)(!1),2),v=(h[0],h[1],vt()),g=(0,t.useContext)(Fo).searchStringValue;(0,t.useEffect)((function(){y(g)}),[g]);var y=function(){var e,t=(e=Na().mark((function e(t){var r,o,i,l,c,s;return Na().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.tvmaze.com/search/shows?q=".concat(t),o="https://api.tvmaze.com/search/people?q=".concat(t),e.prev=2,e.next=5,mo.get(r);case 5:return i=e.sent,e.next=8,mo.get(o);case 8:l=e.sent,c=i.data,s=l.data,a(c),u(s),d(c.length),m(s.length),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),n(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ia(a,r,o,i,l,"next",e)}function l(e){Ia(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),b=function(e){var t="/showDetails/".concat(e);v(t)};return 0==s&&0==f?t.createElement(t.Fragment,null,t.createElement("div",{className:"gridTv",style:{paddingTop:"60px",paddingLeft:"25px"}},t.createElement("p",{className:"time"},g," Not found")),t.createElement("div",{className:"place"},t.createElement("div",{className:"placeBut"},t.createElement(Ba,{placeholder:"Tv Show & Actor",linkTo:"/tvShow"}),t.createElement(Ma,{placeholder:"Movies",linkTo:"/movies"})))):t.createElement(t.Fragment,null,t.createElement("table",{className:"showMain"},o.map((function(e){var n;return t.createElement("tbody",{key:e.show.id},t.createElement("tr",null,t.createElement("td",{rowSpan:7,className:"holdImg"},t.createElement("img",{className:"imgShow",src:null===(n=e.show.image)||void 0===n?void 0:n.original,onClick:function(){b(e.show.id),window.scrollTo({top:0,behavior:"smooth"})}})),t.createElement("td",{className:"clickShow",onClick:function(){b(e.show.id),window.scrollTo({top:0,behavior:"smooth"})}},e.show.name)),t.createElement("tr",null,t.createElement("td",null,t.createElement("ul",{className:"genres"},e.show.genres.map((function(e,n){return t.createElement("li",{key:n},e)}))))),t.createElement("tr",null,t.createElement("td",{className:"language"},e.show.language)),t.createElement("tr",null,t.createElement("td",null,"Premiered:"," "+e.show.premiered)),t.createElement("tr",null,e.show.summary&&t.createElement("td",{className:"summaryRes",dangerouslySetInnerHTML:{__html:e.show.summary}})),t.createElement("tr",null,t.createElement(qo,{datum:e.show.updated})),t.createElement("tr",null,t.createElement("td",null,t.createElement("a",{href:e.show.url,target:"_blank"},"TvMaze"))),t.createElement("tr",null,t.createElement("td",{colSpan:3},t.createElement("hr",null))))}))),t.createElement("table",{className:"showMain"},l.map((function(e,n){var r,o,a;return t.createElement("tbody",{key:n},t.createElement("tr",null,t.createElement("td",{rowSpan:5,className:"holdImg"},t.createElement("img",{className:"imgActor",src:null===(r=e.person.image)||void 0===r?void 0:r.original})),t.createElement("td",{colSpan:2,className:"showNameActor",onClick:function(){var t,n;t=e.person.id,n="/actorDetails/".concat(t),v(n),window.scrollTo({top:0,behavior:"smooth"})}},null===(o=e.person)||void 0===o?void 0:o.name)),t.createElement("tr",null,t.createElement("td",{className:"language"},null===(a=e.person.country)||void 0===a?void 0:a.name),t.createElement("td",null,e.person.gender)),t.createElement("tr",null,t.createElement("td",{className:"language"},e.person.birthday),t.createElement("td",{className:"language"},e.person.deathday)),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("a",{href:e.person.url,target:"_blank"},"TvMaze"))),t.createElement("tr",null,t.createElement(qo,{datum:e.person.updated})),t.createElement("tr",null,t.createElement("td",{colSpan:3},t.createElement("hr",null))))}))),t.createElement(go,null))};var Ga=o(2532),$a=o(3571),Wa=o(9599);const Ya=["className","component"];var Ha=o(3494);const Va=(0,W.A)("MuiBox",["root"]),Qa=(0,b.A)(),Ka=function(e={}){const{themeId:n,defaultTheme:r,defaultClassName:o="MuiBox-root",generateClassName:a}=e,i=(0,Ga.default)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})($a.A);return t.forwardRef((function(e,t){const l=ca(r),u=(0,Wa.A)(e),{className:c,component:s="div"}=u,d=(0,x.A)(u,Ya);return(0,$.jsx)(i,(0,w.A)({as:s,ref:t,className:(0,C.A)(c,a?a(o):o),theme:n&&l[n]||l},d))}))}({themeId:pa.A,defaultTheme:Qa,defaultClassName:Va.root,generateClassName:Ha.A.generate});var Za="unmounted",Xa="exited",Ja="entering",ei="entered",ti="exiting",ni=function(e){function n(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=Xa,r.appearStatus=Ja):o=ei:o=t.unmountOnExit||t.mountOnEnter?Za:Xa,r.state={status:o},r.nextCallback=null,r}P(n,e),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Za?{status:Xa}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Ja&&n!==ei&&(t=Ja):n!==Ja&&n!==ei||(t=ti)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===Ja){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:Se.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Xa&&this.setState({status:Za})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[Se.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),u=r?l.appear:l.enter;e||n?(this.props.onEnter(a,i),this.safeSetState({status:Ja},(function(){t.props.onEntering(a,i),t.onTransitionEnd(u,(function(){t.safeSetState({status:ei},(function(){t.props.onEntered(a,i)}))}))}))):this.safeSetState({status:ei},(function(){t.props.onEntered(a)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:Se.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:ti},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Xa},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Xa},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:Se.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var e=this.state.status;if(e===Za)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,(0,x.A)(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return t.createElement(z.Provider,{value:null},"function"==typeof r?r(e,o):t.cloneElement(t.Children.only(r),o))},n}(t.Component);function ri(){}ni.contextType=z,ni.propTypes={},ni.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:ri,onEntering:ri,onEntered:ri,onExit:ri,onExiting:ri,onExited:ri},ni.UNMOUNTED=Za,ni.EXITED=Xa,ni.ENTERING=Ja,ni.ENTERED=ei,ni.EXITING=ti;const oi=ni;var ai=o(7091);function ii(e,t){var n,r;const{timeout:o,easing:a,style:i={}}=e;return{duration:null!=(n=i.transitionDuration)?n:"number"==typeof o?o:o[t.mode]||0,easing:null!=(r=i.transitionTimingFunction)?r:"object"==typeof a?a[t.mode]:a,delay:i.transitionDelay}}function li(e){return(0,ae.Ay)("MuiCollapse",e)}(0,W.A)("MuiCollapse",["root","horizontal","vertical","entered","hidden","wrapper","wrapperInner"]);const ui=["addEndListener","children","className","collapsedSize","component","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","orientation","style","timeout","TransitionComponent"],ci=(0,B.Ay)("div",{name:"MuiCollapse",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.orientation],"entered"===n.state&&t.entered,"exited"===n.state&&!n.in&&"0px"===n.collapsedSize&&t.hidden]}})((({theme:e,ownerState:t})=>(0,w.A)({height:0,overflow:"hidden",transition:e.transitions.create("height")},"horizontal"===t.orientation&&{height:"auto",width:0,transition:e.transitions.create("width")},"entered"===t.state&&(0,w.A)({height:"auto",overflow:"visible"},"horizontal"===t.orientation&&{width:"auto"}),"exited"===t.state&&!t.in&&"0px"===t.collapsedSize&&{visibility:"hidden"}))),si=(0,B.Ay)("div",{name:"MuiCollapse",slot:"Wrapper",overridesResolver:(e,t)=>t.wrapper})((({ownerState:e})=>(0,w.A)({display:"flex",width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),di=(0,B.Ay)("div",{name:"MuiCollapse",slot:"WrapperInner",overridesResolver:(e,t)=>t.wrapperInner})((({ownerState:e})=>(0,w.A)({width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),pi=t.forwardRef((function(e,n){const r=(0,O.b)({props:e,name:"MuiCollapse"}),{addEndListener:o,children:a,className:i,collapsedSize:l="0px",component:u,easing:c,in:s,onEnter:d,onEntered:p,onEntering:f,onExit:m,onExited:h,onExiting:v,orientation:g="vertical",style:y,timeout:b=ai.p0.standard,TransitionComponent:A=oi}=r,S=(0,x.A)(r,ui),k=(0,w.A)({},r,{orientation:g,collapsedSize:l}),B=(e=>{const{orientation:t,classes:n}=e,r={root:["root",`${t}`],entered:["entered"],hidden:["hidden"],wrapper:["wrapper",`${t}`],wrapperInner:["wrapperInner",`${t}`]};return(0,E.A)(r,li,n)})(k),M=function(){const e=ca(da.A);return e[pa.A]||e}(),T=(0,G.A)(),j=t.useRef(null),_=t.useRef(),P="number"==typeof l?`${l}px`:l,z="horizontal"===g,D=z?"width":"height",R=t.useRef(null),L=(0,N.A)(n,R),I=e=>t=>{if(e){const n=R.current;void 0===t?e(n):e(n,t)}},F=()=>j.current?j.current[z?"clientWidth":"clientHeight"]:0,q=I(((e,t)=>{j.current&&z&&(j.current.style.position="absolute"),e.style[D]=P,d&&d(e,t)})),U=I(((e,t)=>{const n=F();j.current&&z&&(j.current.style.position="");const{duration:r,easing:o}=ii({style:y,timeout:b,easing:c},{mode:"enter"});if("auto"===b){const t=M.transitions.getAutoHeightDuration(n);e.style.transitionDuration=`${t}ms`,_.current=t}else e.style.transitionDuration="string"==typeof r?r:`${r}ms`;e.style[D]=`${n}px`,e.style.transitionTimingFunction=o,f&&f(e,t)})),W=I(((e,t)=>{e.style[D]="auto",p&&p(e,t)})),Y=I((e=>{e.style[D]=`${F()}px`,m&&m(e)})),H=I(h),V=I((e=>{const t=F(),{duration:n,easing:r}=ii({style:y,timeout:b,easing:c},{mode:"exit"});if("auto"===b){const n=M.transitions.getAutoHeightDuration(t);e.style.transitionDuration=`${n}ms`,_.current=n}else e.style.transitionDuration="string"==typeof n?n:`${n}ms`;e.style[D]=P,e.style.transitionTimingFunction=r,v&&v(e)}));return(0,$.jsx)(A,(0,w.A)({in:s,onEnter:q,onEntered:W,onEntering:U,onExit:Y,onExited:H,onExiting:V,addEndListener:e=>{"auto"===b&&T.start(_.current||0,e),o&&o(R.current,e)},nodeRef:R,timeout:"auto"===b?null:b},S,{children:(e,t)=>(0,$.jsx)(ci,(0,w.A)({as:u,className:(0,C.A)(B.root,i,{entered:B.entered,exited:!s&&"0px"===P&&B.hidden}[e]),style:(0,w.A)({[z?"minWidth":"minHeight"]:P},y),ref:L},t,{ownerState:(0,w.A)({},k,{state:e}),children:(0,$.jsx)(si,{ownerState:(0,w.A)({},k,{state:e}),className:B.wrapper,ref:j,children:(0,$.jsx)(di,{ownerState:(0,w.A)({},k,{state:e}),className:B.wrapperInner,children:a})})}))}))}));pi.muiSupportAuto=!0;const fi=pi;var mi=o(9483),hi=o(4589);const vi=function(e){var n,r,o,a,i,l,u=vt(),c={dots:!1,infinite:!0,slidesToShow:2,slidesToScroll:1,autoplay:!0,speed:1e3,autoplaySpeed:2500,cssEase:"linear"},s=function(e){var t="/actorDetails/".concat(e);u(t)};return t.createElement(t.Fragment,null,e.embedded&&(1==e.embedded.length?t.createElement("div",{className:"sliderDiv"},t.createElement("table",null,t.createElement("tbody",null,t.createElement("tr",null,(null===(n=e.embedded[0].person)||void 0===n||null===(n=n.image)||void 0===n?void 0:n.medium)&&t.createElement("td",null," ",t.createElement("img",{className:"imageActor",src:null===(r=e.embedded[0].person)||void 0===r||null===(r=r.image)||void 0===r?void 0:r.medium,alt:"no picture",onClick:function(){s(e.embedded[0].person.id),window.scrollTo({top:0,behavior:"smooth"})}})),(null===(o=e.embedded[0].character)||void 0===o||null===(o=o.image)||void 0===o?void 0:o.medium)&&t.createElement("td",null,"  ",t.createElement("img",{src:null===(a=e.embedded[0].character)||void 0===a||null===(a=a.image)||void 0===a?void 0:a.medium,alt:"no picture",className:"imageCaracter"}))),t.createElement("tr",null,t.createElement("td",null,"   ",t.createElement("p",{className:"clickActor",onClick:function(){s(e.embedded[0].person.id),window.scrollTo({top:0,behavior:"smooth"})}},null===(i=e.embedded[0].person)||void 0===i?void 0:i.name)),t.createElement("td",null," ",t.createElement("p",null,null===(l=e.embedded[0].character)||void 0===l?void 0:l.name)),t.createElement("td",null))))):0==e.embedded.length?t.createElement("div",{className:"sliderDiv",style:{textAlign:"center",padding:"10px"}},"No guest character data available"):t.createElement("div",{className:"sliderDiv"},t.createElement(hi.A,c,e.embedded.map((function(e){var n,r,o,a,i,l;return t.createElement("table",{key:e.character.id},t.createElement("tbody",null,t.createElement("tr",null,(null===(n=e.person)||void 0===n||null===(n=n.image)||void 0===n?void 0:n.medium)&&t.createElement("td",null," ",t.createElement("img",{className:"imageActor",src:null===(r=e.person)||void 0===r||null===(r=r.image)||void 0===r?void 0:r.medium,alt:"no picture",onClick:function(){s(e.person.id),window.scrollTo({top:0,behavior:"smooth"})}})),(null===(o=e.character)||void 0===o||null===(o=o.image)||void 0===o?void 0:o.medium)&&t.createElement("td",null,"  ",t.createElement("img",{src:null===(a=e.character)||void 0===a||null===(a=a.image)||void 0===a?void 0:a.medium,alt:"no picture",className:"imageCaracter"})),t.createElement("td",{className:"vertical"})),t.createElement("tr",null,t.createElement("td",null,"   ",t.createElement("p",{className:"clickActor",onClick:function(){s(e.person.id),window.scrollTo({top:0,behavior:"smooth"})}},null===(i=e.person)||void 0===i?void 0:i.name)),t.createElement("td",null," ",t.createElement("p",null,null===(l=e.character)||void 0===l?void 0:l.name)),t.createElement("td",null))))}))))))};function gi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const yi=function(e){var n,r,o=(n=(0,t.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(n,r)||function(e,t){if(e){if("string"==typeof e)return gi(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gi(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],i=o[1];return t.createElement(t.Fragment,null,t.createElement("div",{className:"collapse"},"Guest caracter",t.createElement(ka,{color:"primary","aria-label":"expand row",size:"small",onClick:function(){return i(!a)}},a?t.createElement(ho.A,null):t.createElement(mi.A,null))),t.createElement(fi,{in:a,timeout:"auto",unmountOnExit:!0},t.createElement(Ka,{sx:{margin:0}},t.createElement(vi,{embedded:null==e?void 0:e.embedded}))))};function bi(e){return bi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bi(e)}function Ai(){var e=ki(),t=e.m(Ai),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,xi(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Ai=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new Mi(e,t)},AsyncIterator:Ei,async:function(e,t,n,o,i){return(r(t)?Si:Ci)(a(e),t,n,o,i)},keys:wi,values:xi}})()}function xi(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(bi(e)+" is not iterable")}function wi(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Ci(e,t,n,r,o){var a=Si(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Si(e,t,n,r,o){return new Ei(ki().w(e,t,n,r),o||Promise)}function Ei(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof Mi?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Bi(Ei.prototype),Bi(Ei.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Bi(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function ki(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Bi(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Bi(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Bi(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Bi(d,"constructor",c),Bi(c,"constructor",u),u.displayName="GeneratorFunction",Bi(c,o,"GeneratorFunction"),Bi(d),Bi(d,o,"Generator"),Bi(d,r,(function(){return this})),Bi(d,"toString",(function(){return"[object Generator]"})),(ki=function(){return{w:a,m:p}})()}function Bi(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Bi=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Bi(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Bi(e,t,n,r)}function Mi(e,t){this.v=e,this.k=t}function Oi(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Ni(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ti(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ti(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ti(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const ji=function(e){var n=Ni((0,t.useState)(null),2),r=(n[0],n[1]),o=Ni((0,t.useState)([]),2),a=o[0],i=o[1];(0,t.useEffect)((function(){l()}),[]);var l=function(){var t,n=(t=Ai().mark((function t(){var n,o,a;return Ai().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="https://api.tvmaze.com/seasons/".concat(e.sezonId,"/episodes?embed=guestcast"),t.prev=1,t.next=4,mo.get(n);case 4:o=t.sent,a=o.data.reverse(),i(a),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(1),r(t.t0);case 12:case"end":return t.stop()}}),t,null,[[1,9]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){Oi(a,r,o,i,l,"next",e)}function l(e){Oi(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return n.apply(this,arguments)}}();return t.createElement(t.Fragment,null,a.map((function(e){var n;return t.createElement("div",{key:e.id},t.createElement("div",{className:"sezoneList"},t.createElement("div",null,t.createElement("div",{className:"epName"},e.name),t.createElement("p",{className:"epNumber"},"E",e.number),t.createElement("p",{className:"airdate"}," ",e.airdate)),t.createElement("div",null,t.createElement("img",{className:"imgSezons",src:null===(n=e.image)||void 0===n?void 0:n.original})),t.createElement("div",{className:"summEpis",dangerouslySetInnerHTML:{__html:e.summary}})),t.createElement(yi,{embedded:null==e?void 0:e._embedded.guestcast}))})))},_i=function(e){return t.createElement(t.Fragment,null,e.sezone.map((function(e){var n;return t.createElement("div",{key:e.id},t.createElement("div",{className:"sezoneList"},t.createElement("div",null,t.createElement("table",null,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{className:"sezonNum"},"S",e.number),t.createElement("td",{className:"sezonDate"},e.premiereDate+" to "+e.endDate),t.createElement("td",null,e.episodeOrder," ep."))))),t.createElement("div",null,t.createElement("img",{className:"imgSezons",src:null===(n=e.image)||void 0===n?void 0:n.original})),t.createElement("div",{className:"summEpis",dangerouslySetInnerHTML:{__html:e.summary}})),t.createElement("div",{className:"hrGenre"}),t.createElement(ji,{sezonId:e.id}))})))},Pi=function(e){var n=function(e){if(null==e)return"average"};return t.createElement(t.Fragment,null,t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("div",{className:"sezone"},e.sezones.map((function(e){return t.createElement("div",{key:e.id},t.createElement("p",null,"Sezone: "+e.number+" "),t.createElement("p",{className:"rating ".concat(n(e.episodeOrder))}," Episode: "+e.episodeOrder))}))))))};function zi(e){return zi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zi(e)}function Di(){var e=Ui(),t=e.m(Di),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Ri(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Di=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new $i(e,t)},AsyncIterator:qi,async:function(e,t,n,o,i){return(r(t)?Fi:Ii)(a(e),t,n,o,i)},keys:Li,values:Ri}})()}function Ri(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(zi(e)+" is not iterable")}function Li(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Ii(e,t,n,r,o){var a=Fi(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Fi(e,t,n,r,o){return new qi(Ui().w(e,t,n,r),o||Promise)}function qi(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof $i?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Gi(qi.prototype),Gi(qi.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Gi(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Ui(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Gi(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Gi(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Gi(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Gi(d,"constructor",c),Gi(c,"constructor",u),u.displayName="GeneratorFunction",Gi(c,o,"GeneratorFunction"),Gi(d),Gi(d,o,"Generator"),Gi(d,r,(function(){return this})),Gi(d,"toString",(function(){return"[object Generator]"})),(Ui=function(){return{w:a,m:p}})()}function Gi(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Gi=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Gi(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Gi(e,t,n,r)}function $i(e,t){this.v=e,this.k=t}function Wi(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Yi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Hi(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Vi=function(e){var n=Yi((0,t.useState)([]),2),r=n[0],o=n[1],a=Yi((0,t.useState)(null),2),i=(a[0],a[1]),l=e.number;(0,t.useEffect)((function(){u()}),[l]);var u=function(){var e,t=(e=Di().mark((function e(){var t,n,r;return Di().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.omdbapi.com/?i=".concat(l,"&apikey=f91358c4&plot=full&type=series"),e.prev=1,e.next=4,mo.get(t);case 4:n=e.sent,r=n.data,o(r),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),i(e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Wi(a,r,o,i,l,"next",e)}function l(e){Wi(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,r.Plot&&t.createElement("tr",null,t.createElement("td",{colSpan:3,className:"summary ".concat(function(e){if("N/A"==e)return"average"}(r.Plot))},r.Plot)),r.Writer&&t.createElement("tr",null,t.createElement("td",{colSpan:3,className:"language ".concat(function(e){if("N/A"==e)return"average"}(r.Writer))},"Writer:  ",r.Writer)),r.Director&&t.createElement("tr",null,t.createElement("td",{colSpan:3,className:"language ".concat(function(e){if("N/A"==e)return"average"}(r.Director))},"Director: ",r.Director)),r.Awards&&t.createElement("tr",null,t.createElement("td",{colSpan:3,className:"language ".concat(function(e){if("N/A"==e)return"average"}(r.Awards))},"Awards: ",r.Awards)))};function Qi(e){return Qi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qi(e)}function Ki(){var e=nl(),t=e.m(Ki),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Zi(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Ki=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new ol(e,t)},AsyncIterator:tl,async:function(e,t,n,o,i){return(r(t)?el:Ji)(a(e),t,n,o,i)},keys:Xi,values:Zi}})()}function Zi(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Qi(e)+" is not iterable")}function Xi(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Ji(e,t,n,r,o){var a=el(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function el(e,t,n,r,o){return new tl(nl().w(e,t,n,r),o||Promise)}function tl(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof ol?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(rl(tl.prototype),rl(tl.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),rl(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function nl(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return rl(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(rl(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,rl(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,rl(d,"constructor",c),rl(c,"constructor",u),u.displayName="GeneratorFunction",rl(c,o,"GeneratorFunction"),rl(d),rl(d,o,"Generator"),rl(d,r,(function(){return this})),rl(d,"toString",(function(){return"[object Generator]"})),(nl=function(){return{w:a,m:p}})()}function rl(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}rl=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){rl(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},rl(e,t,n,r)}function ol(e,t){this.v=e,this.k=t}function al(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function il(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ll(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ll(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ll(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const ul=function(e){var n=il((0,t.useState)([]),2),r=n[0],o=n[1],a=il((0,t.useState)(null),2),i=(a[0],a[1]),l=e.number;(0,t.useEffect)((function(){u()}),[l]);var u=function(){var e,t=(e=Ki().mark((function e(){var t,n,r;return Ki().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.omdbapi.com/?i=".concat(l,"&apikey=f91358c4"),e.prev=1,e.next=4,mo.get(t);case 4:n=e.sent,r=n.data,o(r),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),i(e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){al(a,r,o,i,l,"next",e)}function l(e){al(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("img",{src:r.Poster,alt:" ",className:"imgOmdb"}))};function cl(e){return cl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},cl(e)}function sl(){var e=vl(),t=e.m(sl),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,dl(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(sl=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new yl(e,t)},AsyncIterator:hl,async:function(e,t,n,o,i){return(r(t)?ml:fl)(a(e),t,n,o,i)},keys:pl,values:dl}})()}function dl(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(cl(e)+" is not iterable")}function pl(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function fl(e,t,n,r,o){var a=ml(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function ml(e,t,n,r,o){return new hl(vl().w(e,t,n,r),o||Promise)}function hl(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof yl?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(gl(hl.prototype),gl(hl.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),gl(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function vl(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return gl(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(gl(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,gl(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,gl(d,"constructor",c),gl(c,"constructor",u),u.displayName="GeneratorFunction",gl(c,o,"GeneratorFunction"),gl(d),gl(d,o,"Generator"),gl(d,r,(function(){return this})),gl(d,"toString",(function(){return"[object Generator]"})),(vl=function(){return{w:a,m:p}})()}function gl(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}gl=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){gl(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},gl(e,t,n,r)}function yl(e,t){this.v=e,this.k=t}function bl(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Al(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return xl(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const wl=function(){var e,n,r,o,a,i,l,u,c,s,d,p,f,m,h,v,g=Al((0,t.useState)(null),2),y=(g[0],g[1]),b=Al((0,t.useState)([]),2),A=b[0],x=b[1],w=Al((0,t.useState)([]),2),C=w[0],S=w[1],E=Al((0,t.useState)([]),2),k=E[0],B=E[1],M=Al((0,t.useState)(!0),2),O=M[0],N=M[1],T=vt(),j=gt().showId;(0,t.useEffect)((function(){_()}),[]);var _=function(){var e,t=(e=sl().mark((function e(){var t,n,r,o,a,i,l,u;return sl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.tvmaze.com/shows/".concat(j,"?embed=cast"),n="https://api.tvmaze.com/shows/".concat(j,"/episodes"),r="https://api.tvmaze.com/shows/".concat(j,"/seasons"),e.prev=3,e.next=6,mo.get(t);case 6:return o=e.sent,e.next=9,mo.get(n);case 9:return a=e.sent,e.next=12,mo.get(r);case 12:i=e.sent,l=o.data,a.data,u=i.data.reverse(),x(l),S(l._embedded.cast),B(u),N(!1),e.next=25;break;case 22:e.prev=22,e.t0=e.catch(3),y(e.t0);case 25:case"end":return e.stop()}}),e,null,[[3,22]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){bl(a,r,o,i,l,"next",e)}function l(e){bl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),P={dots:!1,infinite:!0,slidesToShow:2,slidesToScroll:1,autoplay:!0,speed:1e3,autoplaySpeed:2500,cssEase:"linear"},z=function(e){var t="/actorDetails/".concat(e);T(t)},D=function(e){if(null==e)return"average"};return O?t.createElement(So,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"details"},t.createElement("div",{className:"holdImg"},t.createElement("img",{className:"imgShow",src:null===(e=A.image)||void 0===e?void 0:e.original}),t.createElement(ul,{number:A.externals.imdb})),t.createElement("table",null,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"showName"},A.name)),t.createElement("tr",null,t.createElement("td",{className:"language"},A.type),A.genres&&t.createElement("td",null,A.genres.map((function(e,n){return t.createElement("p",{key:n},e)})))),t.createElement("tr",null,t.createElement("td",{className:"language"},A.language),t.createElement("td",{className:"runtime"},t.createElement("p",{className:"rating2 ".concat(function(e){if(null==e)return"average"}(A.runtime))}," ⏲ "+A.runtime+" min   "),t.createElement("p",{className:"rating ".concat(function(e){if(null==e)return"average"}(null===(n=A.rating)||void 0===n?void 0:n.average))},"  ⭐ "+(null===(r=A.rating)||void 0===r?void 0:r.average)+" "))),t.createElement(Pi,{sezones:k}),t.createElement("tr",null,t.createElement("td",{className:"rating3"},"Premiered:"," "+A.premiered),A.ended&&t.createElement("td",{className:"rating3 ".concat(function(e){if(null==e)return"average"}(A.ended))},"Ended: "+A.ended)),t.createElement("tr",null,t.createElement("td",{colSpan:3,className:"summary",dangerouslySetInnerHTML:{__html:A.summary}})),t.createElement(Vi,{number:A.externals.imdb}),t.createElement("tr",null,(null===(o=A.webChannel)||void 0===o?void 0:o.name)&&t.createElement("td",{className:"rating3 ".concat(function(e){if(null==e)return"average"}(null===(a=A.webChannel)||void 0===a?void 0:a.name))},"Web Chanel",t.createElement("a",{href:null===(i=A.webChannel)||void 0===i?void 0:i.officialSite,target:"_blank",className:"rating3 ".concat(function(e){if(null==e)return"average"}(null===(l=A.webChannel)||void 0===l?void 0:l.name))}," "+(null===(u=A.webChannel)||void 0===u?void 0:u.name))),t.createElement("td",{className:"rating3 ".concat(D(null===(c=A.network)||void 0===c?void 0:c.name))},t.createElement("a",{href:null==A?void 0:A.officialSite,target:"_blank",className:"rating3 ".concat(D(null===(s=A.network)||void 0===s?void 0:s.name))},"Official Site  "))),t.createElement("tr",null,t.createElement(qo,{datum:A.updated}),t.createElement("td",{style:{verticalAlign:"top"}},t.createElement("p",{className:"more",onClick:function(){var e,t;e=A.id,t="/imgShow/".concat(e),T(t),window.scrollTo({top:0,behavior:"smooth"})}},"MORE PICTURE")))))),C&&(1==C.length?t.createElement("div",{className:"sliderDiv"},t.createElement("table",null,t.createElement("tbody",null,t.createElement("tr",null,(null===(d=C[0].person)||void 0===d||null===(d=d.image)||void 0===d?void 0:d.medium)&&t.createElement("td",null," ",t.createElement("img",{className:"imageActor",src:null===(p=C[0].person)||void 0===p||null===(p=p.image)||void 0===p?void 0:p.medium,alt:"",onClick:function(){z(C[0].person.id),window.scrollTo({top:0,behavior:"smooth"})}})),(null===(f=C[0].character)||void 0===f||null===(f=f.image)||void 0===f?void 0:f.medium)&&t.createElement("td",null,"  ",t.createElement("img",{src:null===(m=C[0].character)||void 0===m||null===(m=m.image)||void 0===m?void 0:m.medium,alt:"",className:"imageCaracter"}))),t.createElement("tr",null,t.createElement("td",null,"   ",t.createElement("p",{className:"clickActor",onClick:function(){z(C[0].person.id),window.scrollTo({top:0,behavior:"smooth"})}},null===(h=C[0].person)||void 0===h?void 0:h.name)),t.createElement("td",null," ",t.createElement("p",null,null===(v=C[0].character)||void 0===v?void 0:v.name)),t.createElement("td",null))))):0==C.length?t.createElement("div",{className:"sliderDiv",style:{textAlign:"center",padding:"10px"}},"No cast data available"):t.createElement("div",{className:"sliderDiv"},t.createElement(hi.A,P,C.map((function(e){var n,r,o,a,i,l;return t.createElement("table",{key:e.character.id},t.createElement("tbody",null,t.createElement("tr",null,(null===(n=e.person)||void 0===n||null===(n=n.image)||void 0===n?void 0:n.medium)&&t.createElement("td",null," ",t.createElement("img",{className:"imageActor",src:null===(r=e.person)||void 0===r||null===(r=r.image)||void 0===r?void 0:r.medium,alt:"no picture",onClick:function(){z(e.person.id),window.scrollTo({top:0,behavior:"smooth"})}})),(null===(o=e.character)||void 0===o||null===(o=o.image)||void 0===o?void 0:o.medium)&&t.createElement("td",null,"  ",t.createElement("img",{src:null===(a=e.character)||void 0===a||null===(a=a.image)||void 0===a?void 0:a.medium,alt:"no picture",className:"imageCaracter"})),t.createElement("td",{className:"vertical"})),t.createElement("tr",null,t.createElement("td",null,"   ",t.createElement("p",{className:"clickActor",onClick:function(){z(e.person.id),window.scrollTo({top:0,behavior:"smooth"})}},null===(i=e.person)||void 0===i?void 0:i.name)),t.createElement("td",null," ",t.createElement("p",null,null===(l=e.character)||void 0===l?void 0:l.name)),t.createElement("td",null))))}))))),t.createElement(_i,{sezone:k}),t.createElement(go,null))};function Cl(e){return Cl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Cl(e)}function Sl(){var e=Nl(),t=e.m(Sl),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,El(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Sl=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new jl(e,t)},AsyncIterator:Ol,async:function(e,t,n,o,i){return(r(t)?Ml:Bl)(a(e),t,n,o,i)},keys:kl,values:El}})()}function El(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Cl(e)+" is not iterable")}function kl(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Bl(e,t,n,r,o){var a=Ml(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Ml(e,t,n,r,o){return new Ol(Nl().w(e,t,n,r),o||Promise)}function Ol(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof jl?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Tl(Ol.prototype),Tl(Ol.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Tl(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Nl(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Tl(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Tl(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Tl(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Tl(d,"constructor",c),Tl(c,"constructor",u),u.displayName="GeneratorFunction",Tl(c,o,"GeneratorFunction"),Tl(d),Tl(d,o,"Generator"),Tl(d,r,(function(){return this})),Tl(d,"toString",(function(){return"[object Generator]"})),(Nl=function(){return{w:a,m:p}})()}function Tl(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Tl=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Tl(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Tl(e,t,n,r)}function jl(e,t){this.v=e,this.k=t}function _l(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Pl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return zl(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Dl=function(){var e=Pl((0,t.useState)(null),2),n=(e[0],e[1]),r=Pl((0,t.useState)(!0),2),o=r[0],a=r[1],i=Pl((0,t.useState)([]),2),l=i[0],u=i[1],c=gt().images;(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=Sl().mark((function e(){var t,r,o;return Sl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.tvmaze.com/shows/".concat(c,"/images"),e.prev=1,e.next=4,mo.get(t);case 4:r=e.sent,o=r.data,u(o),a(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){_l(a,r,o,i,l,"next",e)}function l(e){_l(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return o?t.createElement(t.Fragment,null,t.createElement(So,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"showMain"},l.map((function(e){return t.createElement("div",{key:e.id,className:"bigImg"},t.createElement("img",{src:e.resolutions.original.url}))}))),t.createElement(go,null))};function Rl(e){return Rl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rl(e)}function Ll(){var e=$l(),t=e.m(Ll),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Il(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Ll=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new Yl(e,t)},AsyncIterator:Gl,async:function(e,t,n,o,i){return(r(t)?Ul:ql)(a(e),t,n,o,i)},keys:Fl,values:Il}})()}function Il(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Rl(e)+" is not iterable")}function Fl(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function ql(e,t,n,r,o){var a=Ul(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Ul(e,t,n,r,o){return new Gl($l().w(e,t,n,r),o||Promise)}function Gl(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof Yl?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Wl(Gl.prototype),Wl(Gl.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Wl(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function $l(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Wl(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Wl(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Wl(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Wl(d,"constructor",c),Wl(c,"constructor",u),u.displayName="GeneratorFunction",Wl(c,o,"GeneratorFunction"),Wl(d),Wl(d,o,"Generator"),Wl(d,r,(function(){return this})),Wl(d,"toString",(function(){return"[object Generator]"})),($l=function(){return{w:a,m:p}})()}function Wl(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Wl=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Wl(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Wl(e,t,n,r)}function Yl(e,t){this.v=e,this.k=t}function Hl(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Vl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ql(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ql(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ql(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Kl=function(e){var n,r=Vl((0,t.useState)(null),2),o=(r[0],r[1]),a=Vl((0,t.useState)([]),2),i=a[0],l=a[1];(0,t.useEffect)((function(){u()}),[]);var u=function(){var t,n=(t=Ll().mark((function t(){var n,r,a;return Ll().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(e.character),t.prev=1,t.next=4,mo.get(n);case 4:r=t.sent,a=r.data,l(a),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(1),o(t.t0);case 12:case"end":return t.stop()}}),t,null,[[1,9]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){Hl(a,r,o,i,l,"next",e)}function l(e){Hl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return n.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement("img",{src:null===(n=i.image)||void 0===n?void 0:n.medium}),t.createElement("p",null,i.name)))};function Zl(e){return Zl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zl(e)}function Xl(){var e=ou(),t=e.m(Xl),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Jl(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Xl=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new iu(e,t)},AsyncIterator:ru,async:function(e,t,n,o,i){return(r(t)?nu:tu)(a(e),t,n,o,i)},keys:eu,values:Jl}})()}function Jl(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Zl(e)+" is not iterable")}function eu(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function tu(e,t,n,r,o){var a=nu(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function nu(e,t,n,r,o){return new ru(ou().w(e,t,n,r),o||Promise)}function ru(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof iu?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(au(ru.prototype),au(ru.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),au(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function ou(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return au(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(au(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,au(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,au(d,"constructor",c),au(c,"constructor",u),u.displayName="GeneratorFunction",au(c,o,"GeneratorFunction"),au(d),au(d,o,"Generator"),au(d,r,(function(){return this})),au(d,"toString",(function(){return"[object Generator]"})),(ou=function(){return{w:a,m:p}})()}function au(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}au=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){au(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},au(e,t,n,r)}function iu(e,t){this.v=e,this.k=t}function lu(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function uu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cu(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const su=function(e){var n,r,o,a,i=uu((0,t.useState)(null),2),l=(i[0],i[1]),u=uu((0,t.useState)([]),2),c=(u[0],u[1],uu((0,t.useState)([]),2)),s=c[0],d=c[1],p=vt();(0,t.useEffect)((function(){f()}),[]);var f=function(){var t,n=(t=Xl().mark((function t(){var n,r,o;return Xl().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(e.show),t.prev=1,t.next=4,mo.get(n);case 4:r=t.sent,o=r.data,d(o),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(1),l(t.t0);case 12:case"end":return t.stop()}}),t,null,[[1,9]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){lu(a,r,o,i,l,"next",e)}function l(e){lu(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return n.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement("p",{className:"clickShow",onClick:function(){var e,t;e=s.id,t="/showDetails/".concat(e),p(t),window.scrollTo({top:0,behavior:"smooth"})}},s.name),t.createElement("p",null,s.premiered),t.createElement("ul",{className:"genres"},t.createElement("li",null,null===(n=s.genres)||void 0===n?void 0:n[0]),t.createElement("li",null,null===(r=s.genres)||void 0===r?void 0:r[1])),t.createElement("ul",{className:"genres"},t.createElement("li",null,null===(o=s.genres)||void 0===o?void 0:o[2]),t.createElement("li",null,null===(a=s.genres)||void 0===a?void 0:a[3]))))},du=function(e){var n,r=vt();return t.createElement(t.Fragment,null,t.createElement("div",{className:"sezoneList"},t.createElement("div",null,t.createElement("div",null,t.createElement("div",{className:"epTitle",onClick:function(){var t,n;t=e.guestCast._embedded.episode._links.show.name,n="/showClick/".concat(t),r(n),window.scrollTo({top:0,behavior:"smooth"})}},e.guestCast._embedded.episode._links.show.name),t.createElement("div",{className:"epNumber"},"S"+e.guestCast._embedded.episode.season+" E"+e.guestCast._embedded.episode.number)),t.createElement("div",null,t.createElement("p",{className:"epNumber"},e.guestCast._embedded.episode.name),t.createElement("p",{className:"airdate"},e.guestCast._embedded.episode.airdate))),t.createElement("div",null,t.createElement("p",null," ",t.createElement("img",{src:null===(n=e.guestCast._embedded.episode.image)||void 0===n?void 0:n.original,className:"imgSezons"})," ")),t.createElement("div",null,t.createElement("p",{className:"summEpis",dangerouslySetInnerHTML:{__html:e.guestCast._embedded.episode.summary}}))),t.createElement("div",{className:"hrGenre"}))};function pu(e){return(0,ae.Ay)("MuiPagination",e)}(0,W.A)("MuiPagination",["root","ul","outlined","text"]);var fu=o(7976);const mu=["boundaryCount","componentName","count","defaultPage","disabled","hideNextButton","hidePrevButton","onChange","page","showFirstButton","showLastButton","siblingCount"],hu=t.createContext();function vu(e){return(0,ae.Ay)("MuiPaginationItem",e)}const gu=(0,W.A)("MuiPaginationItem",["root","page","sizeSmall","sizeLarge","text","textPrimary","textSecondary","outlined","outlinedPrimary","outlinedSecondary","rounded","ellipsis","firstLast","previousNext","focusVisible","disabled","selected","icon","colorPrimary","colorSecondary"]);var yu=o(5003);const bu=(0,yu.A)((0,$.jsx)("path",{d:"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"}),"FirstPage"),Au=(0,yu.A)((0,$.jsx)("path",{d:"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"}),"LastPage"),xu=(0,yu.A)((0,$.jsx)("path",{d:"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}),"NavigateBefore"),wu=(0,yu.A)((0,$.jsx)("path",{d:"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}),"NavigateNext"),Cu=["className","color","component","components","disabled","page","selected","shape","size","slots","type","variant"],Su=(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`size${(0,de.A)(n.size)}`],"text"===n.variant&&t[`text${(0,de.A)(n.color)}`],"outlined"===n.variant&&t[`outlined${(0,de.A)(n.color)}`],"rounded"===n.shape&&t.rounded,"page"===n.type&&t.page,("start-ellipsis"===n.type||"end-ellipsis"===n.type)&&t.ellipsis,("previous"===n.type||"next"===n.type)&&t.previousNext,("first"===n.type||"last"===n.type)&&t.firstLast]},Eu=(0,B.Ay)("div",{name:"MuiPaginationItem",slot:"Root",overridesResolver:Su})((({theme:e,ownerState:t})=>(0,w.A)({},e.typography.body2,{borderRadius:16,textAlign:"center",boxSizing:"border-box",minWidth:32,padding:"0 6px",margin:"0 3px",color:(e.vars||e).palette.text.primary,height:"auto",[`&.${gu.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},"small"===t.size&&{minWidth:26,borderRadius:13,margin:"0 1px",padding:"0 4px"},"large"===t.size&&{minWidth:40,borderRadius:20,padding:"0 10px",fontSize:e.typography.pxToRem(15)}))),ku=(0,B.Ay)(se,{name:"MuiPaginationItem",slot:"Root",overridesResolver:Su})((({theme:e,ownerState:t})=>(0,w.A)({},e.typography.body2,{borderRadius:16,textAlign:"center",boxSizing:"border-box",minWidth:32,height:32,padding:"0 6px",margin:"0 3px",color:(e.vars||e).palette.text.primary,[`&.${gu.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${gu.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},transition:e.transitions.create(["color","background-color"],{duration:e.transitions.duration.short}),"&:hover":{backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${gu.selected}`]:{backgroundColor:(e.vars||e).palette.action.selected,"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,k.X4)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:(e.vars||e).palette.action.selected}},[`&.${gu.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,k.X4)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)},[`&.${gu.disabled}`]:{opacity:1,color:(e.vars||e).palette.action.disabled,backgroundColor:(e.vars||e).palette.action.selected}}},"small"===t.size&&{minWidth:26,height:26,borderRadius:13,margin:"0 1px",padding:"0 4px"},"large"===t.size&&{minWidth:40,height:40,borderRadius:20,padding:"0 10px",fontSize:e.typography.pxToRem(15)},"rounded"===t.shape&&{borderRadius:(e.vars||e).shape.borderRadius})),(({theme:e,ownerState:t})=>(0,w.A)({},"text"===t.variant&&{[`&.${gu.selected}`]:(0,w.A)({},"standard"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main,"&:hover":{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}},[`&.${gu.focusVisible}`]:{backgroundColor:(e.vars||e).palette[t.color].dark}},{[`&.${gu.disabled}`]:{color:(e.vars||e).palette.action.disabled}})},"outlined"===t.variant&&{border:e.vars?`1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:"1px solid "+("light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),[`&.${gu.selected}`]:(0,w.A)({},"standard"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:`1px solid ${e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:(0,k.X4)(e.palette[t.color].main,.5)}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.activatedOpacity})`:(0,k.X4)(e.palette[t.color].main,e.palette.action.activatedOpacity),"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,k.X4)(e.palette[t.color].main,e.palette.action.activatedOpacity+e.palette.action.focusOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${gu.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,k.X4)(e.palette[t.color].main,e.palette.action.activatedOpacity+e.palette.action.focusOpacity)}},{[`&.${gu.disabled}`]:{borderColor:(e.vars||e).palette.action.disabledBackground,color:(e.vars||e).palette.action.disabled}})}))),Bu=(0,B.Ay)("div",{name:"MuiPaginationItem",slot:"Icon",overridesResolver:(e,t)=>t.icon})((({theme:e,ownerState:t})=>(0,w.A)({fontSize:e.typography.pxToRem(20),margin:"0 -8px"},"small"===t.size&&{fontSize:e.typography.pxToRem(18)},"large"===t.size&&{fontSize:e.typography.pxToRem(22)}))),Mu=t.forwardRef((function(e,n){const r=(0,O.b)({props:e,name:"MuiPaginationItem"}),{className:o,color:a="standard",component:i,components:l={},disabled:u=!1,page:c,selected:s=!1,shape:d="circular",size:p="medium",slots:f={},type:m="page",variant:h="text"}=r,v=(0,x.A)(r,Cu),g=(0,w.A)({},r,{color:a,disabled:u,selected:s,shape:d,size:p,type:m,variant:h}),y=(()=>{const e=t.useContext(hu);return null!=e&&e})(),b=(e=>{const{classes:t,color:n,disabled:r,selected:o,size:a,shape:i,type:l,variant:u}=e,c={root:["root",`size${(0,de.A)(a)}`,u,i,"standard"!==n&&`color${(0,de.A)(n)}`,"standard"!==n&&`${u}${(0,de.A)(n)}`,r&&"disabled",o&&"selected",{page:"page",first:"firstLast",last:"firstLast","start-ellipsis":"ellipsis","end-ellipsis":"ellipsis",previous:"previousNext",next:"previousNext"}[l]],icon:["icon"]};return(0,E.A)(c,vu,t)})(g),A=(y?{previous:f.next||l.next||wu,next:f.previous||l.previous||xu,last:f.first||l.first||bu,first:f.last||l.last||Au}:{previous:f.previous||l.previous||xu,next:f.next||l.next||wu,first:f.first||l.first||bu,last:f.last||l.last||Au})[m];return"start-ellipsis"===m||"end-ellipsis"===m?(0,$.jsx)(Eu,{ref:n,ownerState:g,className:(0,C.A)(b.root,o),children:"…"}):(0,$.jsxs)(ku,(0,w.A)({ref:n,ownerState:g,component:i,disabled:u,className:(0,C.A)(b.root,o)},v,{children:["page"===m&&c,A?(0,$.jsx)(Bu,{as:A,ownerState:g,className:b.icon}):null]}))})),Ou=["boundaryCount","className","color","count","defaultPage","disabled","getItemAriaLabel","hideNextButton","hidePrevButton","onChange","page","renderItem","shape","showFirstButton","showLastButton","siblingCount","size","variant"],Nu=(0,B.Ay)("nav",{name:"MuiPagination",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant]]}})({}),Tu=(0,B.Ay)("ul",{name:"MuiPagination",slot:"Ul",overridesResolver:(e,t)=>t.ul})({display:"flex",flexWrap:"wrap",alignItems:"center",padding:0,margin:0,listStyle:"none"});function ju(e,t,n){return"page"===e?`${n?"":"Go to "}page ${t}`:`Go to ${e} page`}const _u=t.forwardRef((function(e,t){const n=(0,O.b)({props:e,name:"MuiPagination"}),{boundaryCount:r=1,className:o,color:a="standard",count:i=1,defaultPage:l=1,disabled:u=!1,getItemAriaLabel:c=ju,hideNextButton:s=!1,hidePrevButton:d=!1,renderItem:p=e=>(0,$.jsx)(Mu,(0,w.A)({},e)),shape:f="circular",showFirstButton:m=!1,showLastButton:h=!1,siblingCount:v=1,size:g="medium",variant:y="text"}=n,b=(0,x.A)(n,Ou),{items:A}=function(e={}){const{boundaryCount:t=1,componentName:n="usePagination",count:r=1,defaultPage:o=1,disabled:a=!1,hideNextButton:i=!1,hidePrevButton:l=!1,onChange:u,page:c,showFirstButton:s=!1,showLastButton:d=!1,siblingCount:p=1}=e,f=(0,x.A)(e,mu),[m,h]=(0,fu.A)({controlled:c,default:o,name:n,state:"page"}),v=(e,t)=>{c||h(t),u&&u(e,t)},g=(e,t)=>{const n=t-e+1;return Array.from({length:n},((t,n)=>e+n))},y=g(1,Math.min(t,r)),b=g(Math.max(r-t+1,t+1),r),A=Math.max(Math.min(m-p,r-t-2*p-1),t+2),C=Math.min(Math.max(m+p,t+2*p+2),b.length>0?b[0]-2:r-1),S=[...s?["first"]:[],...l?[]:["previous"],...y,...A>t+2?["start-ellipsis"]:t+1<r-t?[t+1]:[],...g(A,C),...C<r-t-1?["end-ellipsis"]:r-t>t?[r-t]:[],...b,...i?[]:["next"],...d?["last"]:[]],E=e=>{switch(e){case"first":return 1;case"previous":return m-1;case"next":return m+1;case"last":return r;default:return null}},k=S.map((e=>"number"==typeof e?{onClick:t=>{v(t,e)},type:"page",page:e,selected:e===m,disabled:a,"aria-current":e===m?"true":void 0}:{onClick:t=>{v(t,E(e))},type:e,page:E(e),selected:!1,disabled:a||-1===e.indexOf("ellipsis")&&("next"===e||"last"===e?m>=r:m<=1)}));return(0,w.A)({items:k},f)}((0,w.A)({},n,{componentName:"Pagination"})),S=(0,w.A)({},n,{boundaryCount:r,color:a,count:i,defaultPage:l,disabled:u,getItemAriaLabel:c,hideNextButton:s,hidePrevButton:d,renderItem:p,shape:f,showFirstButton:m,showLastButton:h,siblingCount:v,size:g,variant:y}),k=(e=>{const{classes:t,variant:n}=e,r={root:["root",n],ul:["ul"]};return(0,E.A)(r,pu,t)})(S);return(0,$.jsx)(Nu,(0,w.A)({"aria-label":"pagination navigation",className:(0,C.A)(k.root,o),ownerState:S,ref:t},b,{children:(0,$.jsx)(Tu,{className:k.ul,ownerState:S,children:A.map(((e,t)=>(0,$.jsx)("li",{children:p((0,w.A)({},e,{color:a,"aria-label":c(e.type,e.page,e.selected),shape:f,size:g,variant:y}))},t)))})}))}));function Pu(e){return Pu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Pu(e)}function zu(){var e=qu(),t=e.m(zu),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Du(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(zu=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new Gu(e,t)},AsyncIterator:Fu,async:function(e,t,n,o,i){return(r(t)?Iu:Lu)(a(e),t,n,o,i)},keys:Ru,values:Du}})()}function Du(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Pu(e)+" is not iterable")}function Ru(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Lu(e,t,n,r,o){var a=Iu(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Iu(e,t,n,r,o){return new Fu(qu().w(e,t,n,r),o||Promise)}function Fu(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof Gu?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Uu(Fu.prototype),Uu(Fu.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Uu(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function qu(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Uu(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Uu(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Uu(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Uu(d,"constructor",c),Uu(c,"constructor",u),u.displayName="GeneratorFunction",Uu(c,o,"GeneratorFunction"),Uu(d),Uu(d,o,"Generator"),Uu(d,r,(function(){return this})),Uu(d,"toString",(function(){return"[object Generator]"})),(qu=function(){return{w:a,m:p}})()}function Uu(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Uu=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Uu(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Uu(e,t,n,r)}function Gu(e,t){this.v=e,this.k=t}function $u(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Wu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Yu(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Yu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Hu=function(){var e,n,r=Wu((0,t.useState)(null),2),o=(r[0],r[1]),a=Wu((0,t.useState)([]),2),i=a[0],l=a[1],u=Wu((0,t.useState)([]),2),c=u[0],s=u[1],d=Wu((0,t.useState)([]),2),p=d[0],f=d[1],m=Wu((0,t.useState)(!0),2),h=m[0],v=m[1],g=Wu((0,t.useState)(1),2),y=g[0],b=g[1],A=Wu((0,t.useState)(),2),x=A[0],w=A[1],C=gt().actorId;(0,t.useEffect)((function(){S()}),[]);var S=function(){var e,t=(e=zu().mark((function e(){var t,n,r,a,i,u,c,d;return zu().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=" https://api.tvmaze.com/people/".concat(C,"?embed=castcredits"),n="https://api.tvmaze.com/people/".concat(C,"/crewcredits"),r="https://api.tvmaze.com/people/".concat(C,"/guestcastcredits?embed=episode"),e.prev=3,e.next=6,mo.get(t);case 6:return a=e.sent,e.next=9,mo.get(n);case 9:return i=e.sent,e.next=12,mo.get(r);case 12:u=e.sent,c=a.data,i.data,d=u.data,l(c),s(c._embedded.castcredits),f(d),v(!1),w(c.length),e.next=26;break;case 23:e.prev=23,e.t0=e.catch(3),o(e.t0);case 26:case"end":return e.stop()}}),e,null,[[3,23]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){$u(a,r,o,i,l,"next",e)}function l(e){$u(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),E=function(e,t){var n=Math.ceil(e.length/t);return Array.from({length:n},(function(n,r){return e.slice(r*t,(r+1)*t)}))}(p,8),k=E[y-1];return h?t.createElement(So,null):0==x?t.createElement("div",{className:"showMain"},t.createElement("br",null),t.createElement("h3",null,"Nothing found")):t.createElement(t.Fragment,null,t.createElement("div",{className:"details"},t.createElement("div",{className:"holdImg"},t.createElement("img",{className:"imgShow",src:null===(e=i.image)||void 0===e?void 0:e.original})),t.createElement("table",null,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"showName"},i.name)),t.createElement("tr",null,t.createElement("td",{className:"language"},null===(n=i.country)||void 0===n?void 0:n.name),t.createElement("td",null,i.gender)),t.createElement("tr",null,t.createElement("td",{className:"language"},i.birthday),t.createElement("td",{className:"language"},i.deathday)),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("a",{href:i.url,target:"_blank"},"TvMaze"))),t.createElement("tr",{className:"showCast"},t.createElement("td",null,"Show name"),t.createElement("td",null,"Cast")),c.map((function(e,n){return t.createElement("tr",{key:n},t.createElement("td",{className:"borderBotom"},t.createElement(su,{show:e._links.show.href})),t.createElement("td",{className:"borderBotom"},t.createElement(Kl,{character:e._links.character.href})))}))))),t.createElement("div",null,t.createElement("p",{className:"guestCast"},"Guest Cast")),t.createElement(Ka,null,E.length>1&&t.createElement(Ka,{mt:2,display:"flex",justifyContent:"center",className:"guestCast"},t.createElement(_u,{color:"primary",count:E.length,page:y,siblingCount:0,onChange:function(e,t){return b(t)}})),t.createElement("div",null,k&&k.map((function(e,n){return t.createElement(du,{key:n,guestCast:e})}))),E.length>1&&t.createElement(Ka,{mt:2,display:"flex",justifyContent:"center",className:"guestCast"},t.createElement(_u,{color:"primary",count:E.length,page:y,siblingCount:0,onChange:function(e,t){b(t),document.querySelector(".guestCast").scrollIntoView({behavior:"smooth"})}}))),t.createElement(go,null))},Vu=function(){return t.createElement("div",{className:"place"},t.createElement("div",{className:"placeBut"},t.createElement(Ba,{placeholder:"Tv Show & Actor",linkTo:"/tvShow"}),t.createElement(Ma,{placeholder:"Movies",linkTo:"/movies"})))},Qu=function(){return t.createElement(t.Fragment,null,t.createElement(Vu,null),t.createElement("div",{className:"searchMain"},t.createElement("p",null,"Search TV show, actors and movies.",t.createElement("br",null),"You can download movies via torrent")))};function Ku(e){return Ku="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ku(e)}function Zu(){var e=rc(),t=e.m(Zu),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Xu(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Zu=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new ac(e,t)},AsyncIterator:nc,async:function(e,t,n,o,i){return(r(t)?tc:ec)(a(e),t,n,o,i)},keys:Ju,values:Xu}})()}function Xu(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Ku(e)+" is not iterable")}function Ju(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function ec(e,t,n,r,o){var a=tc(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function tc(e,t,n,r,o){return new nc(rc().w(e,t,n,r),o||Promise)}function nc(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof ac?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(oc(nc.prototype),oc(nc.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),oc(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function rc(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return oc(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(oc(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,oc(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,oc(d,"constructor",c),oc(c,"constructor",u),u.displayName="GeneratorFunction",oc(c,o,"GeneratorFunction"),oc(d),oc(d,o,"Generator"),oc(d,r,(function(){return this})),oc(d,"toString",(function(){return"[object Generator]"})),(rc=function(){return{w:a,m:p}})()}function oc(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}oc=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){oc(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},oc(e,t,n,r)}function ac(e,t){this.v=e,this.k=t}function ic(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function lc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return uc(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?uc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function uc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const cc=function(e){var n,r,o,a,i,l,u=lc((0,t.useState)(null),2),c=(u[0],u[1]),s=lc((0,t.useState)([]),2),d=s[0],p=s[1],f=lc((0,t.useState)([]),2),m=f[0],h=f[1],v=vt(),g=e.showId;(0,t.useEffect)((function(){y(g)}),[g]);var y=function(){var e,t=(e=Zu().mark((function e(t){var n,r,o,a,i,l;return Zu().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="https://api.tvmaze.com/shows/".concat(t,"?embed=cast"),r="https://api.tvmaze.com/shows/".concat(t,"/seasons"),e.prev=2,e.next=5,mo.get(n);case 5:return o=e.sent,e.next=8,mo.get(r);case 8:a=e.sent,i=o.data,l=a.data.reverse(),p(i._embedded.cast),h(l),e.next=18;break;case 15:e.prev=15,e.t0=e.catch(2),c(e.t0);case 18:case"end":return e.stop()}}),e,null,[[2,15]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ic(a,r,o,i,l,"next",e)}function l(e){ic(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),b={dots:!1,infinite:!0,slidesToShow:2,slidesToScroll:1,autoplay:!0,speed:1e3,autoplaySpeed:2500,cssEase:"linear"},A=function(e){var t="/actorDetails/".concat(e);v(t)};return t.createElement(t.Fragment,null,d&&(1==d.length?t.createElement("div",{className:"sliderDiv"},t.createElement("table",null,t.createElement("tbody",null,t.createElement("tr",null,(null===(n=d[0].person)||void 0===n||null===(n=n.image)||void 0===n?void 0:n.medium)&&t.createElement("td",null," ",t.createElement("img",{className:"imageActor",src:null===(r=d[0].person)||void 0===r||null===(r=r.image)||void 0===r?void 0:r.medium,alt:"no picture",onClick:function(){A(d[0].person.id),window.scrollTo({top:0,behavior:"smooth"})}})),(null===(o=d[0].character)||void 0===o||null===(o=o.image)||void 0===o?void 0:o.medium)&&t.createElement("td",null,"  ",t.createElement("img",{src:null===(a=d[0].character)||void 0===a||null===(a=a.image)||void 0===a?void 0:a.medium,alt:"no picture",className:"imageCaracter"}))),t.createElement("tr",null,t.createElement("td",null,"   ",t.createElement("p",{className:"clickActor",onClick:function(){A(d[0].person.id),window.scrollTo({top:0,behavior:"smooth"})}},null===(i=d[0].person)||void 0===i?void 0:i.name)),t.createElement("td",null," ",t.createElement("p",null,null===(l=d[0].character)||void 0===l?void 0:l.name)),t.createElement("td",null))))):0==d.length?t.createElement("div",{className:"sliderDiv",style:{textAlign:"center"}},"No cast data available"):t.createElement("div",{className:"sliderDiv"},t.createElement(hi.A,b,d.map((function(e){var n,r,o,a,i,l;return t.createElement("table",{key:e.character.id},t.createElement("tbody",null,t.createElement("tr",null,(null===(n=e.person)||void 0===n||null===(n=n.image)||void 0===n?void 0:n.medium)&&t.createElement("td",null," ",t.createElement("img",{className:"imageActor",src:null===(r=e.person)||void 0===r||null===(r=r.image)||void 0===r?void 0:r.medium,alt:"no picture",onClick:function(){A(e.person.id),window.scrollTo({top:0,behavior:"smooth"})}})),(null===(o=e.character)||void 0===o||null===(o=o.image)||void 0===o?void 0:o.medium)&&t.createElement("td",null,"  ",t.createElement("img",{src:null===(a=e.character)||void 0===a||null===(a=a.image)||void 0===a?void 0:a.medium,alt:"no picture",className:"imageCaracter"})),t.createElement("td",{className:"vertical"})),t.createElement("tr",null,t.createElement("td",null,"   ",t.createElement("p",{className:"clickActor",onClick:function(){A(e.person.id),window.scrollTo({top:0,behavior:"smooth"})}},null===(i=e.person)||void 0===i?void 0:i.name)),t.createElement("td",null," ",t.createElement("p",null,null===(l=e.character)||void 0===l?void 0:l.name)),t.createElement("td",null))))}))))),t.createElement(_i,{sezone:m}),t.createElement(go,null))};function sc(e){return sc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sc(e)}function dc(){var e=gc(),t=e.m(dc),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,pc(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(dc=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new bc(e,t)},AsyncIterator:vc,async:function(e,t,n,o,i){return(r(t)?hc:mc)(a(e),t,n,o,i)},keys:fc,values:pc}})()}function pc(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(sc(e)+" is not iterable")}function fc(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function mc(e,t,n,r,o){var a=hc(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function hc(e,t,n,r,o){return new vc(gc().w(e,t,n,r),o||Promise)}function vc(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof bc?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(yc(vc.prototype),yc(vc.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),yc(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function gc(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return yc(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(yc(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,yc(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,yc(d,"constructor",c),yc(c,"constructor",u),u.displayName="GeneratorFunction",yc(c,o,"GeneratorFunction"),yc(d),yc(d,o,"Generator"),yc(d,r,(function(){return this})),yc(d,"toString",(function(){return"[object Generator]"})),(gc=function(){return{w:a,m:p}})()}function yc(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}yc=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){yc(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},yc(e,t,n,r)}function bc(e,t){this.v=e,this.k=t}function Ac(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function xc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return wc(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Cc=function(e){var n=xc((0,t.useState)(null),2),r=(n[0],n[1]),o=xc((0,t.useState)([]),2),a=o[0],i=o[1],l=e.showId;(0,t.useEffect)((function(){u(l)}),[l]);var u=function(){var e,t=(e=dc().mark((function e(t){var n,o,a;return dc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="https://api.tvmaze.com/shows/".concat(t,"/seasons"),e.prev=1,e.next=4,mo.get(n);case 4:o=e.sent,a=o.data.reverse(),i(a),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),r(e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ac(a,r,o,i,l,"next",e)}function l(e){Ac(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),c=function(e){if(null==e)return"average"};return t.createElement(t.Fragment,null,t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("div",{className:"sezone"},a.map((function(e){return t.createElement("div",{key:e.id},t.createElement("p",null,"Sezone: "+e.number+" "),t.createElement("p",{className:"rating ".concat(c(e.episodeOrder))}," Episode: "+e.episodeOrder))}))))))};function Sc(e){return Sc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Sc(e)}function Ec(){var e=Tc(),t=e.m(Ec),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,kc(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Ec=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new _c(e,t)},AsyncIterator:Nc,async:function(e,t,n,o,i){return(r(t)?Oc:Mc)(a(e),t,n,o,i)},keys:Bc,values:kc}})()}function kc(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Sc(e)+" is not iterable")}function Bc(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Mc(e,t,n,r,o){var a=Oc(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Oc(e,t,n,r,o){return new Nc(Tc().w(e,t,n,r),o||Promise)}function Nc(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof _c?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(jc(Nc.prototype),jc(Nc.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),jc(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Tc(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return jc(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(jc(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,jc(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,jc(d,"constructor",c),jc(c,"constructor",u),u.displayName="GeneratorFunction",jc(c,o,"GeneratorFunction"),jc(d),jc(d,o,"Generator"),jc(d,r,(function(){return this})),jc(d,"toString",(function(){return"[object Generator]"})),(Tc=function(){return{w:a,m:p}})()}function jc(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}jc=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){jc(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},jc(e,t,n,r)}function _c(e,t){this.v=e,this.k=t}function Pc(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function zc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Dc(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Dc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Rc=function(){var e,n,r,o,a,i,l,u,c,s=zc((0,t.useState)([]),2),d=s[0],p=s[1],f=zc((0,t.useState)(!0),2),m=f[0],h=f[1],v=vt(),g=gt().showId;(0,t.useEffect)((function(){y()}),[]);var y=function(){var e,t=(e=Ec().mark((function e(){var t,n,r;return Ec().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.tvmaze.com/singlesearch/shows?q=".concat(g),e.prev=1,e.next=4,mo.get(t);case 4:n=e.sent,r=n.data,p(r),h(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),setError(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Pc(a,r,o,i,l,"next",e)}function l(e){Pc(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),b=function(e){if(null==e)return"average"},A=function(e){if(null==e)return"average"};return m?t.createElement(So,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"details"},t.createElement("div",{className:"holdImg"},t.createElement("img",{className:"imgShow",src:null===(e=d.image)||void 0===e?void 0:e.original})),t.createElement("table",null,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"showName"},d.name)),t.createElement("tr",null,t.createElement("td",{className:"language"},d.type),t.createElement("td",null,d.genres&&t.createElement(t.Fragment,null,d.genres.map((function(e,n){return t.createElement("p",{key:n},e)}))))),t.createElement("tr",null,t.createElement("td",{className:"language"},d.language),t.createElement("td",{className:"runtime"},t.createElement("p",{className:"rating2 ".concat(function(e){if(null==e)return"average"}(d.runtime))}," ⏲ "+d.runtime+" min   "),t.createElement("p",{className:"rating ".concat(function(e){if(null==e)return"average"}(null===(n=d.rating)||void 0===n?void 0:n.average))},"  ⭐ "+(null===(r=d.rating)||void 0===r?void 0:r.average)+" "))),t.createElement(Cc,{showId:d.id}),t.createElement("tr",null,t.createElement("td",{className:"rating3"},"Premiered:"," "+d.premiered),t.createElement("td",{className:"rating3 ".concat(function(e){if(null==e)return"average"}(d.ended))},"Ended: "+d.ended)),t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"summary",dangerouslySetInnerHTML:{__html:d.summary}})),t.createElement("tr",null,t.createElement("td",{className:"rating3 ".concat(b(null===(o=d.webChannel)||void 0===o?void 0:o.name))},"Web Chanel",t.createElement("a",{href:null===(a=d.webChannel)||void 0===a?void 0:a.officialSite,target:"_blank",className:"rating3 ".concat(b(null===(i=d.webChannel)||void 0===i?void 0:i.name))}," "+(null===(l=d.webChannel)||void 0===l?void 0:l.name))),t.createElement("td",{className:"rating3 ".concat(A(null===(u=d.network)||void 0===u?void 0:u.name))},t.createElement("a",{href:null==d?void 0:d.officialSite,target:"_blank",className:"rating3 ".concat(A(null===(c=d.network)||void 0===c?void 0:c.name))},"Official Site"))),t.createElement("tr",null,t.createElement(qo,{datum:d.updated}),t.createElement("td",{style:{verticalAlign:"top"}},t.createElement("p",{className:"more",onClick:function(){var e,t;e=d.id,t="/imgShow/".concat(e),v(t),window.scrollTo({top:0,behavior:"smooth"})}},"MORE PICTURE")))))),t.createElement(cc,{showId:d.id}))},Lc=JSON.parse('[{"title":"Action"},{"title":"Adventure"},{"title":"Animation"},{"title":"Comedy"},{"title":"Crime"},{"title":"Documentary"},{"title":"Drama"},{"title":"Family"},{"title":"Fantasy"},{"title":"Horror"},{"title":"Music"},{"title":"Musical"},{"title":"Mystery"},{"title":"Romance"},{"title":"Sci-Fi"},{"title":"Sport"},{"title":"Thriller"},{"title":"Western"}]'),Ic=function(){var e=new Date,n=e.getDay(),r=e.getDate(),o=e.getMonth()+1,a=e.getFullYear();return 1==n?n="Мonday":2==n?n="Tuesday":3==n?n="Wednesday":4==n?n="Thursday":5==n?n="Friday":6==n?n="Saturday":7==n&&(n="Sunday"),r<10&&(r="0"+r),o<10&&(o="0"+o),t.createElement(t.Fragment,null,a)};function Fc(e){return Fc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fc(e)}function qc(){var e=Hc(),t=e.m(qc),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Uc(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(qc=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new Qc(e,t)},AsyncIterator:Yc,async:function(e,t,n,o,i){return(r(t)?Wc:$c)(a(e),t,n,o,i)},keys:Gc,values:Uc}})()}function Uc(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Fc(e)+" is not iterable")}function Gc(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function $c(e,t,n,r,o){var a=Wc(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Wc(e,t,n,r,o){return new Yc(Hc().w(e,t,n,r),o||Promise)}function Yc(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof Qc?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Vc(Yc.prototype),Vc(Yc.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Vc(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Hc(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Vc(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Vc(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Vc(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Vc(d,"constructor",c),Vc(c,"constructor",u),u.displayName="GeneratorFunction",Vc(c,o,"GeneratorFunction"),Vc(d),Vc(d,o,"Generator"),Vc(d,r,(function(){return this})),Vc(d,"toString",(function(){return"[object Generator]"})),(Hc=function(){return{w:a,m:p}})()}function Vc(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Vc=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Vc(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Vc(e,t,n,r)}function Qc(e,t){this.v=e,this.k=t}function Kc(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Zc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Xc(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Xc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Jc=function(){var e=Zc((0,t.useState)([]),2),n=e[0],r=e[1],o=Zc((0,t.useState)(1),2),a=o[0],i=o[1],l=Zc((0,t.useState)(0),2),u=l[0],c=l[1],s=Zc((0,t.useState)(!0),2),d=s[0],p=s[1],f=vt();(0,t.useEffect)((function(){m(a)}),[a]);var m=function(){var e,t=(e=qc().mark((function e(t){var n,o;return qc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://yts.mx/api/v2/list_movies.json?limit=".concat(10,"&page=").concat(t));case 2:return n=e.sent,e.next=5,n.json();case 5:o=e.sent,r(o.data.movies),c(o.data.movie_count),p(!1);case 9:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Kc(a,r,o,i,l,"next",e)}function l(e){Kc(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),h=Math.ceil(u/10),v=function(e){var t="/categ/".concat(e);f(t)};return d?t.createElement(t.Fragment,null,t.createElement("div",{className:"movieGenre"},Lc.map((function(e,n){return t.createElement("div",{key:n,className:"genreName",onClick:function(){return v(e.title)}},e.title)}))),t.createElement(So,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"movieGenre",style:{paddingTop:"60px",paddingLeft:"25px"}},t.createElement("p",{className:"timeGenre"},"Movies ",t.createElement(Eo,null)),t.createElement("p",{className:"genreName",onClick:function(){f("/rating")}},"Rating"),t.createElement("p",{className:"genreName",onClick:function(){f("/year")}},t.createElement(Ic,null))),t.createElement("div",{className:"movieGenre"},Lc.map((function(e,n){return t.createElement("div",{key:n,className:"genreName",onClick:function(){return v(e.title)}},e.title)}))),t.createElement("div",{className:"hrGenre"}),t.createElement("div",{className:"movieMain"},n.map((function(e){return t.createElement("div",{key:e.id,className:"holder"},t.createElement("div",{className:"dropdownM"},t.createElement("div",null,t.createElement("img",{src:e.medium_cover_image,alt:"",className:"dropImg"})),t.createElement("span",{className:"dropdown-contentM"},e.genres&&t.createElement(t.Fragment,null,e.genres.map((function(e,n){return t.createElement("p",{key:n},e)}))),t.createElement("p",{style:{paddingTop:"15px"}}," ⏲",e.runtime," min ⭐",e.rating))),t.createElement("div",{onClick:function(){var t,n;t=e.id,n="/movieDetails/".concat(t),f(n),window.scrollTo({top:0,behavior:"smooth"})},className:"titleLong"},e.title_long))}))),t.createElement("div",{className:"movieNum"},Array.from({length:h},(function(e,n){return t.createElement("div",{className:a===n+1?"numbAct":"numb",key:n+1,onClick:function(){i(n+1),window.scrollTo({top:0,behavior:"smooth"})},disabled:n+1===a},n+1)}))),t.createElement(go,null))};var es=o(6067),ts=o.n(es);function ns(e){return ns="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ns(e)}function rs(){var e=cs(),t=e.m(rs),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,os(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(rs=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new ds(e,t)},AsyncIterator:us,async:function(e,t,n,o,i){return(r(t)?ls:is)(a(e),t,n,o,i)},keys:as,values:os}})()}function os(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(ns(e)+" is not iterable")}function as(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function is(e,t,n,r,o){var a=ls(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function ls(e,t,n,r,o){return new us(cs().w(e,t,n,r),o||Promise)}function us(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof ds?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(ss(us.prototype),ss(us.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),ss(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function cs(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return ss(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(ss(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,ss(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,ss(d,"constructor",c),ss(c,"constructor",u),u.displayName="GeneratorFunction",ss(c,o,"GeneratorFunction"),ss(d),ss(d,o,"Generator"),ss(d,r,(function(){return this})),ss(d,"toString",(function(){return"[object Generator]"})),(cs=function(){return{w:a,m:p}})()}function ss(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}ss=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){ss(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},ss(e,t,n,r)}function ds(e,t){this.v=e,this.k=t}function ps(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function fs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ms(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ms(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ms(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const hs=function(e){var n=fs((0,t.useState)([]),2),r=n[0],o=n[1],a=fs((0,t.useState)(null),2),i=(a[0],a[1]),l=fs((0,t.useState)(!1),2),u=l[0],c=l[1],s=e.number;(0,t.useEffect)((function(){d()}),[s]);var d=function(){var e,t=(e=rs().mark((function e(){var t,n,r;return rs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.omdbapi.com/?i=".concat(s,"&apikey=f91358c4&plot=full"),e.prev=1,e.next=4,mo.get(t);case 4:n=e.sent,r=n.data,o(r),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),i(e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ps(a,r,o,i,l,"next",e)}function l(e){ps(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("div",null,r.Country&&t.createElement("div",{className:"writer ".concat(function(e){if("N/A"==e)return"average"}(r.Country))},"Country: ",r.Country),r.Language&&t.createElement("div",{className:"writer ".concat(function(e){if("N/A"==e)return"average"}(r.Language))},"Language: ",r.Language),r.Plot&&t.createElement("div",{style:{padding:"5px",backgroundColor:"#2D3250"}},t.createElement("p",{className:"review"},u?ts().decode(r.Plot):ts().decode(r.Plot).substring(0,150)+"... ",t.createElement("span",{className:"moreLink",onClick:function(){return c(!u)}},u?" show less":" show more"))),r.Director&&t.createElement("div",{className:"writer ".concat(function(e){if("N/A"==e)return"average"}(r.Director))}," Director: ",r.Director),r.Writer&&t.createElement("div",{className:"writer ".concat(function(e){if("N/A"==e)return"average"}(r.Writer))},"Writer: ",r.Writer),r.Awards&&t.createElement("div",{className:"writer ".concat(function(e){if("N/A"==e)return"average"}(r.Awards))},"Awards: ",r.Awards),r.imdbRating&&t.createElement("div",{className:"writer ".concat(function(e){if("N/A"==e)return"average"}(r.imdbRating))},"IMDB rating: ",r.imdbRating+" ","- Votes: ",r.imdbVotes),r.BoxOffice&&t.createElement("div",{className:"office ".concat(function(e){if("N/A"==e)return"average"}(r.BoxOffice))},"BoxOffice: ",r.BoxOffice)))};function vs(e){return vs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vs(e)}function gs(){var e=Cs(),t=e.m(gs),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,ys(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(gs=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new Es(e,t)},AsyncIterator:ws,async:function(e,t,n,o,i){return(r(t)?xs:As)(a(e),t,n,o,i)},keys:bs,values:ys}})()}function ys(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(vs(e)+" is not iterable")}function bs(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function As(e,t,n,r,o){var a=xs(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function xs(e,t,n,r,o){return new ws(Cs().w(e,t,n,r),o||Promise)}function ws(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof Es?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Ss(ws.prototype),Ss(ws.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Ss(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Cs(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Ss(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Ss(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Ss(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Ss(d,"constructor",c),Ss(c,"constructor",u),u.displayName="GeneratorFunction",Ss(c,o,"GeneratorFunction"),Ss(d),Ss(d,o,"Generator"),Ss(d,r,(function(){return this})),Ss(d,"toString",(function(){return"[object Generator]"})),(Cs=function(){return{w:a,m:p}})()}function Ss(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Ss=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Ss(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Ss(e,t,n,r)}function Es(e,t){this.v=e,this.k=t}function ks(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Bs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ms(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ms(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ms(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Os=function(e){var n=Bs((0,t.useState)([]),2),r=n[0],o=n[1],a=Bs((0,t.useState)(null),2),i=(a[0],a[1]),l=e.number;(0,t.useEffect)((function(){u()}),[l]);var u=function(){var e,t=(e=gs().mark((function e(){var t,n,r;return gs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.omdbapi.com/?i=".concat(l,"&apikey=f91358c4"),e.prev=1,e.next=4,mo.get(t);case 4:n=e.sent,r=n.data,o(r),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),i(e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ks(a,r,o,i,l,"next",e)}function l(e){ks(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("img",{src:r.Poster,alt:" ",className:"dropImg"}))};function Ns(e){return Ns="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ns(e)}function Ts(){var e=Rs(),t=e.m(Ts),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,js(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Ts=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new Is(e,t)},AsyncIterator:Ds,async:function(e,t,n,o,i){return(r(t)?zs:Ps)(a(e),t,n,o,i)},keys:_s,values:js}})()}function js(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Ns(e)+" is not iterable")}function _s(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Ps(e,t,n,r,o){var a=zs(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function zs(e,t,n,r,o){return new Ds(Rs().w(e,t,n,r),o||Promise)}function Ds(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof Is?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Ls(Ds.prototype),Ls(Ds.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Ls(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Rs(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Ls(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Ls(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Ls(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Ls(d,"constructor",c),Ls(c,"constructor",u),u.displayName="GeneratorFunction",Ls(c,o,"GeneratorFunction"),Ls(d),Ls(d,o,"Generator"),Ls(d,r,(function(){return this})),Ls(d,"toString",(function(){return"[object Generator]"})),(Rs=function(){return{w:a,m:p}})()}function Ls(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Ls=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Ls(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Ls(e,t,n,r)}function Is(e,t){this.v=e,this.k=t}function Fs(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function qs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Us(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Us(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Us(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Gs=function(e){var n=qs((0,t.useState)([]),2),r=n[0],o=n[1],a=qs((0,t.useState)(null),2),i=(a[0],a[1]),l=e.number;(0,t.useEffect)((function(){u()}),[l]);var u=function(){var e,t=(e=Ts().mark((function e(){var t,n,r;return Ts().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://www.omdbapi.com/?i=".concat(l,"&apikey=f91358c4&plot=full"),e.prev=1,e.next=4,mo.get(t);case 4:n=e.sent,r=n.data,o(r),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),i(e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Fs(a,r,o,i,l,"next",e)}function l(e){Fs(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,r.Released&&t.createElement("span",{className:"writer ".concat(function(e){if("N/A"==e)return"average"}(r.Released))},"Released: ",r.Released))};var $s=o(9520);function Ws(e){return Ws="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ws(e)}function Ys(){var e=Xs(),t=e.m(Ys),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Hs(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Ys=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new ed(e,t)},AsyncIterator:Zs,async:function(e,t,n,o,i){return(r(t)?Ks:Qs)(a(e),t,n,o,i)},keys:Vs,values:Hs}})()}function Hs(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Ws(e)+" is not iterable")}function Vs(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Qs(e,t,n,r,o){var a=Ks(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Ks(e,t,n,r,o){return new Zs(Xs().w(e,t,n,r),o||Promise)}function Zs(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof ed?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Js(Zs.prototype),Js(Zs.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Js(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Xs(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Js(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Js(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Js(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Js(d,"constructor",c),Js(c,"constructor",u),u.displayName="GeneratorFunction",Js(c,o,"GeneratorFunction"),Js(d),Js(d,o,"Generator"),Js(d,r,(function(){return this})),Js(d,"toString",(function(){return"[object Generator]"})),(Xs=function(){return{w:a,m:p}})()}function Js(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Js=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Js(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Js(e,t,n,r)}function ed(e,t){this.v=e,this.k=t}function td(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function nd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return rd(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?rd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const od=function(e){var n=nd((0,t.useState)(null),2),r=(n[0],n[1]),o=nd((0,t.useState)([]),2),a=o[0],i=o[1],l=nd((0,t.useState)([]),2),u=l[0],c=l[1],s=vt(),d=e.actor;(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Ys().mark((function e(){var t,n,o;return Ys().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t='https://api.tvmaze.com/search/people?q="'.concat(d,'"'),e.prev=1,e.next=4,mo.get(t);case 4:n=e.sent,o=n.data,i(o),c(o.length),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),r(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){td(a,r,o,i,l,"next",e)}function l(e){td(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return 0==u?t.createElement(t.Fragment,null,t.createElement("p",{className:"actorNoPic"},d)):t.createElement(t.Fragment,null,t.createElement("p",{colSpan:2,className:"actorName",onClick:function(){var e,t;e=null==a?void 0:a[0].person.id,t="/actorDetails/".concat(e),s(t),window.scrollTo({top:0,behavior:"smooth"})}},d))};function ad(e){return ad="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ad(e)}function id(){var e=pd(),t=e.m(id),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,ld(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(id=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new md(e,t)},AsyncIterator:dd,async:function(e,t,n,o,i){return(r(t)?sd:cd)(a(e),t,n,o,i)},keys:ud,values:ld}})()}function ld(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(ad(e)+" is not iterable")}function ud(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function cd(e,t,n,r,o){var a=sd(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function sd(e,t,n,r,o){return new dd(pd().w(e,t,n,r),o||Promise)}function dd(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof md?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(fd(dd.prototype),fd(dd.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),fd(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function pd(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return fd(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(fd(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,fd(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,fd(d,"constructor",c),fd(c,"constructor",u),u.displayName="GeneratorFunction",fd(c,o,"GeneratorFunction"),fd(d),fd(d,o,"Generator"),fd(d,r,(function(){return this})),fd(d,"toString",(function(){return"[object Generator]"})),(pd=function(){return{w:a,m:p}})()}function fd(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}fd=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){fd(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},fd(e,t,n,r)}function md(e,t){this.v=e,this.k=t}function hd(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function vd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return gd(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const yd=function(e){var n,r=vd((0,t.useState)([]),2),o=r[0],a=r[1],i=vd((0,t.useState)([]),2),l=(i[0],i[1],vd((0,t.useState)(null),2)),u=(l[0],l[1]),c=vd((0,t.useState)("largeImg"),2),s=(c[0],c[1],vd((0,t.useState)(null),2)),d=s[0],p=s[1];(0,t.useEffect)((function(){f()}),[]);var f=function(){var t,n=(t=id().mark((function t(){var n,r,o;return id().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="https://imdb.iamidiotareyoutoo.com/search?tt=".concat(e.imdbId),t.prev=1,t.next=4,mo.get(n);case 4:r=t.sent,o=r.data,r.data.main.titleMainImages.edges,a(o),t.next=13;break;case 10:t.prev=10,t.t0=t.catch(1),u(t.t0);case 13:case"end":return t.stop()}}),t,null,[[1,10]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){hd(a,r,o,i,l,"next",e)}function l(e){hd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return n.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("div",{className:"character-grid"},null===(n=o.main)||void 0===n?void 0:n.cast.edges.map((function(e,n){var r,o,a,i,l,u,c,s=null==e||null===(r=e.node)||void 0===r||null===(r=r.name)||void 0===r||null===(r=r.primaryImage)||void 0===r?void 0:r.url;return t.createElement("div",{key:n,className:"character-item"},t.createElement("img",{src:s||"fallback.png",alt:(null==e||null===(o=e.node)||void 0===o||null===(o=o.name)||void 0===o||null===(o=o.nameText)||void 0===o?void 0:o.text)||"unknown",className:"avatar-img",onClick:function(){return s&&void p(s)},onError:function(e){e.target.src.includes("fallback.png")||(e.target.src="fallback.png")}}),t.createElement("div",null,t.createElement(od,{actor:null===(a=e.node)||void 0===a||null===(a=a.name.nameText)||void 0===a?void 0:a.text}),(null===(i=e.node.characters)||void 0===i||null===(i=i[0])||void 0===i?void 0:i.name)&&t.createElement("p",null," as ",null===(l=e.node.characters)||void 0===l||null===(l=l[0])||void 0===l?void 0:l.name),(null===(u=e.node.characters)||void 0===u||null===(u=u[1])||void 0===u?void 0:u.name)&&t.createElement("p",null," aka ",null===(c=e.node.characters)||void 0===c||null===(c=c[1])||void 0===c?void 0:c.name)))}))),d&&t.createElement("div",{className:"lightbox",onClick:function(){return p(null)}},t.createElement("img",{src:d,alt:"",className:"lightbox-img"})))};function bd(e){return bd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bd(e)}function Ad(){var e=kd(),t=e.m(Ad),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,xd(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Ad=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new Md(e,t)},AsyncIterator:Ed,async:function(e,t,n,o,i){return(r(t)?Sd:Cd)(a(e),t,n,o,i)},keys:wd,values:xd}})()}function xd(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(bd(e)+" is not iterable")}function wd(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Cd(e,t,n,r,o){var a=Sd(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Sd(e,t,n,r,o){return new Ed(kd().w(e,t,n,r),o||Promise)}function Ed(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof Md?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Bd(Ed.prototype),Bd(Ed.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Bd(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function kd(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Bd(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Bd(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Bd(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Bd(d,"constructor",c),Bd(c,"constructor",u),u.displayName="GeneratorFunction",Bd(c,o,"GeneratorFunction"),Bd(d),Bd(d,o,"Generator"),Bd(d,r,(function(){return this})),Bd(d,"toString",(function(){return"[object Generator]"})),(kd=function(){return{w:a,m:p}})()}function Bd(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Bd=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Bd(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Bd(e,t,n,r)}function Md(e,t){this.v=e,this.k=t}function Od(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Nd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Td(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Td(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Td(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const jd=function(e){var n,r,o,a,i,l,u,c,s,d,p,f=Nd((0,t.useState)([]),2),m=f[0],h=f[1],v=Nd((0,t.useState)(null),2),g=(v[0],v[1]),y=Nd((0,t.useState)(!1),2),b=y[0],A=y[1];(0,t.useEffect)((function(){x()}),[]);var x=function(){var t,n=(t=Ad().mark((function t(){var n,r,o;return Ad().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="https://imdb.iamidiotareyoutoo.com/search?tt=".concat(e.imdbId),t.prev=1,t.next=4,mo.get(n);case 4:r=t.sent,o=r.data,r.data.main.titleMainImages.edges,h(o),t.next=13;break;case 10:t.prev=10,t.t0=t.catch(1),g(t.t0);case 13:case"end":return t.stop()}}),t,null,[[1,10]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){Od(a,r,o,i,l,"next",e)}function l(e){Od(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return n.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("div",null,(null===(n=m.main)||void 0===n||null===(n=n.filmingLocations.edges)||void 0===n||null===(n=n[0])||void 0===n?void 0:n.node.location)&&t.createElement("p",{className:"review"},"Filming location: ",null===(r=m.main)||void 0===r||null===(r=r.filmingLocations.edges)||void 0===r||null===(r=r[0])||void 0===r?void 0:r.node.location),t.createElement("div",{style:{padding:"5px",backgroundColor:"#2D3250"}},(null===(o=m.short)||void 0===o||null===(o=o.review)||void 0===o?void 0:o.name)&&t.createElement("p",{className:"writer"},ts().decode(null===(a=m.short)||void 0===a||null===(a=a.review)||void 0===a?void 0:a.name)," "),(null===(i=m.short)||void 0===i||null===(i=i.review)||void 0===i?void 0:i.reviewBody)&&t.createElement("p",{className:"review"},b?ts().decode(null===(l=m.short)||void 0===l||null===(l=l.review)||void 0===l?void 0:l.reviewBody):ts().decode(null===(u=m.short)||void 0===u||null===(u=u.review)||void 0===u?void 0:u.reviewBody).substring(0,200)+"... ",t.createElement("span",{className:"moreLink",onClick:function(){return A(!b)}},b?" show less":" show more")),(null===(c=m.short)||void 0===c||null===(c=c.review)||void 0===c||null===(c=c.author)||void 0===c?void 0:c.name)&&t.createElement("p",{className:"writer2"},"Review by ",null===(s=m.short)||void 0===s||null===(s=s.review)||void 0===s||null===(s=s.author)||void 0===s?void 0:s.name)),(null===(d=m.main)||void 0===d||null===(d=d.goofs.edges[0])||void 0===d?void 0:d.node.text.plaidHtml)&&t.createElement("p",{className:"goofs",dangerouslySetInnerHTML:{__html:"Goofs: "+(null===(p=m.main)||void 0===p||null===(p=p.goofs.edges[0])||void 0===p?void 0:p.node.text.plaidHtml)}})))};function _d(e){return _d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_d(e)}function Pd(){var e=Fd(),t=e.m(Pd),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,zd(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Pd=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new Ud(e,t)},AsyncIterator:Id,async:function(e,t,n,o,i){return(r(t)?Ld:Rd)(a(e),t,n,o,i)},keys:Dd,values:zd}})()}function zd(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(_d(e)+" is not iterable")}function Dd(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Rd(e,t,n,r,o){var a=Ld(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Ld(e,t,n,r,o){return new Id(Fd().w(e,t,n,r),o||Promise)}function Id(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof Ud?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(qd(Id.prototype),qd(Id.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),qd(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Fd(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return qd(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(qd(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,qd(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,qd(d,"constructor",c),qd(c,"constructor",u),u.displayName="GeneratorFunction",qd(c,o,"GeneratorFunction"),qd(d),qd(d,o,"Generator"),qd(d,r,(function(){return this})),qd(d,"toString",(function(){return"[object Generator]"})),(Fd=function(){return{w:a,m:p}})()}function qd(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}qd=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){qd(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},qd(e,t,n,r)}function Ud(e,t){this.v=e,this.k=t}function Gd(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function $d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wd(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Yd=function(){var e=$d((0,t.useState)([]),2),n=e[0],r=e[1],o=$d((0,t.useState)(null),2),a=(o[0],o[1]),i=$d((0,t.useState)([]),2),l=i[0],u=i[1],c=$d((0,t.useState)(!0),2),s=c[0],d=c[1],p=vt(),f=gt().numId;(0,t.useEffect)((function(){m()}),[]);var m=function(){var e,t=(e=Pd().mark((function e(){var t,n,o,i,l,c;return Pd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://yts.mx/api/v2/movie_details.json?movie_id=".concat(f,"&with_images=true&with_cast=true&with_rt_ratings"),n="https://yts.mx/api/v2/movie_suggestions.json?movie_id=".concat(f),e.prev=2,e.next=5,mo.get(t);case 5:return o=e.sent,e.next=8,mo.get(n);case 8:i=e.sent,l=o.data.data.movie,c=i.data.data.movies,r(l),u(c),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),a(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Gd(a,r,o,i,l,"next",e)}function l(e){Gd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return s?t.createElement(So,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"detailMain",style:{paddingTop:"80px"}},t.createElement("div",{className:"detailMov"},t.createElement("div",null,t.createElement("div",{className:"cover"},n.large_cover_image&&t.createElement("img",{src:n.large_cover_image,alt:"no picture"}),t.createElement("span",null,t.createElement(Os,{number:n.imdb_code}))),t.createElement("div",null,t.createElement("iframe",{src:"https://www.youtube.com/embed/".concat(n.yt_trailer_code),allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",className:"iframe"}))),t.createElement("div",null,t.createElement("div",{className:"movieTitle"},n.title_long),t.createElement("div",{className:"divGenre"},n.genres&&t.createElement("div",{className:"genres"},n.genres.map((function(e,n){return t.createElement("p",{key:n},e)}))),t.createElement("div",{className:"genres"},t.createElement("p",null,"⏲"+n.runtime+" min ⭐"+n.rating," "),t.createElement(Gs,{number:n.imdb_code}))),t.createElement("div",null,t.createElement(hs,{number:n.imdb_code})),t.createElement("br",null),t.createElement(jd,{imdbId:n.imdb_code})))),t.createElement("div",{className:"detailMain"},t.createElement("div",{className:"detailMov"},t.createElement(yd,{imdbId:n.imdb_code}),t.createElement("div",null,t.createElement("div",{className:"sugestion"},t.createElement("div",{className:"screen"},n.medium_screenshot_image1&&t.createElement(t.Fragment,null,t.createElement("img",{src:n.medium_screenshot_image1,className:"imgMedium"}),t.createElement("div",{className:"screenImg"},t.createElement("span",{className:"fullScreen"},t.createElement($s.A,null)),t.createElement("span",null,t.createElement("img",{src:n.large_screenshot_image1,className:"dropScreen"})))),n.medium_screenshot_image2&&t.createElement(t.Fragment,null,t.createElement("img",{src:n.medium_screenshot_image2,className:"imgMedium"}),t.createElement("div",{className:"screenImg"},t.createElement("span",{className:"fullScreen"},t.createElement($s.A,null)),t.createElement("span",null,t.createElement("img",{src:n.large_screenshot_image2,className:"dropScreen"})))),n.medium_screenshot_image3&&t.createElement(t.Fragment,null,t.createElement("img",{src:n.medium_screenshot_image3,className:"imgMedium"}),t.createElement("div",{className:"screenImg"},t.createElement("span",{className:"fullScreen"},t.createElement($s.A,null)),t.createElement("span",null,t.createElement("img",{src:n.large_screenshot_image3,className:"dropScreen"})))),t.createElement("p",{className:"morePic",onClick:function(){var e,t;e=n.imdb_code,t="/moviePicture/".concat(e),p(t),window.scrollTo({top:0,behavior:"smooth"})}},"More Picture")),n.torrents&&t.createElement("div",null,n.torrents.map((function(e,n){return t.createElement("table",{className:"torrent",key:n},t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{colSpan:2},e.date_uploaded),t.createElement("td",{rowSpan:3},t.createElement("a",{href:e.url},"DOWNLOAD"))),t.createElement("tr",null,t.createElement("td",null,e.quality),t.createElement("td",null,e.size)),t.createElement("tr",null,t.createElement("td",null,e.type),t.createElement("td",null,e.video_codec))))})),t.createElement("div",{className:"torrent",style:{padding:"20px"}},t.createElement("span",null,"Uploaded ",n.date_uploaded)))))),t.createElement("div",{className:"similar"},"Similar Movies")),t.createElement("div",{className:"movieMain"},l.map((function(e){return t.createElement("div",{key:e.id,className:"holder"},t.createElement("div",{className:"dropdownM"},t.createElement("div",null,t.createElement("img",{src:e.medium_cover_image,alt:""})),t.createElement("span",{className:"dropdown-contentM"},e.genres.map((function(e,n){return t.createElement("p",{key:n},e)})),t.createElement("p",{style:{paddingTop:"15px"}}," ⏲",e.runtime," min ⭐",e.rating))),t.createElement("div",{onClick:function(){!function(e){var t="/movieDetails2/".concat(e);p(t)}(e.id),window.scrollTo({top:0,behavior:"smooth"})},className:"titleLong"},e.title_long))}))),t.createElement(go,null))};function Hd(e){return Hd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Hd(e)}function Vd(){var e=ep(),t=e.m(Vd),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Qd(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Vd=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new np(e,t)},AsyncIterator:Jd,async:function(e,t,n,o,i){return(r(t)?Xd:Zd)(a(e),t,n,o,i)},keys:Kd,values:Qd}})()}function Qd(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Hd(e)+" is not iterable")}function Kd(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Zd(e,t,n,r,o){var a=Xd(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Xd(e,t,n,r,o){return new Jd(ep().w(e,t,n,r),o||Promise)}function Jd(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof np?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(tp(Jd.prototype),tp(Jd.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),tp(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function ep(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return tp(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(tp(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,tp(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,tp(d,"constructor",c),tp(c,"constructor",u),u.displayName="GeneratorFunction",tp(c,o,"GeneratorFunction"),tp(d),tp(d,o,"Generator"),tp(d,r,(function(){return this})),tp(d,"toString",(function(){return"[object Generator]"})),(ep=function(){return{w:a,m:p}})()}function tp(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}tp=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){tp(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},tp(e,t,n,r)}function np(e,t){this.v=e,this.k=t}function rp(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function op(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ap(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ap(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ap(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const ip=function(){var e=op((0,t.useState)([]),2),n=e[0],r=e[1],o=op((0,t.useState)(null),2),a=(o[0],o[1]),i=op((0,t.useState)([]),2),l=i[0],u=i[1],c=op((0,t.useState)(!0),2),s=c[0],d=c[1],p=vt(),f=gt().numId;(0,t.useEffect)((function(){m()}),[]);var m=function(){var e,t=(e=Vd().mark((function e(){var t,n,o,i,l,c;return Vd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://yts.mx/api/v2/movie_details.json?movie_id=".concat(f,"&with_images=true&with_cast=true&with_rt_ratings"),n="https://yts.mx/api/v2/movie_suggestions.json?movie_id=".concat(f),e.prev=2,e.next=5,mo.get(t);case 5:return o=e.sent,e.next=8,mo.get(n);case 8:i=e.sent,l=o.data.data.movie,c=i.data.data.movies,r(l),u(c),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),a(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){rp(a,r,o,i,l,"next",e)}function l(e){rp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return s?t.createElement(So,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"detailMain",style:{paddingTop:"80px"}},t.createElement("div",{className:"detailMov"},t.createElement("div",null,t.createElement("div",{className:"cover"},n.large_cover_image&&t.createElement("img",{src:n.large_cover_image,alt:"no picture"}),t.createElement("span",null,t.createElement(Os,{number:n.imdb_code}))),t.createElement("div",null,t.createElement("iframe",{src:"https://www.youtube.com/embed/".concat(n.yt_trailer_code),allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",className:"iframe"}))),t.createElement("div",null,t.createElement("div",{className:"movieTitle"},n.title_long),t.createElement("div",{className:"divGenre"},n.genres&&t.createElement("div",{className:"genres"},n.genres.map((function(e,n){return t.createElement("p",{key:n},e)}))),t.createElement("div",{className:"genres"},t.createElement("p",null,"⏲"+n.runtime+" min ⭐"+n.rating," "),t.createElement(Gs,{number:n.imdb_code}))),t.createElement("div",null,t.createElement(hs,{number:n.imdb_code})),t.createElement("br",null),t.createElement(jd,{imdbId:n.imdb_code})))),t.createElement("div",{className:"detailMain"},t.createElement("div",{className:"detailMov"},t.createElement(yd,{imdbId:n.imdb_code}),t.createElement("div",null,t.createElement("div",{className:"sugestion"},t.createElement("div",{className:"screen"},n.medium_screenshot_image1&&t.createElement(t.Fragment,null,t.createElement("img",{src:n.medium_screenshot_image1,className:"imgMedium"}),t.createElement("div",{className:"screenImg"},t.createElement("span",{className:"fullScreen"},t.createElement($s.A,null)),t.createElement("span",null,t.createElement("img",{src:n.large_screenshot_image1,className:"dropScreen"})))),n.medium_screenshot_image2&&t.createElement(t.Fragment,null,t.createElement("img",{src:n.medium_screenshot_image2,className:"imgMedium"}),t.createElement("div",{className:"screenImg"},t.createElement("span",{className:"fullScreen"},t.createElement($s.A,null)),t.createElement("span",null,t.createElement("img",{src:n.large_screenshot_image2,className:"dropScreen"})))),n.medium_screenshot_image3&&t.createElement(t.Fragment,null,t.createElement("img",{src:n.medium_screenshot_image3,className:"imgMedium"}),t.createElement("div",{className:"screenImg"},t.createElement("span",{className:"fullScreen"},t.createElement($s.A,null)),t.createElement("span",null,t.createElement("img",{src:n.large_screenshot_image3,className:"dropScreen"})))),t.createElement("p",{className:"morePic",onClick:function(){var e,t;e=n.imdb_code,t="/moviePicture/".concat(e),p(t),window.scrollTo({top:0,behavior:"smooth"})}},"More Picture")),n.torrents&&t.createElement("div",null,n.torrents.map((function(e,n){return t.createElement("table",{className:"torrent",key:n},t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{colSpan:2},e.date_uploaded),t.createElement("td",{rowSpan:3},t.createElement("a",{href:e.url},"DOWNLOAD"))),t.createElement("tr",null,t.createElement("td",null,e.quality),t.createElement("td",null,e.size)),t.createElement("tr",null,t.createElement("td",null,e.type),t.createElement("td",null,e.video_codec))))})),t.createElement("div",{className:"torrent",style:{padding:"20px"}},t.createElement("span",null,"Uploaded ",n.date_uploaded)))))),t.createElement("div",{className:"similar"},"Similar Movies")),t.createElement("div",{className:"movieMain"},l.map((function(e){return t.createElement("div",{key:e.id,className:"holder"},t.createElement("div",{className:"dropdownM"},t.createElement("div",null,t.createElement("img",{src:e.medium_cover_image,alt:""})),t.createElement("span",{className:"dropdown-contentM"},e.genres.map((function(e,n){return t.createElement("p",{key:n},e)})),t.createElement("p",{style:{paddingTop:"15px"}}," ⏲",e.runtime," min ⭐",e.rating))),t.createElement("div",{onClick:function(){!function(e){var t="/movieDetails/".concat(e);p(t)}(e.id),window.scrollTo({top:0,behavior:"smooth"})},className:"titleLong"},e.title_long))}))),t.createElement(go,null))};function lp(e){return lp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},lp(e)}function up(){var e=mp(),t=e.m(up),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,cp(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(up=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new vp(e,t)},AsyncIterator:fp,async:function(e,t,n,o,i){return(r(t)?pp:dp)(a(e),t,n,o,i)},keys:sp,values:cp}})()}function cp(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(lp(e)+" is not iterable")}function sp(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function dp(e,t,n,r,o){var a=pp(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function pp(e,t,n,r,o){return new fp(mp().w(e,t,n,r),o||Promise)}function fp(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof vp?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(hp(fp.prototype),hp(fp.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),hp(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function mp(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return hp(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(hp(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,hp(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,hp(d,"constructor",c),hp(c,"constructor",u),u.displayName="GeneratorFunction",hp(c,o,"GeneratorFunction"),hp(d),hp(d,o,"Generator"),hp(d,r,(function(){return this})),hp(d,"toString",(function(){return"[object Generator]"})),(mp=function(){return{w:a,m:p}})()}function hp(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}hp=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){hp(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},hp(e,t,n,r)}function vp(e,t){this.v=e,this.k=t}function gp(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function yp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return bp(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Ap=function(){var e=yp((0,t.useState)([]),2),n=e[0],r=e[1],o=yp((0,t.useState)(1),2),a=o[0],i=o[1],l=yp((0,t.useState)(0),2),u=l[0],c=l[1],s=yp((0,t.useState)(!0),2),d=s[0],p=s[1],f=vt(),m=(0,t.useContext)(Fo).searchStringValue;(0,t.useEffect)((function(){h(m,a)}),[m,a]);var h=function(){var e,t=(e=up().mark((function e(t,n){var o,a;return up().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://yts.mx/api/v2/list_movies.json?query_term=".concat(t,"&limit=").concat(10,"&page=").concat(n));case 2:return o=e.sent,e.next=5,o.json();case 5:a=e.sent,r(a.data.movies),c(a.data.movie_count),p(!1);case 9:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){gp(a,r,o,i,l,"next",e)}function l(e){gp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e,n){return t.apply(this,arguments)}}(),v=Math.ceil(u/10);return d?t.createElement(So,null):0==u?t.createElement(t.Fragment,null,t.createElement("div",{className:"gridTv",style:{paddingTop:"60px",paddingLeft:"25px"}},t.createElement("p",{className:"time"},m," not found")),t.createElement("div",{className:"place"},t.createElement("div",{className:"placeBut"},t.createElement(Ba,{placeholder:"Tv Show & Actor",linkTo:"/tvShow"}),t.createElement(Ma,{placeholder:"Movies",linkTo:"/movies"})))):t.createElement(t.Fragment,null,t.createElement("div",{className:"gridTv",style:{paddingTop:"60px",paddingLeft:"25px"}},t.createElement("p",{className:"time"},u," results for: ",m)),t.createElement("div",{className:"hrGenre"}),t.createElement("div",{className:"movieMain"},n.map((function(e){return t.createElement("div",{key:e.id,className:"holder"},t.createElement("div",{className:"dropdownM"},t.createElement("div",null,t.createElement("img",{src:e.medium_cover_image,alt:"no picture"})),t.createElement("span",{className:"dropdown-contentM"},e.genres&&t.createElement(t.Fragment,null,e.genres.map((function(e){return t.createElement("p",null,e)}))),t.createElement("p",{style:{paddingTop:"15px"}}," ⏲",e.runtime," min ⭐",e.rating))),t.createElement("div",{onClick:function(){var t,n;t=e.id,n="/movieDetails/".concat(t),f(n),window.scrollTo({top:0,behavior:"smooth"})},className:"titleLong"},e.title_long))}))),t.createElement("div",{className:"movieNum"},Array.from({length:v},(function(e,n){return t.createElement("div",{className:a===n+1?"numbAct":"numb",key:n+1,onClick:function(){i(n+1),window.scrollTo({top:0,behavior:"smooth"})},disabled:n+1===a},n+1)}))),t.createElement(go,null))};function xp(e){return xp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xp(e)}function wp(){var e=Mp(),t=e.m(wp),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Cp(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(wp=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new Np(e,t)},AsyncIterator:Bp,async:function(e,t,n,o,i){return(r(t)?kp:Ep)(a(e),t,n,o,i)},keys:Sp,values:Cp}})()}function Cp(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(xp(e)+" is not iterable")}function Sp(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Ep(e,t,n,r,o){var a=kp(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function kp(e,t,n,r,o){return new Bp(Mp().w(e,t,n,r),o||Promise)}function Bp(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof Np?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Op(Bp.prototype),Op(Bp.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Op(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Mp(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Op(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Op(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Op(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Op(d,"constructor",c),Op(c,"constructor",u),u.displayName="GeneratorFunction",Op(c,o,"GeneratorFunction"),Op(d),Op(d,o,"Generator"),Op(d,r,(function(){return this})),Op(d,"toString",(function(){return"[object Generator]"})),(Mp=function(){return{w:a,m:p}})()}function Op(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Op=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Op(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Op(e,t,n,r)}function Np(e,t){this.v=e,this.k=t}function Tp(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function jp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return _p(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_p(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Pp=function(){var e=jp((0,t.useState)([]),2),n=e[0],r=e[1],o=jp((0,t.useState)(1),2),a=o[0],i=o[1],l=jp((0,t.useState)(0),2),u=l[0],c=l[1],s=jp((0,t.useState)(!0),2),d=s[0],p=s[1],f=vt(),m=gt().genre;(0,t.useEffect)((function(){h(a)}),[a]);var h=function(){var e,t=(e=wp().mark((function e(t){var n,o;return wp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://yts.mx/api/v2/list_movies.json?genre=".concat(m,"&limit=").concat(10,"&page=").concat(t));case 2:return n=e.sent,e.next=5,n.json();case 5:o=e.sent,r(o.data.movies),c(o.data.movie_count),p(!1);case 9:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Tp(a,r,o,i,l,"next",e)}function l(e){Tp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),v=Math.ceil(u/10);return d?t.createElement(t.Fragment,null,t.createElement(So,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"gridTv",style:{paddingTop:"60px",paddingLeft:"25px"}},t.createElement("p",{className:"time"}," ",m)),t.createElement("div",{className:"hrGenre"}),t.createElement("div",{className:"movieMain"},n.map((function(e){return t.createElement("div",{key:e.id,className:"holder"},t.createElement("div",{className:"dropdownM"},t.createElement("div",null,t.createElement("img",{src:e.medium_cover_image,alt:"no picture"})),t.createElement("span",{className:"dropdown-contentM"},e.genres.map((function(e,n){return t.createElement("p",{key:n},e)})),t.createElement("p",{style:{paddingTop:"15px"}}," ⏲",e.runtime," min ⭐",e.rating))),t.createElement("div",{onClick:function(){return t=e.id,n="/movieDetails/".concat(t),void f(n);var t,n},className:"titleLong"},e.title_long))}))),t.createElement("div",{className:"movieNum"},Array.from({length:v},(function(e,n){return t.createElement("div",{className:a===n+1?"numbAct":"numb",key:n+1,onClick:function(){i(n+1),window.scrollTo({top:0,behavior:"smooth"})},disabled:n+1===a},n+1)}))),t.createElement(go,null))};function zp(e){return zp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zp(e)}function Dp(){var e=Up(),t=e.m(Dp),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Rp(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Dp=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new $p(e,t)},AsyncIterator:qp,async:function(e,t,n,o,i){return(r(t)?Fp:Ip)(a(e),t,n,o,i)},keys:Lp,values:Rp}})()}function Rp(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(zp(e)+" is not iterable")}function Lp(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Ip(e,t,n,r,o){var a=Fp(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function Fp(e,t,n,r,o){return new qp(Up().w(e,t,n,r),o||Promise)}function qp(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof $p?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(Gp(qp.prototype),Gp(qp.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),Gp(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function Up(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return Gp(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(Gp(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Gp(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,Gp(d,"constructor",c),Gp(c,"constructor",u),u.displayName="GeneratorFunction",Gp(c,o,"GeneratorFunction"),Gp(d),Gp(d,o,"Generator"),Gp(d,r,(function(){return this})),Gp(d,"toString",(function(){return"[object Generator]"})),(Up=function(){return{w:a,m:p}})()}function Gp(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Gp=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Gp(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},Gp(e,t,n,r)}function $p(e,t){this.v=e,this.k=t}function Wp(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Yp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Hp(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Vp=function(){var e=Yp((0,t.useState)([]),2),n=e[0],r=e[1],o=Yp((0,t.useState)(1),2),a=o[0],i=o[1],l=Yp((0,t.useState)(0),2),u=l[0],c=l[1],s=Yp((0,t.useState)(!0),2),d=s[0],p=s[1],f=vt();(0,t.useEffect)((function(){m(a)}),[a]);var m=function(){var e,t=(e=Dp().mark((function e(t){var n,o;return Dp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://yts.mx/api/v2/list_movies.json?sort_by=rating&limit=".concat(10,"&page=").concat(t));case 2:return n=e.sent,e.next=5,n.json();case 5:o=e.sent,r(o.data.movies),c(o.data.movie_count),p(!1);case 9:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Wp(a,r,o,i,l,"next",e)}function l(e){Wp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),h=Math.ceil(u/10);return d?t.createElement(t.Fragment,null,t.createElement("div",{className:"gridTv",style:{paddingTop:"60px",paddingLeft:"25px"}},t.createElement("p",{className:"time"},"Sort by best rating")),t.createElement(So,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"gridTv",style:{paddingTop:"60px",paddingLeft:"25px"}},t.createElement("p",{className:"time"},"Sort by best rating")),t.createElement("div",{className:"hrGenre"}),t.createElement("div",{className:"movieMain"},n.map((function(e){return t.createElement("div",{key:e.id,className:"holder"},t.createElement("div",{className:"dropdownM"},t.createElement("div",null,t.createElement("img",{src:e.medium_cover_image,alt:"",className:"dropImg"})),t.createElement("span",{className:"dropdown-contentM"},e.genres&&t.createElement(t.Fragment,null,e.genres.map((function(e){return t.createElement("p",null,e)}))),t.createElement("p",{style:{paddingTop:"15px"}}," ⏲",e.runtime," min ⭐",e.rating))),t.createElement("div",{onClick:function(){var t,n;t=e.id,n="/movieDetails/".concat(t),f(n),window.scrollTo({top:0,behavior:"smooth"})},className:"titleLong"},e.title_long))}))),t.createElement("div",{className:"movieNum"},Array.from({length:h},(function(e,n){return t.createElement("div",{className:a===n+1?"numbAct":"numb",key:n+1,onClick:function(){i(n+1),window.scrollTo({top:0,behavior:"smooth"})},disabled:n+1===a},n+1)}))),t.createElement(go,null))};function Qp(e){return Qp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qp(e)}function Kp(){var e=nf(),t=e.m(Kp),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,Zp(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(Kp=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new of(e,t)},AsyncIterator:tf,async:function(e,t,n,o,i){return(r(t)?ef:Jp)(a(e),t,n,o,i)},keys:Xp,values:Zp}})()}function Zp(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Qp(e)+" is not iterable")}function Xp(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function Jp(e,t,n,r,o){var a=ef(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function ef(e,t,n,r,o){return new tf(nf().w(e,t,n,r),o||Promise)}function tf(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof of?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(rf(tf.prototype),rf(tf.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),rf(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function nf(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return rf(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(rf(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,rf(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,rf(d,"constructor",c),rf(c,"constructor",u),u.displayName="GeneratorFunction",rf(c,o,"GeneratorFunction"),rf(d),rf(d,o,"Generator"),rf(d,r,(function(){return this})),rf(d,"toString",(function(){return"[object Generator]"})),(nf=function(){return{w:a,m:p}})()}function rf(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}rf=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){rf(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},rf(e,t,n,r)}function of(e,t){this.v=e,this.k=t}function af(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function lf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return uf(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?uf(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function uf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const cf=function(){var e=lf((0,t.useState)([]),2),n=e[0],r=e[1],o=lf((0,t.useState)(1),2),a=o[0],i=o[1],l=lf((0,t.useState)(0),2),u=l[0],c=l[1],s=lf((0,t.useState)(!0),2),d=s[0],p=s[1],f=vt();(0,t.useEffect)((function(){m(a)}),[a]);var m=function(){var e,t=(e=Kp().mark((function e(t){var n,o;return Kp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://yts.mx/api/v2/list_movies.json?sort_by=year&limit=".concat(10,"&page=").concat(t));case 2:return n=e.sent,e.next=5,n.json();case 5:o=e.sent,r(o.data.movies),c(o.data.movie_count),p(!1);case 9:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){af(a,r,o,i,l,"next",e)}function l(e){af(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),h=Math.ceil(u/10);return d?t.createElement(t.Fragment,null,t.createElement("div",{className:"gridTv",style:{paddingTop:"60px",paddingLeft:"25px"}},t.createElement("p",{className:"time"},"Sort by years")),t.createElement(So,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"gridTv",style:{paddingTop:"60px",paddingLeft:"25px"}},t.createElement("p",{className:"time"},"Sort by years")),t.createElement("div",{className:"hrGenre"}),t.createElement("div",{className:"movieMain"},n.map((function(e){return t.createElement("div",{key:e.id,className:"holder"},t.createElement("div",{className:"dropdownM"},t.createElement("div",null,t.createElement("img",{src:e.medium_cover_image,alt:"",className:"dropImg"})),t.createElement("span",{className:"dropdown-contentM"},e.genres&&t.createElement(t.Fragment,null,e.genres.map((function(e){return t.createElement("p",null,e)}))),t.createElement("p",{style:{paddingTop:"15px"}}," ⏲",e.runtime," min ⭐",e.rating))),t.createElement("div",{onClick:function(){var t,n;t=e.id,n="/movieDetails/".concat(t),f(n),window.scrollTo({top:0,behavior:"smooth"})},className:"titleLong"},e.title_long))}))),t.createElement("div",{className:"movieNum"},Array.from({length:h},(function(e,n){return t.createElement("div",{className:a===n+1?"numbAct":"numb",key:n+1,onClick:function(){i(n+1),window.scrollTo({top:0,behavior:"smooth"})},disabled:n+1===a},n+1)}))),t.createElement(go,null))};function sf(e){return sf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sf(e)}function df(){var e=gf(),t=e.m(df),n=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function r(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))}var o={throw:1,return:2,break:3,continue:3};function a(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,o[e],t)},delegateYield:function(e,o,a){return t.resultName=o,n(r.d,pf(e),a)},finish:function(e){return n(r.f,e)}},n=function(e,n,o){r.p=t.prev,r.n=t.next;try{return e(n,o)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(df=function(){return{wrap:function(t,n,r,o){return e.w(a(t),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:e.m,awrap:function(e,t){return new bf(e,t)},AsyncIterator:vf,async:function(e,t,n,o,i){return(r(t)?hf:mf)(a(e),t,n,o,i)},keys:ff,values:pf}})()}function pf(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(sf(e)+" is not iterable")}function ff(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}}function mf(e,t,n,r,o){var a=hf(e,t,n,r,o);return a.next().then((function(e){return e.done?e.value:a.next()}))}function hf(e,t,n,r,o){return new vf(gf().w(e,t,n,r),o||Promise)}function vf(e,t){function n(r,o,a,i){try{var l=e[r](o),u=l.value;return u instanceof bf?t.resolve(u.v).then((function(e){n("next",e,a,i)}),(function(e){n("throw",e,a,i)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,i)}))}catch(e){i(e)}}var r;this.next||(yf(vf.prototype),yf(vf.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),yf(this,"_invoke",(function(e,o,a){function i(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(i,i):i()}),!0)}function gf(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function a(n,r,o,a){var u=r&&r.prototype instanceof l?r:l,c=Object.create(u.prototype);return yf(c,"_invoke",function(n,r,o){var a,l,u,c=0,s=o||[],d=!1,p={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,l=0,u=e,p.n=n,i}};function f(n,r){for(l=n,u=r,t=0;!d&&c&&!o&&t<s.length;t++){var o,a=s[t],f=p.p,m=a[2];n>3?(o=m===r)&&(u=a[(l=a[4])?5:(l=3,3)],a[4]=a[5]=e):a[0]<=f&&((o=n<2&&f<a[1])?(l=0,p.v=r,p.n=a[1]):f<m&&(o=n<3||a[0]>r||r>m)&&(a[4]=n,a[5]=r,p.n=m,l=0))}if(o||n>1)return i;throw d=!0,r}return function(o,s,m){if(c>1)throw TypeError("Generator is already running");for(d&&1===s&&f(s,m),l=s,u=m;(t=l<2?e:u)||!d;){a||(l?l<3?(l>1&&(p.n=-1),f(l,u)):p.n=u:p.v=u);try{if(c=2,a){if(l||(o="next"),t=a[o]){if(!(t=t.call(a,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,l<2&&(l=0)}else 1===l&&(t=a.return)&&t.call(a),l<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),l=1);a=e}else if((t=(d=p.n<0)?u:n.call(r,p))!==i)break}catch(t){a=e,l=1,u=t}finally{c=1}}return{value:t,done:d}}}(n,o,a),!0),c}var i={};function l(){}function u(){}function c(){}t=Object.getPrototypeOf;var s=[][r]?t(t([][r]())):(yf(t={},r,(function(){return this})),t),d=c.prototype=l.prototype=Object.create(s);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,yf(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return u.prototype=c,yf(d,"constructor",c),yf(c,"constructor",u),u.displayName="GeneratorFunction",yf(c,o,"GeneratorFunction"),yf(d),yf(d,o,"Generator"),yf(d,r,(function(){return this})),yf(d,"toString",(function(){return"[object Generator]"})),(gf=function(){return{w:a,m:p}})()}function yf(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}yf=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){yf(e,t,(function(e){return this._invoke(t,n,e)}))};a("next",0),a("throw",1),a("return",2)}},yf(e,t,n,r)}function bf(e,t){this.v=e,this.k=t}function Af(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function xf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return wf(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wf(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Cf=function(){var e=xf((0,t.useState)(null),2),n=(e[0],e[1]),r=xf((0,t.useState)(!0),2),o=r[0],a=r[1],i=xf((0,t.useState)([]),2),l=i[0],u=i[1],c=gt().images;(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=df().mark((function e(){var t,r,o;return df().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://imdb.iamidiotareyoutoo.com/search?tt=".concat(c),e.prev=1,e.next=4,mo.get(t);case 4:r=e.sent,o=r.data.main.titleMainImages.edges,u(o),a(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Af(a,r,o,i,l,"next",e)}function l(e){Af(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return o?t.createElement(t.Fragment,null,t.createElement(So,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"showMain"},l.map((function(e,n){return t.createElement("div",{key:n,className:"bigImg"},e.node.url&&t.createElement("img",{src:e.node.url,alt:""}),e.node.caption.plainText&&t.createElement("p",null,e.node.caption.plainText))}))),t.createElement(go,null))};(0,b.A)({palette:{primary:A.A,secondary:{50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5"}}});const Sf=function(){var e=(new Date).getFullYear();return t.createElement(t.Fragment,null,t.createElement(Ft,{basename:"/"},t.createElement("div",{className:"provider"},t.createElement("div",{className:"fixed"},t.createElement($t,{to:"/"},t.createElement(xe,{variant:"contained",sx:{ml:2},onClick:function(){return window.scrollTo({top:0,behavior:"smooth"})}},"TV Show")),t.createElement($t,{to:"/movie"},t.createElement(xe,{variant:"contained",sx:{ml:2},onClick:function(){return window.scrollTo({top:0,behavior:"smooth"})}},"Movies")),t.createElement($t,{to:"/search"},t.createElement(xe,{variant:"contained",sx:{ml:2},onClick:function(){return window.scrollTo({top:0,behavior:"smooth"})}},"Search")))),t.createElement(jt,null,t.createElement(Nt,{path:"/",element:t.createElement(Io,null)}),t.createElement(Nt,{path:"/search",element:t.createElement(Qu,null)}),t.createElement(Nt,{path:"/tvShow",element:t.createElement(Ua,null)}),t.createElement(Nt,{path:"/showDetails/:showId",element:t.createElement(wl,null)}),t.createElement(Nt,{path:"/imgShow/:images",element:t.createElement(Dl,null)}),t.createElement(Nt,{path:"/actorDetails/:actorId",element:t.createElement(Hu,null)}),t.createElement(Nt,{path:"/showClick/:showId",element:t.createElement(Rc,null)}),t.createElement(Nt,{path:"/movie",element:t.createElement(Jc,null)}),t.createElement(Nt,{path:"/movieDetails/:numId",element:t.createElement(Yd,null)}),t.createElement(Nt,{path:"/movieDetails2/:numId",element:t.createElement(ip,null)}),t.createElement(Nt,{path:"/movies",element:t.createElement(Ap,null)}),t.createElement(Nt,{path:"/categ/:genre",element:t.createElement(Pp,null)}),t.createElement(Nt,{path:"/rating",element:t.createElement(Vp,null)}),t.createElement(Nt,{path:"/year",element:t.createElement(cf,null)}),t.createElement(Nt,{path:"/moviePicture/:images",element:t.createElement(Cf,null)}))),t.createElement("div",{className:"footer"},t.createElement("hr",null),t.createElement("p",null,"Data base from TvMaze, YTS.mx, OMDb and Free Movie"),"InTerVal ©",e))};function Ef(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const kf=function(){var e,n,r=(e=(0,t.useState)("Enter search criterium!"),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Ef(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ef(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return t.createElement(Fo.Provider,{value:{setSearchStringFn:a,searchStringValue:o}},t.createElement(Sf,null))};r.createRoot(document.getElementById("app")).render(t.createElement(t.StrictMode,null,t.createElement(kf,{number:10,title:"String from index file",text:"Text from index file"})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,